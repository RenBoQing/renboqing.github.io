<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Day07-01-25-SpringCloud技术-Alibaba</title>
    <link href="/2023/01/25/Day07-01-25-SpringCloud%E6%8A%80%E6%9C%AF-Alibaba/"/>
    <url>/2023/01/25/Day07-01-25-SpringCloud%E6%8A%80%E6%9C%AF-Alibaba/</url>
    
    <content type="html"><![CDATA[<h1 id="Day07-01-25-SpringCloud技术-Alibaba"><a href="#Day07-01-25-SpringCloud技术-Alibaba" class="headerlink" title="Day07-01-25-SpringCloud技术-Alibaba"></a>Day07-01-25-SpringCloud技术-Alibaba</h1><h2 id="1-Alibaba-cloud简介"><a href="#1-Alibaba-cloud简介" class="headerlink" title="1.Alibaba-cloud简介"></a>1.Alibaba-cloud简介</h2><blockquote><p>Spring Cloud Alibaba 致力于提供<strong>微服务开发的一站式解决方案</strong>。此项目包含开发分布式应用微服务的必需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发分布式应用服务。依托 Spring Cloud Alibaba，您只需要添加一些注解和少量配置，就可以将 Spring Cloud应用接入阿里微服务解决方案，通过阿里中间件来迅速搭建分布式应用系统。</p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230125162646288.png" alt="image-20230125162646288"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230125162703748.png" alt="image-20230125162703748"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230125162713292.png" alt="image-20230125162713292"></p><h2 id="2-Nacos注册中心"><a href="#2-Nacos注册中心" class="headerlink" title="2.Nacos注册中心"></a>2.Nacos注册中心</h2><h3 id="1-nacos简介"><a href="#1-nacos简介" class="headerlink" title="1.nacos简介"></a>1.nacos简介</h3><blockquote><p>Nacos 致力于<strong>发现、配置和管理微服务</strong>。Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。Nacos 帮助您更敏捷和容易地构建、交付和管理微服务平台。 Nacos 是构建以“服务”为中心的现代应用架构 (例如微服务范式、云原生范式) 的服务基础设施。</p></blockquote><h3 id="2-nacos核心理念"><a href="#2-nacos核心理念" class="headerlink" title="2.nacos核心理念"></a>2.nacos核心理念</h3><h4 id="1-基本架构"><a href="#1-基本架构" class="headerlink" title="1.基本架构"></a>1.基本架构</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230125163722116.png" alt="image-20230125163722116"></p><h4 id="2-服务-Service"><a href="#2-服务-Service" class="headerlink" title="2.服务(Service)"></a>2.服务(Service)</h4><blockquote><p>服务是指一个或一组软件功能（例如特定信息的检索或一组操作的执行），其目的是不同的客户端可以为不同的目的重用（例如通过跨进程的网络调用）。Nacos 支持主流的服务生态，如 Kubernetes Service 、 gRPC|Dubbo RPC Service 或 者 SpringCloud RESTful Service</p></blockquote><h4 id="3-服务注册中心-Service-Registry"><a href="#3-服务注册中心-Service-Registry" class="headerlink" title="3.服务注册中心(Service Registry)"></a>3.服务注册中心(Service Registry)</h4><blockquote><p>服务注册中心，它是服务实例及元数据的数据库。服务实例在启动时注册到服务注册表，并在</p><p>关闭时注销。服务和路由器的客户端查询服务注册表以查找服务的可用实例。服务注册中心可</p><p>能会调用服务实例的健康检查 API 来验证它是否能够处理请求</p></blockquote><h4 id="4-服务元数据-Service-Metadata"><a href="#4-服务元数据-Service-Metadata" class="headerlink" title="4.服务元数据(Service Metadata)"></a>4.服务元数据(Service Metadata)</h4><blockquote><p>服务元数据是指包括服务端点(endpoints)、服务标签、服务版本号、服务实例权重、路由规则、安全策略等描述服务的数据</p></blockquote><h4 id="5-服务提供方-Service-Provider"><a href="#5-服务提供方-Service-Provider" class="headerlink" title="5.服务提供方(Service Provider)"></a>5.<em>服务提供方</em>(Service Provider)</h4><blockquote><p>是指提供可复用和可调用服务的应用方</p></blockquote><h4 id="6-服务消费方-Service-Consumer"><a href="#6-服务消费方-Service-Consumer" class="headerlink" title="6.服务消费方(Service Consumer)"></a>6.服务消费方(Service Consumer)</h4><blockquote><p>是指会发起对某个服务调用的应用方</p></blockquote><h4 id="7-配置-Configuration-–配置文件中心"><a href="#7-配置-Configuration-–配置文件中心" class="headerlink" title="7.配置(Configuration)–配置文件中心"></a>7.配置(Configuration)–配置文件中心</h4><blockquote><p>在系统开发过程中通常会将一些需要变更的参数、变量等从代码中分离出来独立管理，以独立的配置文件的形式存在。目的是让静态的系统工件或者交付物（如 WAR，JAR 包等）更好地和实际的物理运行环境进行适配。配置管理一般包含在系统部署的过程中，由系统管理员或者</p><p>运维人员完成这个步骤。配置变更是调整系统运行时的行为的有效手段之一。</p></blockquote><h4 id="8-配置管理-Configuration-Management"><a href="#8-配置管理-Configuration-Management" class="headerlink" title="8.配置管理(Configuration Management)"></a>8.配置管理(Configuration Management)</h4><blockquote><p>在数据中心中，系统中所有配置的编辑、存储、分发、变更管理、历史版本管理、变更审计等有与配置相关的活动统称为配置管理。</p></blockquote><h4 id="9-名字服务-Naming-Service"><a href="#9-名字服务-Naming-Service" class="headerlink" title="9.名字服务(Naming Service)"></a>9.名字服务(Naming Service)</h4><blockquote><p>提供分布式系统中所有对象(Object)、实体(Entity)的“名字”到关联的元数据之间的映射管理服务，例如 ServiceName -&gt; Endpoints Info, Distributed Lock Name -&gt; Lock Owner&#x2F;Status Info, DNS Domain Name -&gt; IP List, 服务发现和 DNS 就是名字服务的2大场景</p></blockquote><h4 id="10-配置服务-Configuration-Service"><a href="#10-配置服务-Configuration-Service" class="headerlink" title="10.配置服务(Configuration Service)"></a>10.配置服务(Configuration Service)</h4><blockquote><p>在服务或者应用运行过程中，提供动态配置或者元数据以及配置管理的服务提供者。</p></blockquote><h3 id="3-NacosServer的安装和启动"><a href="#3-NacosServer的安装和启动" class="headerlink" title="3.NacosServer的安装和启动"></a>3.NacosServer的安装和启动</h3><blockquote><p>NacosServer 相当于 EurekaServer，只不过 eurekaServer 使我们自己搭建的一个项目，而 NacosServer 别人已经提供好了</p></blockquote><h4 id="1-NacosServer下载"><a href="#1-NacosServer下载" class="headerlink" title="1.NacosServer下载"></a>1.NacosServer下载</h4><blockquote><p>我们要对应版本，目前 alibaba 稳定版是 2.2.6.RELEASE</p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230125183349126.png" alt="image-20230125183349126"></p><blockquote><p><strong>在上一节中了解了版本对应关系，****alibaba</strong> <strong>的</strong> <strong>2.2.6.RELEASE</strong> <strong>对应的</strong> <strong>nacos</strong> <strong>版本为</strong> <strong>1.4.2</strong></p></blockquote><blockquote><p><strong>bin****：可执行文件夹目录，包含：启动、停止命令等等</strong></p><p><strong>conf****：配置文件目录</strong></p><p>target：存放 naocs-server.jar</p><p>LICENSE：授权信息，Nacos 使用 Apache License Version 2.0 授权</p><p>NOTICE：公告信息</p></blockquote><h4 id="2-修改配置文件-config"><a href="#2-修改配置文件-config" class="headerlink" title="2.修改配置文件(config)"></a>2.修改配置文件(config)</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230125200141975.png" alt="image-20230125200141975"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230125201921023.png" alt="image-20230125201921023"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230125201955813.png" alt="image-20230125201955813"></p><h4 id="3-Mysql引入"><a href="#3-Mysql引入" class="headerlink" title="3.Mysql引入"></a>3.Mysql引入</h4><blockquote><p>在 config 目录下找到对应的 sql 脚本，提示：Nacos 建议使用 5.7 的 Mysql 数据库，<strong>版本</strong> <strong>较低或者较高可能存储兼容性</strong>问题 我</p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230125202127672.png" alt="image-20230125202127672"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230125202148145.png" alt="image-20230125202148145"></p><h3 id="4-nacos和eureka的区别"><a href="#4-nacos和eureka的区别" class="headerlink" title="4.nacos和eureka的区别"></a>4.nacos和eureka的区别</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230125204132354.png" alt="image-20230125204132354"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230125204157069.png" alt="image-20230125204157069"></p><h2 id="3-Nacos-注册中心-快速入门"><a href="#3-Nacos-注册中心-快速入门" class="headerlink" title="3.Nacos(注册中心)快速入门"></a>3.Nacos(注册中心)快速入门</h2><h3 id="1-构建nacos-client-a"><a href="#1-构建nacos-client-a" class="headerlink" title="1.构建nacos-client-a"></a>1.构建nacos-client-a</h3><h4 id="1-构建boot项目"><a href="#1-构建boot项目" class="headerlink" title="1.构建boot项目"></a>1.构建boot项目</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230125214224942.png" alt="image-20230125214224942"></p><h4 id="2-修改配置文件-pom"><a href="#2-修改配置文件-pom" class="headerlink" title="2.修改配置文件(pom)"></a>2.修改配置文件(pom)</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.12.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">kotlin.version</span>&gt;</span>1.3.72<span class="hljs-tag">&lt;/<span class="hljs-name">kotlin.version</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud-alibaba.version</span>&gt;</span>2.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud-alibaba.version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-修改配置文件-yaml-和开启注解"><a href="#3-修改配置文件-yaml-和开启注解" class="headerlink" title="3.修改配置文件(yaml)和开启注解"></a>3.修改配置文件(yaml)和开启注解</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-clent-a</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span>  <span class="hljs-comment">#如果不指定默认的命名空间 会注册到public 如果没有指定分组 会注册到DEFAULT_GROUP里面去</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment">#这个是nacos注册中心的地址</span><br>        <span class="hljs-attr">username:</span> <span class="hljs-string">nacos</span><br>        <span class="hljs-attr">password:</span> <span class="hljs-string">nacos</span><br></code></pre></td></tr></table></figure><blockquote><p>@SpringBootApplication<br>@EnableDiscoveryClient<br>public class NacosClientAApplication {</p><p>public static void main(String[] args) {<br>   SpringApplication.run(NacosClientAApplication.class, args);<br>   }</p><p>}</p></blockquote><h3 id="2-构建nacos-client-b"><a href="#2-构建nacos-client-b" class="headerlink" title="2.构建nacos-client-b"></a>2.构建nacos-client-b</h3><h4 id="1-构建boot项目-1"><a href="#1-构建boot项目-1" class="headerlink" title="1.构建boot项目"></a>1.构建boot项目</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230125221702903.png" alt="image-20230125221702903"></p><h4 id="2-修改配置文件-pom-1"><a href="#2-修改配置文件-pom-1" class="headerlink" title="2.修改配置文件(pom)"></a>2.修改配置文件(pom)</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.12.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">kotlin.version</span>&gt;</span>1.3.72<span class="hljs-tag">&lt;/<span class="hljs-name">kotlin.version</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud-alibaba.version</span>&gt;</span>2.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud-alibaba.version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-修改配置文件-yaml-和开启注解-1"><a href="#3-修改配置文件-yaml-和开启注解-1" class="headerlink" title="3.修改配置文件(yaml)和开启注解"></a>3.修改配置文件(yaml)和开启注解</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-clent-a</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span>  <span class="hljs-comment">#如果不指定默认的命名空间 会注册到public 如果没有指定分组 会注册到DEFAULT_GROUP里面去</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment">#这个是nacos注册中心的地址</span><br>        <span class="hljs-attr">username:</span> <span class="hljs-string">nacos</span><br>        <span class="hljs-attr">password:</span> <span class="hljs-string">nacos</span><br></code></pre></td></tr></table></figure><blockquote><p>@SpringBootApplication<br>@EnableDiscoveryClient<br>public class NacosClientAApplication {</p><p>public static void main(String[] args) {<br>   SpringApplication.run(NacosClientAApplication.class, args);<br>   }</p><p>}</p></blockquote><h3 id="3-服务发现"><a href="#3-服务发现" class="headerlink" title="3.服务发现"></a>3.服务发现</h3><h4 id="1-构建Controller"><a href="#1-构建Controller" class="headerlink" title="1.构建Controller"></a>1.构建Controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DiscoveryClient discoveryClient;<br>    <span class="hljs-meta">@GetMapping(&quot;/test&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="hljs-string">&quot;user-service&quot;</span>);<br>        System.out.println(instances);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-构建测试"><a href="#2-构建测试" class="headerlink" title="2.构建测试"></a>2.构建测试</h4><blockquote><p>结论:不同的服务名下的示例不能找到，同一个服务下的不同组的实例也不能找到 只有在同一个服务名称下的同一个组里面的服务才能被找到</p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230125230457861.png" alt="image-20230125230457861"></p><h2 id="4-Nacos集成Feign-远程调用"><a href="#4-Nacos集成Feign-远程调用" class="headerlink" title="4.Nacos集成Feign(远程调用)"></a>4.Nacos集成Feign(远程调用)</h2><blockquote><p>a去调用b中的接口</p></blockquote><h3 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="1.导入依赖"></a>1.导入依赖</h3><blockquote><p>需要导入feign的依赖 以及spring-cloud的依赖  还有对应的cloud的版本控制</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud.version</span>&gt;</span>Hoxton.SR12<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud.version</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-开启feign的客户端-A中"><a href="#2-开启feign的客户端-A中" class="headerlink" title="2.开启feign的客户端(A中)"></a>2.开启feign的客户端(A中)</h3><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">&gt;<span class="hljs-meta">@SpringBootApplication</span><br>&gt;<span class="hljs-meta">@EnableDiscoveryClient</span> <span class="hljs-comment">//开启服务发现服务端</span><br>&gt;<span class="hljs-meta">@EnableFeignClients</span><br>&gt;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NacosClientAApplication</span> &#123;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       SpringApplication.run(NacosClientAApplication.class, args);<br>   &#125;<br><br>&gt;&#125;<br></code></pre></td></tr></table></figure></blockquote><h3 id="3-编写feign接口-a中"><a href="#3-编写feign接口-a中" class="headerlink" title="3.编写feign接口(a中)"></a>3.编写feign接口(a中)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(value = &quot;user-service&quot;)</span> <span class="hljs-comment">//里面写服务的名称</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">TestFeign</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/info&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">info</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-调用测试-A中"><a href="#4-调用测试-A中" class="headerlink" title="4.调用测试(A中)"></a>4.调用测试(A中)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DiscoveryClient discoveryClient;<br><br>    <span class="hljs-meta">@Autowired</span><br>    TestFeign testFeign;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/test&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>        List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="hljs-string">&quot;user-service&quot;</span>);<br>        System.out.println(instances.toString());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> testFeign.info();<br>        <span class="hljs-keyword">return</span> info;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-Nacos集成GateWay-网关"><a href="#5-Nacos集成GateWay-网关" class="headerlink" title="5.Nacos集成GateWay(网关)"></a>5.Nacos集成GateWay(网关)</h2><h3 id="1-构建gate-way-boot项目"><a href="#1-构建gate-way-boot项目" class="headerlink" title="1.构建gate-way-boot项目"></a>1.构建gate-way-boot项目</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230125234721307.png" alt="image-20230125234721307"></p><h3 id="2-修改配置文件-pom-xml"><a href="#2-修改配置文件-pom-xml" class="headerlink" title="2.修改配置文件(pom.xml)"></a>2.修改配置文件(pom.xml)</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud-alibaba.version</span>&gt;</span>2.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud-alibaba.version</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud.version</span>&gt;</span>Hoxton.SR12<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud.version</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-编写配置文件-yaml"><a href="#3-编写配置文件-yaml" class="headerlink" title="3.编写配置文件(yaml)"></a>3.编写配置文件(yaml)</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">gateway</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">nacos</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-string">nacos</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">namespace:</span> <span class="hljs-string">9da0cb1d-bb14-4fa6-bffa-84c1bad10b0a</span>  <span class="hljs-comment">#向car-service里面注册 不能写名字 写id</span><br>        <span class="hljs-attr">group:</span> <span class="hljs-string">DEFAULT_GROUP</span>  <span class="hljs-comment">#向哪一个组注册</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">locator:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-attr">lower-case-service-id:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><blockquote><p>开启注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GateWayApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(GateWayApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-调用测试"><a href="#4-调用测试" class="headerlink" title="4.调用测试"></a>4.调用测试</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230125235837034.png" alt="image-20230125235837034"></p><h2 id="6-Nacos-Discovery对外暴露Endpoint"><a href="#6-Nacos-Discovery对外暴露Endpoint" class="headerlink" title="6.Nacos Discovery对外暴露Endpoint"></a>6.Nacos Discovery对外暴露Endpoint</h2><blockquote><p>Nacos Discovery 内 部 提 供 了 一 个 Endpoint, 对 应 的 </p><p>endpoint id 为nacos-discovery。我们通过该 Endpoint，能获取到：</p><p> 当前服务有哪些服务订阅者 ；</p><p> 当前应用 Nacos 的基础配置信息 ；</p></blockquote><h3 id="1-给任意项目添加依赖"><a href="#1-给任意项目添加依赖" class="headerlink" title="1.给任意项目添加依赖"></a>1.给任意项目添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2.修改配置文件"></a>2.修改配置文件</h3><blockquote><p>Endpoint 本身对外界隐藏显示，我们需要在配置里面开启对 Endponit 的显示支持。</p><p>修改 application.yml 配置文件，在里面添加如下的配置：</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">management:</span><br> <span class="hljs-attr">endpoints:</span><br>  <span class="hljs-attr">web:</span><br>   <span class="hljs-attr">exposure:</span><br>     <span class="hljs-attr">include:</span> <span class="hljs-string">&#x27;*&#x27;</span><br></code></pre></td></tr></table></figure><blockquote><p> exposure.include：对外界保留那些 Endpoint，若是所有则使用* ；</p></blockquote><h3 id="3-启动测试"><a href="#3-启动测试" class="headerlink" title="3.启动测试"></a>3.启动测试</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230126000133297.png" alt="image-20230126000133297"></p><h2 id="7-Nacos-Discovery-Starter更多的配置项"><a href="#7-Nacos-Discovery-Starter更多的配置项" class="headerlink" title="7.Nacos Discovery Starter更多的配置项"></a>7.Nacos Discovery Starter更多的配置项</h2><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230126000220340.png" alt="image-20230126000220340"></p><h2 id="8-Nacos集群"><a href="#8-Nacos集群" class="headerlink" title="8.Nacos集群"></a>8.Nacos集群</h2><h3 id="1-配置nacos"><a href="#1-配置nacos" class="headerlink" title="1.配置nacos"></a>1.配置nacos</h3><blockquote><p>将nacos启动三个，开启不同的端口 8848 8849 8850</p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230126193610397.png" alt="image-20230126193610397"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230126194532005.png" alt="image-20230126194532005"></p><h3 id="2-修改配置文件yaml"><a href="#2-修改配置文件yaml" class="headerlink" title="2.修改配置文件yaml"></a>2.修改配置文件yaml</h3><blockquote><p>只用将client里面王nacos注册的端口改掉即可  8848 8849 8850 都可</p></blockquote><h2 id="9-Nacos做配置文件中心"><a href="#9-Nacos做配置文件中心" class="headerlink" title="9.Nacos做配置文件中心"></a>9.Nacos做配置文件中心</h2><h3 id="1-基本架构-1"><a href="#1-基本架构-1" class="headerlink" title="1.基本架构"></a>1.基本架构</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230126210004157.png" alt="image-20230126210004157"></p><h3 id="2-快速入门"><a href="#2-快速入门" class="headerlink" title="2.快速入门"></a>2.快速入门</h3><h4 id="1-在nacos中构建配置文件"><a href="#1-在nacos中构建配置文件" class="headerlink" title="1.在nacos中构建配置文件"></a>1.在nacos中构建配置文件</h4><blockquote><p>nacos可以做配置文件中心 相当于把配置文件写在nacos的配置管理中(原理和注册中心相同)然后boot项目通过远程来进行读取</p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230126213354133.png" alt="image-20230126213354133"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230126213152196.png" alt="image-20230126213152196"></p><h4 id="2-构建nacos-config-a-boot项目"><a href="#2-构建nacos-config-a-boot项目" class="headerlink" title="2.构建nacos-config-a-boot项目"></a>2.构建nacos-config-a-boot项目</h4><h5 id="1-依赖选择"><a href="#1-依赖选择" class="headerlink" title="1.依赖选择"></a>1.依赖选择</h5><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230126213729900.png" alt="image-20230126213729900"></p><h5 id="2-依赖版本修改"><a href="#2-依赖版本修改" class="headerlink" title="2.依赖版本修改"></a>2.依赖版本修改</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.12.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud-alibaba.version</span>&gt;</span>2.2.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud-alibaba.version</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="3-编写接口"><a href="#3-编写接口" class="headerlink" title="3.编写接口"></a>3.编写接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br>    <span class="hljs-meta">@Value(&quot;hero.name&quot;)</span><br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-meta">@Value(&quot;hero.age&quot;)</span><br>    <span class="hljs-keyword">public</span> String age;<br>    <span class="hljs-meta">@Value(&quot;hero.address&quot;)</span><br>    <span class="hljs-keyword">public</span> String address;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/info&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">heroInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name + age + address;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-修改配置文件-bootstrap-yml"><a href="#4-修改配置文件-bootstrap-yml" class="headerlink" title="4.修改配置文件(bootstrap.yml)"></a>4.修改配置文件(bootstrap.yml)</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-config-a</span><br>  <span class="hljs-comment">#项目在启动的时候 去哪里找配置文件</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-attr">username:</span> <span class="hljs-string">nacos</span><br>        <span class="hljs-attr">password:</span> <span class="hljs-string">nacos</span><br>        <span class="hljs-attr">namespace:</span> <span class="hljs-string">public</span> <span class="hljs-comment">#默认public</span><br>        <span class="hljs-attr">group:</span> <span class="hljs-string">DEFAULT_GROUP</span> <span class="hljs-comment">#默认 DEFAULT_GROUP</span><br>        <span class="hljs-attr">prefix:</span> <span class="hljs-string">nacos-config-a</span> <span class="hljs-comment">#表示读哪个配置文件  Data Id</span><br>        <span class="hljs-attr">file-extension:</span> <span class="hljs-string">yml</span> <span class="hljs-comment">#配置文件的类型</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment">#去这个地址读取配文件</span><br></code></pre></td></tr></table></figure><h5 id="5-启动测试"><a href="#5-启动测试" class="headerlink" title="5.启动测试"></a>5.启动测试</h5><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230126215854745.png" alt="image-20230126215854745"></p><h5 id="6-开发小贴士"><a href="#6-开发小贴士" class="headerlink" title="6.开发小贴士"></a>6.开发小贴士</h5><blockquote><p>一般情况下 都是使用一个domain 或者一个config来进行配置文件的读取</p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230126220928776.png" alt="image-20230126220928776"></p><h3 id="3-配置文件回滚"><a href="#3-配置文件回滚" class="headerlink" title="3.配置文件回滚"></a>3.配置文件回滚</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230126221302305.png" alt="image-20230126221302305"></p><h3 id="4-配置文件读取规则"><a href="#4-配置文件读取规则" class="headerlink" title="4.配置文件读取规则"></a>4.配置文件读取规则</h3><blockquote><p>nacos 配置中心通过 namespace、dataId 和 group 来唯一确定一条配置。</p><p> Namespace：即命名空间。默认的命名空间为 public，我们可以在 Nacos 控制台中新建命名空间；</p><p> dataId：即配置文件名称</p><p> Group ： 即 配 置 分 组 ， 默 认 为 DEFAULT_GROUP ， 可 以 通 过spring.cloud.nacos.config.group 配置。</p><p>其中：dataId 是最关键的配置字段：格式如下：</p><p><strong>${prefix}</strong> <strong>-</strong> <strong>${spring.profiles.active}</strong> <strong>. ${file-extension}</strong></p><p>说明：</p><p> prefix 默 认 为 spring.application.name 的 值 ， 也 可 以 通 过 配 置 项spring.cloud.nacos.config.prefix 来配置；</p><p> spring.profiles.active 即 为 当 前 环 境 对 应 的 profile 。 注 意 ， 当</p><p>spring.profiles.active 为空时，对应的连接符-也将不存在，dataId 的拼接格式变成${prefix}.${file-extension}；</p><p> file-extension 为 配 置 内 容 的 数 据 格 式 ， 可 以 通 过 配 置 项spring.cloud.nacos.config.file-extension 来配置</p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230126223442128.png" alt="image-20230126223442128"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230126224406797.png" alt="image-20230126224406797"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">nacos-config-a</span><br>  <span class="hljs-comment">#项目在启动的时候 去哪里找配置文件</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">config:</span><br>        <span class="hljs-attr">username:</span> <span class="hljs-string">nacos</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">localhost:8848</span> <span class="hljs-comment">#去这个地址读取配文件</span><br>        <span class="hljs-attr">password:</span> <span class="hljs-string">nacos</span><br>        <span class="hljs-attr">namespace:</span> <span class="hljs-string">public</span> <span class="hljs-comment">#默认public</span><br>        <span class="hljs-attr">group:</span> <span class="hljs-string">DEFAULT_GROUP</span> <span class="hljs-comment">#默认 DEFAULT_GROUP</span><br>       <span class="hljs-comment">#prefix: nacos-config-a  #表示读哪个配置文件  Data Id</span><br>        <span class="hljs-attr">prefix:</span> <span class="hljs-string">nacos-config</span>  <span class="hljs-comment">#表示读哪个配置文件  Data Id 默认用的是应用的名称</span><br>        <span class="hljs-attr">file-extension:</span> <span class="hljs-string">yml</span> <span class="hljs-comment">#配置文件的类型</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span> <br></code></pre></td></tr></table></figure><h3 id="5-配置文件的划分"><a href="#5-配置文件的划分" class="headerlink" title="5.配置文件的划分"></a>5.配置文件的划分</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230126224758863.png" alt="image-20230126224758863"></p><h4 id="1-新建namespaces-命名空间"><a href="#1-新建namespaces-命名空间" class="headerlink" title="1.新建namespaces(命名空间)"></a>1.新建namespaces(命名空间)</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230126225636189.png" alt="image-20230126225636189"></p><h4 id="2-在当前命名空间下构建配置文件"><a href="#2-在当前命名空间下构建配置文件" class="headerlink" title="2.在当前命名空间下构建配置文件"></a>2.在当前命名空间下构建配置文件</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230126230145753.png" alt="image-20230126230145753"></p><h3 id="6-读取多配置文件"><a href="#6-读取多配置文件" class="headerlink" title="6.读取多配置文件"></a>6.读取多配置文件</h3><blockquote><p>除了通过上面的方式指定一个唯一配置外，我们还可以同时获取多个配置文件的内容。提供这个功能 可以再次封装和抽象配置文件管理</p></blockquote><h4 id="1-新建两个配置文件"><a href="#1-新建两个配置文件" class="headerlink" title="1.新建两个配置文件"></a>1.新建两个配置文件</h4><blockquote><p>一个写一个参数 一个写两个参数</p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230126230455320.png" alt="image-20230126230455320"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230126230523089.png" alt="image-20230126230523089"></p><h4 id="2-读取配置文件规则制定"><a href="#2-读取配置文件规则制定" class="headerlink" title="2.读取配置文件规则制定"></a>2.读取配置文件规则制定</h4><blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230126230703592.png" alt="image-20230126230703592"></p></blockquote><blockquote><p>说明：</p><p>1.spring.cloud.nacos.config.extension-configs[n].dataId ， 指 定 多 个 配 置 的</p><p>dataId，必须包含文件格式，支持 properties、yaml 或 yml；</p><p>2.spring.cloud.nacos.config.extension-configs[n].group，指定分组；</p><p>3.spring.cloud.nacos.config.extension-configs[n].refresh，是否支持刷新。上面的配置中，我们分别从 DEFAULT_GROUP 中获取了 config-a.yml 和 config-b.yml 配置</p><p>内容，并且 config-a.yml 支持刷新，config-b.yml 不支持刷新。</p></blockquote><blockquote><p>注意：</p><p><strong>没有</strong> <strong>namespace</strong> <strong>的配置，言外之意就是</strong> <strong>Nacos</strong> <strong>目前还不支持多个配置指定不同的命名空间。</strong></p></blockquote><h3 id="7-nacos客户端读取共享配置文件"><a href="#7-nacos客户端读取共享配置文件" class="headerlink" title="7.nacos客户端读取共享配置文件"></a>7.nacos客户端读取共享配置文件</h3><blockquote><p>为了方便公共的开发 有一些公共的配置文件</p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230126232608047.png" alt="image-20230126232608047"></p><h3 id="8-Nacos-Config常用的配置"><a href="#8-Nacos-Config常用的配置" class="headerlink" title="8.Nacos Config常用的配置"></a>8.Nacos Config常用的配置</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230126232711002.png" alt="image-20230126232711002"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230126233254665.png" alt="image-20230126233254665"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230126233340857.png" alt="image-20230126233340857"></p>]]></content>
    
    
    <categories>
      
      <category>Java成长之路</category>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springcloud</tag>
      
      <tag>微服务，nacos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day06-01-19-SpringCloud技术-Gateway</title>
    <link href="/2023/01/19/Day06-01-19-SpringCloud%E6%8A%80%E6%9C%AF-GateWay/"/>
    <url>/2023/01/19/Day06-01-19-SpringCloud%E6%8A%80%E6%9C%AF-GateWay/</url>
    
    <content type="html"><![CDATA[<h1 id="Day06-01-19-SpringCloud技术-Gateway"><a href="#Day06-01-19-SpringCloud技术-Gateway" class="headerlink" title="Day06-01-19-SpringCloud技术-Gateway"></a>Day06-01-19-SpringCloud技术-Gateway</h1><h2 id="1-网关概念"><a href="#1-网关概念" class="headerlink" title="1.网关概念"></a>1.网关概念</h2><h3 id="1-什么是网关"><a href="#1-什么是网关" class="headerlink" title="1.什么是网关"></a>1.什么是网关</h3><blockquote><p>网关是<strong>微服务最边缘的服务</strong>，<strong>直接暴露给用户，用来做用户和微服务的桥梁</strong></p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230118203618706.png" alt="image-20230118203618706"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230118203632435.png" alt="image-20230118203632435"></p><h3 id="2-网关的优势"><a href="#2-网关的优势" class="headerlink" title="2.网关的优势"></a>2.网关的优势</h3><blockquote><ol><li><p>没有网关：客户端直接访问我们的微服务，会需要在客户端配置很多的 ip：port，如果user-service 并发比较大，则无法完成负载均衡</p></li><li><p>有网关：客户端访问网关，网关来访问微服务，（网关可以和注册中心整合，通过服务名称找到目标的 ip：prot）这样只需要使用<strong>服务名称即可访问微服务</strong>，可以实现负载均衡，可以实现 token 拦截，权限验证，限流等操作</p></li></ol></blockquote><h2 id="2-SpringCloudGateway"><a href="#2-SpringCloudGateway" class="headerlink" title="2.SpringCloudGateway"></a>2.SpringCloudGateway</h2><blockquote><p><strong>你们项目里面 用的什么网关？</strong> <strong>gateway zuul</strong></p><p>它是 Spring Cloud <strong>官方</strong>提供的用来取代 <strong>zuul（</strong>netflix）**的新一代网关组件</p><p>（</p><p>zuul：1.0 , 2.0 ，zuul 的本质，<strong>一组过滤器，根据自定义的过滤器顺序来执行，本质就是</strong></p><p><strong>web</strong> <strong>组件</strong> <strong>web</strong> <strong>三大组件（监听器 过滤器</strong> <strong>servlet****）</strong> </p><p><strong>拦截</strong> <strong>springmvc</strong>）</p><p>Zuul1.0 使用的是 BIO（</p><p>Blocking IO） tomcat7.0 以前都是 BIO 性能一般</p><p>Zuul2.0 性能好 NIO</p><p>AIO 异步非阻塞 io </p><p>a+nio &#x3D; aio &#x3D; async + no blocking io</p><p>它基于 spring5.x，springboot2.x 和 ProjectReactor 等技术。</p><p>它的目地是让<strong>路由更加简单，灵活，还提供了一些强大的过滤器功能</strong>，例如：熔断、限流、重</p><p>试,自义定过滤器等 token 校验 ip 黑名单等</p><p>SpringCloud Gateway作为Spring Cloud生态的网关，目标是替代Zuul，在SpringCloud2.0以上的版本中，没有对新版本的 zuul2.0 以上的最新高性能版本进行集成，仍然还是使用的zuul1.x[可以看项目依赖找到]非 Reactor 模式的老版本。而为了提升网关的性能，SpringCloud Gateway 是基于 webFlux 框架实现的，而 webFlux 框架底层则使用了高性能的 Reactor 模式通信框架的 Netty NIO(非阻塞式 io) BIO 你只需要了解网关能做什么？ 网关里面写什么代码 就可以了</p></blockquote><h2 id="3-SpringCloudGateway工作流程"><a href="#3-SpringCloudGateway工作流程" class="headerlink" title="3.SpringCloudGateway工作流程"></a>3.SpringCloudGateway工作流程</h2><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230118213651283.png" alt="image-20230118213651283"></p><blockquote><p>客户端向 springcloud Gateway 发出请求，然后在 Gateway Handler Mapping 中找到与请求相匹配的路由，将其发送到 Gateway Web Handler。Handler 再通过指定的过滤器来将请求发送到我们实际的服务的业务逻辑，然后返回。 过滤器之间用虚线分开是因为过滤器可能会在发送爱丽请求之前【pre】或之后【post】执行业务逻辑，对其进行加强或处理。Filter 在 【pre】 类型的过滤器可以做参数校验、权限校验、流量监控、日志输出、协议转等在【post】 类型的过滤器中可以做响应内容、响应头的修改、日志的输出，流量监控等有着非常重要的作用</p></blockquote><blockquote><p><strong>总结：Gateway 的核心逻辑也就是 路由转发 + 执行过滤器链</strong></p></blockquote><h2 id="4-SpringCloudGateway三大核心概念"><a href="#4-SpringCloudGateway三大核心概念" class="headerlink" title="4.SpringCloudGateway三大核心概念"></a>4.SpringCloudGateway三大核心概念</h2><h3 id="1-Route-路由-（重点和eureka结合做动态路由）"><a href="#1-Route-路由-（重点和eureka结合做动态路由）" class="headerlink" title="1.Route(路由)（重点和eureka结合做动态路由）"></a>1.Route(路由)（重点和eureka结合做动态路由）</h3><blockquote><p><strong>路由信息的组成：</strong></p><p><strong>由一个 ID、一个目的 URL、一组断言工厂、一组 Filter 组成。</strong></p><p><strong>如果路由断言为真，说明请求 URL 和配置路由匹</strong></p></blockquote><h3 id="2-Predicate-断言"><a href="#2-Predicate-断言" class="headerlink" title="2.Predicate(断言)"></a>2.Predicate(断言)</h3><blockquote><p><strong>就是一个返回</strong> <strong>bool</strong> <strong>的表达式</strong></p><p><strong>Java 8 中的断言函数。</strong> <strong>lambda</strong> <strong>四大接口 供给形，消费性，函数型，断言型</strong></p><p><strong>Spring Cloud Gateway 中 的 断 言 函 数 输 入 类 型 是 Spring 5.0 框 架 中 的</strong></p><p>ServerWebExchange。Spring Cloud Gateway 的断言函数允许开发者去定义匹配来自于Http Request 中的任何信息比如请求头和参数</p></blockquote><h3 id="3-Filter-过滤"><a href="#3-Filter-过滤" class="headerlink" title="3.Filter(过滤)"></a>3.Filter(过滤)</h3><blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230118215404174.png" alt="image-20230118215404174"></p></blockquote><h2 id="5-Nginx和Gateway的区别"><a href="#5-Nginx和Gateway的区别" class="headerlink" title="5.Nginx和Gateway的区别"></a>5.Nginx和Gateway的区别</h2><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230118215551339.png" alt="image-20230118215551339"></p><blockquote><p>1.Nginx 在做路由，负载均衡，限流之前，都有修改 nginx.conf 的配置文件，把需要负载均衡，路由，限流的规则加在里面。Eg:使用 nginx 做 tomcat 的负载均衡</p><p>2.但是 gateway 不同，gateway <strong>自动的负载均衡和路由</strong>，gateway 和 eureka 高度集成，实现自动的路由，和 Ribbon 结合，实现了负载均衡（lb），gateway 也能轻易的实现限流和权限验证。</p><p>Nginx（c）比 gateway（java）的性能高一点。</p><p>本质的区别呢？</p><p>Nginx (更大 服务器级别的)</p><p>Gateway （项目级别的）</p></blockquote><h2 id="6-Gateway快速入门"><a href="#6-Gateway快速入门" class="headerlink" title="6.Gateway快速入门"></a>6.Gateway快速入门</h2><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230118230542259.png" alt="image-20230118230542259"></p><h3 id="1-构建login-service"><a href="#1-构建login-service" class="headerlink" title="1.构建login-service"></a>1.构建login-service</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230118230759899.png" alt="image-20230118230759899"></p><h4 id="2-修改配置文件-xml"><a href="#2-修改配置文件-xml" class="headerlink" title="2.修改配置文件(xml)"></a>2.修改配置文件(xml)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;parent&gt;<br>       &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>       &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;<br>       &lt;version&gt;2.3.12.RELEASE&lt;/version&gt;<br>       &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;<br>   &lt;/parent&gt;<br></code></pre></td></tr></table></figure><h4 id="3-修改配置文件-yml"><a href="#3-修改配置文件-yml" class="headerlink" title="3.修改配置文件(yml)"></a>3.修改配置文件(yml)</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">login-service</span><br></code></pre></td></tr></table></figure><h4 id="4-构建接口"><a href="#4-构建接口" class="headerlink" title="4.构建接口"></a>4.构建接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/doLogin&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">doLogin</span><span class="hljs-params">(String name, String password)</span> &#123;<br>        System.out.println(name);<br>        System.out.println(password);<br>        <span class="hljs-comment">//    token</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">toString</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br>        <span class="hljs-keyword">return</span> toString;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-构建getway-service"><a href="#2-构建getway-service" class="headerlink" title="2.构建getway-service"></a>2.构建getway-service</h3><h4 id="1-构建项目"><a href="#1-构建项目" class="headerlink" title="1.构建项目"></a>1.构建项目</h4><blockquote><p>这里不要使用web 因为getway是neety服务器 而web是tomcat服务器</p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230118231849868.png" alt="image-20230118231849868"></p><h4 id="2-修改依赖"><a href="#2-修改依赖" class="headerlink" title="2.修改依赖"></a>2.修改依赖</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;parent&gt;<br>     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>     &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;<br>     &lt;version&gt;2.3.12.RELEASE&lt;/version&gt;<br>     &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;<br> &lt;/parent&gt;<br>&lt;properties&gt;<br>     &lt;java.version&gt;1.8&lt;/java.version&gt;<br>     &lt;spring-cloud.version&gt;Hoxton.SR12&lt;/spring-cloud.version&gt;<br> &lt;/properties&gt;<br></code></pre></td></tr></table></figure><h4 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3.修改配置文件"></a>3.修改配置文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span> <span class="hljs-comment">#一般网关的路由都是80</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">getway-service</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#默认开启</span><br>      <span class="hljs-attr">routes:</span> <span class="hljs-comment">#设置路由，注意是数组，可以设置多个，按照 id 做隔离</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">login-service-router</span>  <span class="hljs-comment">#路由 id，没有要求，保持唯一即可</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">http://localhost:8081</span> <span class="hljs-comment">#uri 设置真正的服务 ip:port</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/doLogin</span> <span class="hljs-comment">#断言匹配 #和服务中的路径匹配,是正则匹配的模式 只要你Path匹配上了/doLogin就往uri转发并且将路径带上 访问地址就会变为 http://localhost:8081/doLogin</span><br><br></code></pre></td></tr></table></figure><h4 id="4-实验测试"><a href="#4-实验测试" class="headerlink" title="4.实验测试"></a>4.实验测试</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230118233638587.png" alt="image-20230118233638587"></p><h2 id="7-Gateway集群"><a href="#7-Gateway集群" class="headerlink" title="7.Gateway集群"></a>7.Gateway集群</h2><h3 id="1-创建两个gateway"><a href="#1-创建两个gateway" class="headerlink" title="1.创建两个gateway"></a>1.创建两个gateway</h3><blockquote><p>端口分别为80和81</p></blockquote><h3 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2.修改配置文件"></a>2.修改配置文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">81</span> <span class="hljs-comment">#一般网关的路由都是80</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">getway-service</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#默认开启</span><br>      <span class="hljs-attr">routes:</span> <span class="hljs-comment">#设置路由，注意是数组，可以设置多个，按照 id 做隔离</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">login-service-router</span>  <span class="hljs-comment">#路由 id，没有要求，保持唯一即可</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">http://localhost:8081</span> <span class="hljs-comment">#uri 设置真正的服务 ip:port</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/doLogin</span> <span class="hljs-comment">#断言匹配 #和服务中的路径匹配,是正则匹配的模式 只要你Path匹配上了/doLogin就往uri转发并且将路径带上 访问地址就会变为 http://localhost:8081/doLogin</span><br><br><br></code></pre></td></tr></table></figure><h3 id="3-修改Nginx配置文件"><a href="#3-修改Nginx配置文件" class="headerlink" title="3.修改Nginx配置文件"></a>3.修改Nginx配置文件</h3><blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230119110537928.png" alt="image-20230119110537928"></p></blockquote><h2 id="8-Gateway的两种路由配置方式"><a href="#8-Gateway的两种路由配置方式" class="headerlink" title="8.Gateway的两种路由配置方式"></a>8.Gateway的两种路由配置方式</h2><h3 id="1-代码路由方式"><a href="#1-代码路由方式" class="headerlink" title="1.代码路由方式"></a>1.代码路由方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 路由配置文件</span><br><span class="hljs-comment">     * 配置文件依然可使用 yml文件不冲突</span><br><span class="hljs-comment">     * @author RenBoQing</span><br><span class="hljs-comment">     * @date 2023/1/19 0019 11:23</span><br><span class="hljs-comment">     * @param builder</span><br><span class="hljs-comment">     * @return org.springframework.cloud.gateway.route.RouteLocator</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RouteLocator <span class="hljs-title function_">customRouteLocator</span><span class="hljs-params">(RouteLocatorBuilder builder)</span> &#123;<br>        <span class="hljs-keyword">return</span> builder.routes()<br>                <span class="hljs-comment">//当uri请求的地址后面有前面对应的地址 namegetway不会做拼接</span><br>                .route(<span class="hljs-string">&quot;path_guochuang&quot;</span>, r -&gt; r.path(<span class="hljs-string">&quot;/guochuang&quot;</span>).uri(<span class="hljs-string">&quot;https://www.bilibili.com&quot;</span>))<br>                .route(<span class="hljs-string">&quot;path_anime&quot;</span>, r -&gt; r.path(<span class="hljs-string">&quot;/anime&quot;</span>).uri(<span class="hljs-string">&quot;https://www.bilibili.com&quot;</span>))<br>                .route(<span class="hljs-string">&quot;path_variety&quot;</span>, r -&gt; r.path(<span class="hljs-string">&quot;/variety&quot;</span>).uri(<span class="hljs-string">&quot;https://www.bilibili.com&quot;</span>))<br>                .route(<span class="hljs-string">&quot;path_life&quot;</span>, r -&gt; r.path(<span class="hljs-string">&quot;/v/life&quot;</span>).uri(<span class="hljs-string">&quot;https://www.bilibili.com&quot;</span>))<br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-yaml配置文件"><a href="#2-yaml配置文件" class="headerlink" title="2.yaml配置文件"></a>2.yaml配置文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">cloud:</span><br>   <span class="hljs-attr">gateway:</span><br>     <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#默认开启</span><br>     <span class="hljs-attr">routes:</span> <span class="hljs-comment">#设置路由，注意是数组，可以设置多个，按照 id 做隔离</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">login-service-router</span>  <span class="hljs-comment">#路由 id，没有要求，保持唯一即可</span><br>         <span class="hljs-attr">uri:</span> <span class="hljs-string">http://localhost:8081</span> <span class="hljs-comment">#uri 设置真正的服务 ip:port</span><br>         <span class="hljs-attr">predicates:</span><br>           <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/doLogin</span> <span class="hljs-comment">#断言匹配 #和服务中的路径匹配,是正则匹配的模式 只要你Path匹配上了/doLogin就往uri转发并且将路径带上 访问地址就会变为 http://localhost:8081/doLogin</span><br></code></pre></td></tr></table></figure><h2 id="9-Gateway微服务动态路由负载均衡-与eureka结合"><a href="#9-Gateway微服务动态路由负载均衡-与eureka结合" class="headerlink" title="9.Gateway微服务动态路由负载均衡(与eureka结合)"></a>9.Gateway微服务动态路由负载均衡(与eureka结合)</h2><blockquote><p>从之前的配置里面我们可以看到我们的 URL 都是写死的，这不符合我们微服务的要求，我们</p><p>微服务是只要知道服务的名字，根据名字去找，而直接写死就没有负载均衡的效果了</p><p>默认情况下 <strong>Gateway 会根据注册中心的服务列表，以注册中心上微服务名为路径创建动态路</strong></p><p>由进行转发，从而实现动态路由的功能需要注意的是 uri 的协议为 lb（<strong>load Balance****），表示启用 Gateway 的负载均衡功能。</strong></p><p><strong>lb:&#x2F;&#x2F;serviceName 是 spring cloud gateway 在微服务中自动为我们创建的负载均衡 uri</strong></p><p>协议：就是双方约定的一个接头暗号http：&#x2F;&#x2F;</p></blockquote><h3 id="1-将getway向eureka中注册"><a href="#1-将getway向eureka中注册" class="headerlink" title="1.将getway向eureka中注册"></a>1.将getway向eureka中注册</h3><h4 id="1-导入eureka客户端依赖"><a href="#1-导入eureka客户端依赖" class="headerlink" title="1.导入eureka客户端依赖"></a>1.导入eureka客户端依赖</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"> &lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">2.2</span><span class="hljs-number">.3</span>.RELEASE&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h4 id="2-修改配置文件-更改注解"><a href="#2-修改配置文件-更改注解" class="headerlink" title="2.修改配置文件(更改注解)"></a>2.修改配置文件(更改注解)</h4><blockquote><p>@EnableEurekaClient</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span> <span class="hljs-comment">#一般网关的路由都是80</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">getway-service</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#默认开启</span><br>      <span class="hljs-attr">routes:</span> <span class="hljs-comment">#设置路由，注意是数组，可以设置多个，按照 id 做隔离</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">login-service-router</span>  <span class="hljs-comment">#路由 id，没有要求，保持唯一即可</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">http://localhost:8081</span> <span class="hljs-comment">#uri 设置真正的服务 ip:port</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/doLogin</span> <span class="hljs-comment">#断言匹配 #和服务中的路径匹配,是正则匹配的模式 只要你Path匹配上了/doLogin就往uri转发并且将路径带上 访问地址就会变为 http://localhost:8081/doLogin</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">locator:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#开启动态路由  开启通过业务名称找到服务的名称</span><br>          <span class="hljs-attr">lower-case-service-id:</span>  <span class="hljs-literal">true</span> <span class="hljs-comment">#开启服务名称小写</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:8761/eureka</span><br>    <span class="hljs-attr">registry-fetch-interval-seconds:</span> <span class="hljs-number">3</span> <span class="hljs-comment">#网关拉取服务的列表</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="2-将login-service向eureka中注册"><a href="#2-将login-service向eureka中注册" class="headerlink" title="2.将login-service向eureka中注册"></a>2.将login-service向eureka中注册</h3><h4 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1.添加依赖"></a>1.添加依赖</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">       &lt;dependency&gt;<br>           &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>           &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;<br>           &lt;version&gt;2.2.3.RELEASE&lt;/version&gt;<br>       &lt;/dependency&gt;<br>  &lt;spring-cloud.version&gt;Hoxton.SR12&lt;/spring-cloud.version&gt;<br>&lt;dependencyManagement&gt;<br>       &lt;dependencies&gt;<br>           &lt;dependency&gt;<br>               &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>               &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;<br>               &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;<br>               &lt;type&gt;pom&lt;/type&gt;<br>               &lt;scope&gt;import&lt;/scope&gt;<br>           &lt;/dependency&gt;<br>       &lt;/dependencies&gt;<br>   &lt;/dependencyManagement&gt;<br></code></pre></td></tr></table></figure><h4 id="2-修改配置文件-更改注解-1"><a href="#2-修改配置文件-更改注解-1" class="headerlink" title="2.修改配置文件(更改注解)"></a>2.修改配置文件(更改注解)</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">login-service</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:8761/eureka</span><br>    <span class="hljs-attr">registry-fetch-interval-seconds:</span> <span class="hljs-number">3</span> <span class="hljs-comment">#网关拉取服务的列表</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h4 id="3-请求访问"><a href="#3-请求访问" class="headerlink" title="3.请求访问"></a>3.请求访问</h4><blockquote><p><a href="http://localhost/login-service/doLogin">http://localhost/login-service/doLogin</a></p><p>这里访问的使用只需要在端口号后面进行加上对应的业务名称(application.name)然后对应的接口 gateway会自动帮我们做负载均衡 当login-service下面有两个端口 8080和8081时 会自动做负载均衡</p></blockquote><h4 id="4-在routers里面配置动态路由"><a href="#4-在routers里面配置动态路由" class="headerlink" title="4.在routers里面配置动态路由"></a>4.在routers里面配置动态路由</h4><blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230120175900444.png" alt="image-20230120175900444"></p></blockquote><h2 id="10-Predicate断言工厂的使用"><a href="#10-Predicate断言工厂的使用" class="headerlink" title="10.Predicate断言工厂的使用"></a>10.Predicate断言工厂的使用</h2><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230120211800157.png" alt="image-20230120211800157"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230120211816668.png" alt="image-20230120211816668"></p><h3 id="2-断言的使用"><a href="#2-断言的使用" class="headerlink" title="2.断言的使用"></a>2.断言的使用</h3><blockquote><p>使用yaml配置文件进行配置  这个是对具体的某一个router进行设置</p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230120213500220.png" alt="image-20230120213500220"></p><h3 id="3-访问权重"><a href="#3-访问权重" class="headerlink" title="3.访问权重"></a>3.访问权重</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230120213536306.png" alt="image-20230120213536306"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230120213544073.png" alt="image-20230120213544073"></p><h3 id="4-断言小结"><a href="#4-断言小结" class="headerlink" title="4.断言小结"></a>4.断言小结</h3><blockquote><p><strong>Predicate</strong> <strong>就是为了实现一组匹配规则，让请求过来找到对应的</strong> <strong>Route</strong> <strong>进行处理</strong></p></blockquote><h2 id="11-Filter过滤器工厂"><a href="#11-Filter过滤器工厂" class="headerlink" title="11.Filter过滤器工厂"></a>11.Filter过滤器工厂</h2><h3 id="1-基本概述"><a href="#1-基本概述" class="headerlink" title="1.基本概述"></a>1.基本概述</h3><blockquote><p>gateway 里面的过滤器和 Servlet 里面的过滤器，功能差不多，路由过滤器可以用于修改进入Http 请求和返回 Http 响应</p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230123112622579.png" alt="image-20230123112622579"></p><h3 id="2-Filter分类"><a href="#2-Filter分类" class="headerlink" title="2.Filter分类"></a>2.Filter分类</h3><h4 id="1-按生命周期分"><a href="#1-按生命周期分" class="headerlink" title="1.按生命周期分"></a>1.按生命周期分</h4><blockquote><p><strong>pre 在业务逻辑之前</strong></p><p><strong>post 在业务逻辑之后</strong></p></blockquote><h4 id="2-种类分"><a href="#2-种类分" class="headerlink" title="2.种类分"></a>2.种类分</h4><blockquote><p><strong>GatewayFilter 需要配置某个路由，才能过滤。如果需要使用全局路由，需要配置 Default</strong>Filter</p><p><strong>GlobalFilter</strong> </p><p><strong>全局过滤器，不需要配置路由，系统初始化作用到所有路由上</strong></p><p>全局过滤器 统计请求次数 限流 token 的校验 ip 黑名单拦截 跨域本质(filter)144 开头的电话 限制一些 ip 的访问</p></blockquote><h3 id="3-过滤器实践"><a href="#3-过滤器实践" class="headerlink" title="3.过滤器实践"></a>3.过滤器实践</h3><h4 id="1-单一过滤器"><a href="#1-单一过滤器" class="headerlink" title="1.单一过滤器"></a>1.单一过滤器</h4><blockquote><p><a href="https://docs.spring.io/spring-cloud-gateway/docs/2.2.5.RELEASE/reference/html/#gatewayfilter-factories">https://docs.spring.io/spring-cloud-gateway/docs/2.2.5.RELEASE/reference/html/#gatewayfilter-factories</a></p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230123113359189.png" alt="image-20230123113359189"></p><h4 id="2-全局过滤器"><a href="#2-全局过滤器" class="headerlink" title="2.全局过滤器"></a>2.全局过滤器</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230123113429758.png" alt="image-20230123113429758"></p><h3 id="4-自定义过滤器-重点"><a href="#4-自定义过滤器-重点" class="headerlink" title="4.自定义过滤器(重点)"></a>4.自定义过滤器(重点)</h3><blockquote><p>全局过滤器的优点的初始化时默认挂到所有路由上，我们可以使用它来完成IP过滤，限流等功能</p></blockquote><h4 id="1-自定义全局过滤器"><a href="#1-自定义全局过滤器" class="headerlink" title="1.自定义全局过滤器"></a>1.自定义全局过滤器</h4><h5 id="1-编写配置文件-MyGlobalFilter"><a href="#1-编写配置文件-MyGlobalFilter" class="headerlink" title="1.编写配置文件(MyGlobalFilter)"></a>1.编写配置文件(MyGlobalFilter)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> RenBoQing</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023年01月23日 11:41</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyGlobalFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">GlobalFilter</span>, Ordered &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     *自定义全局过滤器</span><br><span class="hljs-comment">     * @author RenBoQing</span><br><span class="hljs-comment">     * @date 2023/1/23 0023 11:59</span><br><span class="hljs-comment">     * @param exchange</span><br><span class="hljs-comment">     * @param chain</span><br><span class="hljs-comment">     * @return reactor.core.publisher.Mono&lt;java.lang.Void&gt;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title function_">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;<br>        <span class="hljs-comment">//使用链式原则  每一个过滤器只用干一件事  exchange里面封装了很多的参数和响应信息</span><br>        <span class="hljs-comment">//获取请求信息</span><br>        <span class="hljs-type">ServerHttpRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> exchange.getRequest();<br>        <span class="hljs-comment">//ServerHttpRequest是WebFlux里面的</span><br>        <span class="hljs-comment">//HttpServlet是web里面的</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> request.getURI().getPath();<br>        System.out.println(path);<br>        <span class="hljs-type">HttpHeaders</span> <span class="hljs-variable">headers</span> <span class="hljs-operator">=</span> request.getHeaders();<br>        System.out.println(headers);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> request.getMethod().name();<br>        System.out.println(name);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">hostName</span> <span class="hljs-operator">=</span> request.getRemoteAddress().getHostName();<br>        System.out.println(hostName);<br>        <span class="hljs-comment">// 获取响应信息</span><br>        <span class="hljs-type">ServerHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> exchange.getResponse();<br>        <span class="hljs-comment">//拦截信息</span><br>        <span class="hljs-comment">//使用微服务 必然是前后端分离 前后端的响应的接口就是json</span><br>        <span class="hljs-comment">//1.设置编码  在响应头里面</span><br>        response.getHeaders().set(<span class="hljs-string">&quot;content-type&quot;</span>, <span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>);<br>        <span class="hljs-comment">//组装业务返回值</span><br>        HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">4</span>);<br>        map.put(<span class="hljs-string">&quot;code&quot;</span>, HttpStatus.UNAUTHORIZED.value());<br>        map.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;未授权&quot;</span>);<br>        <span class="hljs-comment">//转化为json</span><br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        <span class="hljs-comment">//map转为字节</span><br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">try</span> &#123;<br>            bytes = objectMapper.writeValueAsBytes(map);<br>        &#125; <span class="hljs-keyword">catch</span> (JsonProcessingException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-comment">//包装数据包</span><br>        <span class="hljs-type">DataBuffer</span> <span class="hljs-variable">wrap</span> <span class="hljs-operator">=</span> response.bufferFactory().wrap(bytes);<br>        <span class="hljs-comment">//放行到下一个过滤器  return chain.filter(exchange);</span><br>        <span class="hljs-comment">//    返回未授权的对应的信息</span><br>       <span class="hljs-keyword">return</span> response.writeWith(Mono.just(wrap));<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     *过滤器器的执行顺序  当前过滤器优先级</span><br><span class="hljs-comment">     * @author RenBoQing</span><br><span class="hljs-comment">     * @date 2023/1/23 0023 12:32</span><br><span class="hljs-comment">     * @return int</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-启动测试"><a href="#2-启动测试" class="headerlink" title="2.启动测试"></a>2.启动测试</h5><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230123125440235.png" alt="image-20230123125440235"></p><h4 id="2-自定义IP过滤器"><a href="#2-自定义IP过滤器" class="headerlink" title="2.自定义IP过滤器"></a>2.自定义IP过滤器</h4><h5 id="1-编写全局配置文件"><a href="#1-编写全局配置文件" class="headerlink" title="1.编写全局配置文件"></a>1.编写全局配置文件</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.powernode.getwayservice.filter;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;<br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;<br><span class="hljs-keyword">import</span> org.springframework.core.Ordered;<br><span class="hljs-keyword">import</span> org.springframework.core.io.buffer.DataBuffer;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpStatus;<br><span class="hljs-keyword">import</span> org.springframework.http.server.reactive.ServerHttpRequest;<br><span class="hljs-keyword">import</span> org.springframework.http.server.reactive.ServerHttpResponse;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.server.ServerWebExchange;<br><span class="hljs-keyword">import</span> reactor.core.publisher.Mono;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> RenBoQing</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023年01月23日 20:03</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IPChickFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">GlobalFilter</span>, Ordered &#123;<br><br>    <span class="hljs-comment">//定义数据库中的黑名单  一般使用redis或者使用本地存储</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> List&lt;String&gt; BLACK_LIST = Arrays.asList(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-string">&quot;144.155.23.16&quot;</span>);<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     *自定义IP过滤器</span><br><span class="hljs-comment">     * @author RenBoQing</span><br><span class="hljs-comment">     * @date 2023/1/23 0023 20:04</span><br><span class="hljs-comment">     * @param exchange</span><br><span class="hljs-comment">     * @param chain</span><br><span class="hljs-comment">     * @return reactor.core.publisher.Mono&lt;java.lang.Void&gt;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title function_">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;<br>        <span class="hljs-type">ServerHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> exchange.getResponse();<br>        <span class="hljs-type">ServerHttpRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> exchange.getRequest();<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">ip</span> <span class="hljs-operator">=</span> request.getHeaders().getHost().getHostString();<br>        <span class="hljs-keyword">if</span> (!BLACK_LIST.contains(ip)) &#123;<br>            <span class="hljs-keyword">return</span> chain.filter(exchange);<br>        &#125; <span class="hljs-keyword">else</span><br>            response.getHeaders().set(<span class="hljs-string">&quot;content-type&quot;</span>, <span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>);<br>        <span class="hljs-comment">//组装业务返回值</span><br>        HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">4</span>);<br>        map.put(<span class="hljs-string">&quot;code&quot;</span>, HttpStatus.UNAUTHORIZED.value());<br>        map.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;你是黑名单&quot;</span>);<br>        <span class="hljs-comment">//转化为json</span><br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        <span class="hljs-comment">//map转为字节</span><br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">try</span> &#123;<br>            bytes = objectMapper.writeValueAsBytes(map);<br>        &#125; <span class="hljs-keyword">catch</span> (JsonProcessingException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-comment">//包装数据包</span><br>        <span class="hljs-type">DataBuffer</span> <span class="hljs-variable">wrap</span> <span class="hljs-operator">=</span> response.bufferFactory().wrap(bytes);<br>        <span class="hljs-comment">//放行到下一个过滤器  return chain.filter(exchange);</span><br>        <span class="hljs-comment">//    返回未授权的对应的信息</span><br>        <span class="hljs-keyword">return</span> response.writeWith(Mono.just(wrap));<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     *filter的级别和执行顺序</span><br><span class="hljs-comment">     * @author RenBoQing</span><br><span class="hljs-comment">     * @date 2023/1/23 0023 20:10</span><br><span class="hljs-comment">     * @return int</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-启动测试-1"><a href="#2-启动测试-1" class="headerlink" title="2.启动测试"></a>2.启动测试</h5><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230123211913079.png" alt="image-20230123211913079"></p><h2 id="12-网关全局过滤做token校验"><a href="#12-网关全局过滤做token校验" class="headerlink" title="12.网关全局过滤做token校验"></a>12.网关全局过滤做token校验</h2><h3 id="1-调用图解"><a href="#1-调用图解" class="headerlink" title="1.调用图解"></a>1.调用图解</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230123214717053.png" alt="image-20230123214717053"></p><h3 id="2-引入Redis依赖-login-service"><a href="#2-引入Redis依赖-login-service" class="headerlink" title="2.引入Redis依赖(login-service)"></a>2.引入Redis依赖(login-service)</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-模仿实体类-login-service"><a href="#3-模仿实体类-login-service" class="headerlink" title="3.模仿实体类(login-service)"></a>3.模仿实体类(login-service)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String pwd;<br>    <span class="hljs-keyword">private</span> Integer age;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-编写业务接口-login-service"><a href="#4-编写业务接口-login-service" class="headerlink" title="4.编写业务接口(login-service)"></a>4.编写业务接口(login-service)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate redisTemplate;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/doLogin&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">doLogin</span><span class="hljs-params">(String name, String pwd)</span> &#123;<br>        System.out.println(name);<br>        System.out.println(pwd);<br>        <span class="hljs-comment">//假设查询到用户 并做了登录</span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1</span>, name, pwd, <span class="hljs-number">18</span>);<br>        <span class="hljs-comment">//    token</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br>        <span class="hljs-comment">//存起来  Duration.ofSeconds 是过期时间</span><br>        redisTemplate.opsForValue().set(token, user.toString(), Duration.ofSeconds(<span class="hljs-number">7200</span>));<br>        <span class="hljs-keyword">return</span> token;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-编写getaway配置"><a href="#5-编写getaway配置" class="headerlink" title="5.编写getaway配置"></a>5.编写getaway配置</h3><h4 id="1-引入redis依赖并自定义依赖"><a href="#1-引入redis依赖并自定义依赖" class="headerlink" title="1.引入redis依赖并自定义依赖"></a>1.引入redis依赖并自定义依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-自定义过滤器"><a href="#2-自定义过滤器" class="headerlink" title="2.自定义过滤器"></a>2.自定义过滤器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.powernode.getwayservice.filter;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;<br><span class="hljs-keyword">import</span> org.checkerframework.checker.units.qual.A;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;<br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GlobalFilter;<br><span class="hljs-keyword">import</span> org.springframework.core.Ordered;<br><span class="hljs-keyword">import</span> org.springframework.core.io.buffer.DataBuffer;<br><span class="hljs-keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpHeaders;<br><span class="hljs-keyword">import</span> org.springframework.http.HttpStatus;<br><span class="hljs-keyword">import</span> org.springframework.http.server.reactive.ServerHttpRequest;<br><span class="hljs-keyword">import</span> org.springframework.http.server.reactive.ServerHttpResponse;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.util.CollectionUtils;<br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.web.server.ServerWebExchange;<br><span class="hljs-keyword">import</span> reactor.core.publisher.Mono;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> RenBoQing</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023年01月23日 22:57</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">   基本思路理解</span><br><span class="hljs-comment">   1.和前端約定好 一般放在请求头里面 key为Authorization value为bearer token</span><br><span class="hljs-comment">   2.拿到请求的url</span><br><span class="hljs-comment">   3.判断放行</span><br><span class="hljs-comment">   4.拿到请求头</span><br><span class="hljs-comment">   5.拿到token</span><br><span class="hljs-comment">   6.校验</span><br><span class="hljs-comment">   7.方行/拦截</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TokenCheckFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">GlobalFilter</span>, Ordered &#123;<br>    <span class="hljs-comment">//放行的路径</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> List&lt;String&gt; ALLOW_URL = Arrays.asList(<span class="hljs-string">&quot;/login-service/doLogin&quot;</span>, <span class="hljs-string">&quot;/myUrl&quot;</span>);<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> StringRedisTemplate redisTemplate;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     *自定义拦截器</span><br><span class="hljs-comment">     * @author RenBoQing</span><br><span class="hljs-comment">     * @date 2023/1/23 0023 23:05</span><br><span class="hljs-comment">     * @param exchange</span><br><span class="hljs-comment">     * @param chain</span><br><span class="hljs-comment">     * @return reactor.core.publisher.Mono&lt;java.lang.Void&gt;</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title function_">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;<br>        <span class="hljs-type">ServerHttpResponse</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> exchange.getResponse();<br>        <span class="hljs-type">ServerHttpRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> exchange.getRequest();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> request.getURI().getPath();<br>        <span class="hljs-keyword">if</span> (ALLOW_URL.contains(path)) &#123;<br>            <span class="hljs-keyword">return</span> chain.filter(exchange);<br>        &#125;<br>        <span class="hljs-comment">//    检查</span><br>        <span class="hljs-type">HttpHeaders</span> <span class="hljs-variable">headers</span> <span class="hljs-operator">=</span> request.getHeaders();<br>        <span class="hljs-comment">//获取请求的信息</span><br>        List&lt;String&gt; authorization = headers.get(<span class="hljs-string">&quot;Authorization&quot;</span>);<br>        <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(authorization)) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> authorization.get(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">if</span> (StringUtils.hasText(token)) &#123;<br>                <span class="hljs-comment">//约定有bearer token 去掉空格</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">replaceToken</span> <span class="hljs-operator">=</span> token.replaceFirst(<span class="hljs-string">&quot;bearer &quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>                <span class="hljs-keyword">if</span> (StringUtils.hasText(replaceToken) &amp;&amp; redisTemplate.hasKey(token)) &#123;<br>                    <span class="hljs-keyword">return</span> chain.filter(exchange);<br>                &#125;<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-comment">//拦截响应</span><br>        response.getHeaders().set(<span class="hljs-string">&quot;content-type&quot;</span>, <span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>);<br>        <span class="hljs-comment">//组装业务返回值</span><br>        HashMap&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">4</span>);<br>        map.put(<span class="hljs-string">&quot;code&quot;</span>, HttpStatus.UNAUTHORIZED.value());<br>        map.put(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;好兄弟 你没有授权&quot;</span>);<br>        <span class="hljs-comment">//转化为json</span><br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        <span class="hljs-comment">//map转为字节</span><br>        <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">try</span> &#123;<br>            bytes = objectMapper.writeValueAsBytes(map);<br>        &#125; <span class="hljs-keyword">catch</span> (JsonProcessingException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-comment">//包装数据包</span><br>        <span class="hljs-type">DataBuffer</span> <span class="hljs-variable">wrap</span> <span class="hljs-operator">=</span> response.bufferFactory().wrap(bytes);<br>        <span class="hljs-comment">//放行到下一个过滤器  return chain.filter(exchange);</span><br>        <span class="hljs-comment">//    返回未授权的对应的信息</span><br>        <span class="hljs-keyword">return</span> response.writeWith(Mono.just(wrap));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-构建teacher-service模块"><a href="#6-构建teacher-service模块" class="headerlink" title="6.构建teacher-service模块"></a>6.构建teacher-service模块</h3><h4 id="1-新建boot项目"><a href="#1-新建boot项目" class="headerlink" title="1.新建boot项目"></a>1.新建boot项目</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230123233755768.png" alt="image-20230123233755768"></p><h4 id="2-修改配置文件-pom"><a href="#2-修改配置文件-pom" class="headerlink" title="2.修改配置文件(pom)"></a>2.修改配置文件(pom)</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.12.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud.version</span>&gt;</span>Hoxton.SR12<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud.version</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-修改配置文件-yaml"><a href="#3-修改配置文件-yaml" class="headerlink" title="3.修改配置文件(yaml)"></a>3.修改配置文件(yaml)</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8082</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">teacher-service</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:8761/eureka</span><br>    <span class="hljs-attr">registry-fetch-interval-seconds:</span> <span class="hljs-number">3</span> <span class="hljs-comment">#网关拉取服务的列表</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h4 id="4-开启注解"><a href="#4-开启注解" class="headerlink" title="4.开启注解"></a>4.开启注解</h4><blockquote><p>@EnableEurekaClient</p></blockquote><h4 id="5-构建接口"><a href="#5-构建接口" class="headerlink" title="5.构建接口"></a>5.构建接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TeacherController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/teach&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">teach</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;老师正在教书育人&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-集成测试"><a href="#6-集成测试" class="headerlink" title="6.集成测试"></a>6.集成测试</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230124000702331.png" alt="image-20230124000702331"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230124000713667.png" alt="image-20230124000713667"></p><h2 id="13-Gateway结合redis实现请求量限流"><a href="#13-Gateway结合redis实现请求量限流" class="headerlink" title="13.Gateway结合redis实现请求量限流"></a>13.Gateway结合redis实现请求量限流</h2><h3 id="1-基本概念-1"><a href="#1-基本概念-1" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><blockquote><p>通俗的说，限流就是<strong>限制一段时间内，用户访问资源的次数</strong>，减轻服务器压力，限流大致分为两种：</p><ol><li><p>IP 限流（5s 内同一个 ip 访问超过 3 次，则限制不让访问，过一段时间才可继续访问）</p></li><li><p>请求量限流（只要在一段时间内(窗口期)，请求次数达到阀值，就直接拒绝后面来的访问了，过一段时间才可以继续访问）（粒度可以细化到一个 api（url），一个服务）</p></li></ol></blockquote><h3 id="2-限流模型"><a href="#2-限流模型" class="headerlink" title="2.限流模型"></a>2.限流模型</h3><blockquote><p>限流模型:漏斗算法 ，令牌桶算法，窗口滑动算法 计数器算法</p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230124203243578.png" alt="image-20230124203243578"></p><blockquote><p>1）、所有的请求在处理之前都需要拿到一个可用的令牌才会被处理；</p><p>2）、根据限流大小，设置按照一定的<strong>速率</strong>往桶里添加令牌；</p><p>3）、<strong>桶设置最大的放置令牌限制</strong>，当桶满时、新添加的令牌就被丢弃或者拒绝；</p><p>4）、请求达到后首先要获取令牌桶中的令牌，拿着令牌才可以进行其他的业务逻辑，处理完业务逻辑之后，将令牌直接删除；</p><p>5）、令牌桶有最低限额，当桶中的令牌达到最低限额的时候，请求处理完之后将不会删除令牌，以此保证足够的限流；</p></blockquote><h3 id="3-限流实战"><a href="#3-限流实战" class="headerlink" title="3.限流实战"></a>3.限流实战</h3><blockquote><p>Spring Cloud Gateway 已经内置了一个 RequestRateLimiterGatewayFilterFactory，我们可以直接使用。</p></blockquote><h4 id="1-引入redis配置文件"><a href="#1-引入redis配置文件" class="headerlink" title="1.引入redis配置文件"></a>1.引入redis配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis-reactive<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-构建访问限制配置类"><a href="#2-构建访问限制配置类" class="headerlink" title="2.构建访问限制配置类"></a>2.构建访问限制配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestLimitConfig</span> &#123;<br><br><br>    <span class="hljs-comment">//  1. 针对某一个接口 ip来限流 /doLogin  每一个ip 10秒智能访问三次</span><br>    <span class="hljs-meta">@Bean</span> <span class="hljs-comment">//bean的名称是方法名称</span><br>    <span class="hljs-keyword">public</span> KeyResolver <span class="hljs-title function_">ipKeyResolver</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> exchange -&gt; Mono.just(exchange.getRequest().getHeaders().getHost().getHostString());<br>    &#125;<br><br><br>    <span class="hljs-comment">//2.针对这个路径来限制 /doLogin  gateway 是api网关</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> KeyResolver <span class="hljs-title function_">apiKeyResolver</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> exchange -&gt; Mono.just(exchange.getRequest().getPath().value());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-添加配置文件-yaml"><a href="#3-添加配置文件-yaml" class="headerlink" title="3.添加配置文件(yaml)"></a>3.添加配置文件(yaml)</h4><blockquote><p><strong>在上面的配置文件，配置了 redis 的信息，并配置了 RequestRateLimiter 的限流过滤器，</strong>该过滤器需要配置三个参数：**</p><p><strong>burstCapacity：令牌桶总容量。</strong></p><p><strong>replenishRate：令牌桶每秒填充平均速率。</strong></p><p><strong>key-resolver：用于限流的键的解析器的 Bean 对象的名字。它使用 SpEL 表达式根据#{@beanName}从 Spring 容器中获取 Bean 对象。</strong></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">80</span> <span class="hljs-comment">#一般网关的路由都是80</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">getway-service</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#默认开启</span><br>      <span class="hljs-attr">routes:</span> <span class="hljs-comment">#设置路由，注意是数组，可以设置多个，按照 id 做隔离</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">login-service-router</span>  <span class="hljs-comment">#路由 id，没有要求，保持唯一即可</span><br><span class="hljs-comment">#          uri: http://localhost:8081 #uri 设置真正的服务 ip:port</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://login-service</span> <span class="hljs-comment">#uri 设置真正的服务 ip:port</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/doLogin</span> <span class="hljs-comment">#断言匹配 #和服务中的路径匹配,是正则匹配的模式 只要你Path匹配上了/doLogin就往uri转发并且将路径带上 访问地址就会变为 http://localhost:8081/doLogin</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">RequestRateLimiter</span> <span class="hljs-comment">#这个是过滤器的名称</span><br>              <span class="hljs-attr">args:</span> <span class="hljs-comment">#这个是过滤器的参数</span><br>                  <span class="hljs-attr">key-resolver:</span> <span class="hljs-string">&#x27;#&#123;@ipKeyResolver&#125;&#x27;</span> <span class="hljs-comment">#通过spel表达式去ioc容器中bean的值</span><br>                  <span class="hljs-attr">redis-rate-limiter.replenishRate:</span> <span class="hljs-number">1</span> <span class="hljs-comment">#生成令牌的速度</span><br>                  <span class="hljs-attr">redis-rate-limiter.burstCapacity:</span> <span class="hljs-number">3</span> <span class="hljs-comment">#桶的容量</span><br>      <span class="hljs-attr">discovery:</span> <span class="hljs-comment">#动态路由访问</span><br>        <span class="hljs-attr">locator:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#开启动态路由  开启通过业务名称找到服务的名称</span><br>          <span class="hljs-attr">lower-case-service-id:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#开启服务名称小写</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:8761/eureka</span><br>    <span class="hljs-attr">registry-fetch-interval-seconds:</span> <span class="hljs-number">3</span> <span class="hljs-comment">#网关拉取服务的列表</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h4 id="4-启动测试"><a href="#4-启动测试" class="headerlink" title="4.启动测试"></a>4.启动测试</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230124222030704.png" alt="image-20230124222030704"></p><h2 id="14-Gateway跨域配置"><a href="#14-Gateway跨域配置" class="headerlink" title="14.Gateway跨域配置"></a>14.Gateway跨域配置</h2><h3 id="1-基本概念-2"><a href="#1-基本概念-2" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><blockquote><p>ajax 同源策略 8080  8081</p><p>因为网关是微服务的边缘 所有的请求都要走网关 跨域的配置只需要写在网关即可</p></blockquote><h3 id="2-构建跨域配置类-配置文件方式"><a href="#2-构建跨域配置类-配置文件方式" class="headerlink" title="2.构建跨域配置类(配置文件方式)"></a>2.构建跨域配置类(配置文件方式)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CorsConfig</span> &#123;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> CorsWebFilter <span class="hljs-title function_">corsFilter</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">CorsConfiguration</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorsConfiguration</span>();<br>config.addAllowedMethod(<span class="hljs-string">&quot;*&quot;</span>);<br>config.addAllowedOrigin(<span class="hljs-string">&quot;*&quot;</span>);<br>config.addAllowedHeader(<span class="hljs-string">&quot;*&quot;</span>);<br><span class="hljs-type">UrlBasedCorsConfigurationSource</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlBasedCorsConfigurationSource</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PathPatternParser</span>());<br>source.registerCorsConfiguration(<span class="hljs-string">&quot;/**&quot;</span>, config);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorsWebFilter</span>(source);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-yaml文件中配置"><a href="#3-yaml文件中配置" class="headerlink" title="3.yaml文件中配置"></a>3.yaml文件中配置</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br><span class="hljs-attr">cloud:</span><br><span class="hljs-attr">gateway:</span><br><span class="hljs-attr">globalcors:</span><br><span class="hljs-attr">corsConfigurations:</span><br><span class="hljs-string">&#x27;[/**]&#x27;</span><span class="hljs-string">:</span> <span class="hljs-string">//</span> <span class="hljs-string">针对哪些路径</span><br><span class="hljs-attr">allowCredentials:</span> <span class="hljs-literal">true</span> <span class="hljs-string">//</span> <span class="hljs-string">这个是可以携带</span> <span class="hljs-string">cookie</span><br><span class="hljs-attr">allowedHeaders:</span> <span class="hljs-string">&#x27;*&#x27;</span><br><span class="hljs-attr">allowedMethods:</span> <span class="hljs-string">&#x27;*&#x27;</span><br><span class="hljs-attr">allowedOrigins:</span> <span class="hljs-string">&#x27;*&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="15-Gateway总结"><a href="#15-Gateway总结" class="headerlink" title="15.Gateway总结"></a>15.Gateway总结</h2><h3 id="1-基本概念-3"><a href="#1-基本概念-3" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><blockquote><ol><li><p>你们网关用的什么 ? Gateway zuul</p></li><li><p>你们网关里面写什么代码？</p></li></ol><p><strong>跨域，路由（动态路由，负载均衡,ip黑名单拦截,Token的校验，对请求进行过滤（请求参数校验） 对响应做处理（状态码，响应头） 熔断 限流微服务的网关，可以很好地将具体的服务和浏览器隔离开，只暴露网关的地址给到浏览器在微服务网关中，可以很好的实现校验认证，负载均衡（lb），黑名单拦截，限流等</strong></p></blockquote><h3 id="2-Gateway和zuul的区别"><a href="#2-Gateway和zuul的区别" class="headerlink" title="2.Gateway和zuul的区别"></a>2.Gateway和zuul的区别</h3><blockquote><p><strong>Zuul 也是 web 网关，本质上就是一组过滤器，按照定义的顺序，来执行过滤操作</strong></p><p><strong>二者的区别：</strong></p><ol><li><p>两者均是 web 网关，处理的是 http 请求</p></li><li><p>Gateway 是 springcloud 官方的组件，zuul 则是 netflix 的产品springcloud netflix alibaba（nacos，sentinel，dubbo zk，seata，rocketmq）</p></li><li><p>gateway 在 spring 的支持下，内部实现了限流、负载均衡等，扩展性也更强，但同时也限制了仅适合于 Spring Cloud 套件。而 zuul 则可以扩展至其他微服务框架中，其内部没有实现限流、负载均衡等。</p></li><li><p>Gateway（Netty NIO）很好的支持异步(spring5.x ,webFlux 响应式编程默认是异步的)，而 zuul1.0仅支持同步 BIO zuul2.0以后也支持异步了</p></li></ol></blockquote><h3 id="3-Nginx在微服务中的地位"><a href="#3-Nginx在微服务中的地位" class="headerlink" title="3.Nginx在微服务中的地位"></a>3.Nginx在微服务中的地位</h3><blockquote><p>最后简单聊一下 nginx，在过去几年微服务架构还没有流行的日子里，nginx 已经得到了广大开发者的认可，其性能高、扩展性强、可以灵活利用 lua 脚本构建插件的特点让人没有抵抗力。（nginx 的请求转发 最大并发是多个次，每秒 5w-10w 左右） 3w 左右</p><p>有一个能满足我所有需求还很方便我扩展的东西，还免费，凭啥不用？？但是，如今很多微服务架构的项目中不会选择 nginx，我认为原因有以下几点：微服务框架一般来说是配套的，集成起来更容易如今微服务架构中，仅有很少的公司会面对无法解决的性能瓶颈，而他们也不会因此使用nginx，而是选择开发一套适合自己的微服务框架（很多公司会对现有框架进行修改）spring boot 对于一些模板引擎如 FreeMarker、themleaf 的支持是非常好的，很多应用还没有达到动、静态文件分离的地步，对 nginx 的需求程度并不大。</p><p><strong>动静分离： css js</strong>  <strong>可以放在 nginx</strong></p></blockquote><h3 id="3-关于限流"><a href="#3-关于限流" class="headerlink" title="3.关于限流"></a>3.关于限流</h3><blockquote><p>比如：如果在抢购过程中，用户量请求非常大，怎么确保商品不会卖超</p><p>Redis 单线程 （IO 为什么快，因为我们现在的处理器是多核心数的，redis 底层使用的是IO 的多路复用）一般人只会在意商品卖超而忘记了限流的重要性Mq（限流 削峰，异步，解耦合）</p></blockquote><h3 id="4-健康状态检查"><a href="#4-健康状态检查" class="headerlink" title="4.健康状态检查"></a>4.健康状态检查</h3><h4 id="1-添加依赖-1"><a href="#1-添加依赖-1" class="headerlink" title="1.添加依赖"></a>1.添加依赖</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- 健康检查的依赖--&gt;<br>&lt;dependency&gt;<br>        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>        &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h4 id="2-编写配置文件"><a href="#2-编写配置文件" class="headerlink" title="2.编写配置文件"></a>2.编写配置文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">management:</span><br> <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">web:</span><br>       <span class="hljs-attr">exposure:</span><br>       <span class="hljs-attr">include:</span> <span class="hljs-string">&#x27;*&#x27;</span> <span class="hljs-comment">#暴露检查的端点</span><br></code></pre></td></tr></table></figure><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230124232535891.png" alt="image-20230124232535891"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230124232548318.png" alt="image-20230124232548318"></p>]]></content>
    
    
    <categories>
      
      <category>Java成长之路</category>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springcloud</tag>
      
      <tag>微服务，网关</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day05-01-18-SpringCloud技术-Sleuth</title>
    <link href="/2023/01/18/Day05-01-18-SpringCloud%E6%8A%80%E6%9C%AF-Sleuth/"/>
    <url>/2023/01/18/Day05-01-18-SpringCloud%E6%8A%80%E6%9C%AF-Sleuth/</url>
    
    <content type="html"><![CDATA[<h1 id="Day05-01-18-SpringCloud技术-Sleuth"><a href="#Day05-01-18-SpringCloud技术-Sleuth" class="headerlink" title="Day05-01-18-SpringCloud技术-Sleuth"></a>Day05-01-18-SpringCloud技术-Sleuth</h1><h2 id="1-什么是链路追踪"><a href="#1-什么是链路追踪" class="headerlink" title="1.什么是链路追踪"></a>1.<strong>什么是链路追踪</strong></h2><blockquote><p>官网：<a href="https://spring.io/projects/spring-cloud-sleuth">https://spring.io/projects/spring-cloud-sleuth</a></p><p>链路追踪就是：<strong>追踪微服务的调用路径</strong></p></blockquote><h2 id="2-链路追踪的由来"><a href="#2-链路追踪的由来" class="headerlink" title="2.链路追踪的由来"></a>2.<strong>链路追踪的由来</strong></h2><blockquote><p>在微服务框架中，一个由客户端发起的请求在后端系统中会经过多个不同的服务节点调用来协同产生最后的请求结果，每一个请求都会开成一条复杂的分布式服务调用链路，链路中的任何一环出现高延时或错误都会引导起整个请求最后的失败。（不建议微服务中链路调用超过 3次）</p></blockquote><h2 id="3-分布式链路调用的监控"><a href="#3-分布式链路调用的监控" class="headerlink" title="3.分布式链路调用的监控"></a>3.<strong>分布式链路调用的监控</strong></h2><blockquote><p>sleuth+zipkin（zipkin 就是一个可视化的监控控制台）</p><p>Zipkin 是 Twitter 的一个开源项目，允许开发者收集 Twitter 各个服务上的监控数据，并提供查询接口。</p><p>该系统让开发者可通过一个 Web 前端轻松的收集和分析数据，例如用户每次请求服务的处理时间等，可方便的监测系统中存在的瓶颈</p></blockquote><h2 id="4-Zipkin-可视化平台"><a href="#4-Zipkin-可视化平台" class="headerlink" title="4.Zipkin(可视化平台)"></a>4.Zipkin(可视化平台)</h2><h3 id="1-下载zipkin"><a href="#1-下载zipkin" class="headerlink" title="1.下载zipkin"></a>1.下载zipkin</h3><blockquote><p>SpringCloud 从 F 版以后已不需要自己构建 Zipkin server 了，只需要调用 jar 包即可</p><p><a href="https://dl.bintray.com/openzipkin/maven/io/zipkin/java/zipkin-server/">https://dl.bintray.com/openzipkin/maven/io/zipkin/java/zipkin-server/</a></p><p><a href="https://dl.bintray.com/openzipkin/maven/io/zipkin/java/zipkin-server/2.12.9/">https://dl.bintray.com/openzipkin/maven/io/zipkin/java/zipkin-server/2.12.9/</a></p></blockquote><h3 id="2-运行zipkin"><a href="#2-运行zipkin" class="headerlink" title="2.运行zipkin"></a>2.运行zipkin</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230118160100913.png" alt="image-20230118160100913"></p><h3 id="3-查看zipkin的控制台"><a href="#3-查看zipkin的控制台" class="headerlink" title="3.查看zipkin的控制台"></a>3.查看zipkin的控制台</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230118160141705.png" alt="image-20230118160141705"></p><h2 id="5-相关术语和名词解释"><a href="#5-相关术语和名词解释" class="headerlink" title="5.相关术语和名词解释"></a>5.相关术语和名词解释</h2><h3 id="1-完整调用链路"><a href="#1-完整调用链路" class="headerlink" title="1.完整调用链路"></a>1.完整调用链路</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230118160504598.png" alt="image-20230118160504598"></p><h3 id="2-调用链路的依赖关系"><a href="#2-调用链路的依赖关系" class="headerlink" title="2.调用链路的依赖关系"></a>2.调用链路的依赖关系</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230118162555101.png" alt="image-20230118162555101"></p><h3 id="3-名词解释"><a href="#3-名词解释" class="headerlink" title="3.名词解释"></a>3.名词解释</h3><blockquote><p>Trace:类似于树结构的 Span 集合，表示一条调用链路，存在唯一标识</p><p>span:表示调用链路来源，通俗的理解 span 就是一次请求信息</p></blockquote><h2 id="6-Sleuth快速入门"><a href="#6-Sleuth快速入门" class="headerlink" title="6.Sleuth快速入门"></a>6.Sleuth快速入门</h2><h3 id="1-在每个项目中引入依赖"><a href="#1-在每个项目中引入依赖" class="headerlink" title="1.在每个项目中引入依赖"></a>1.在每个项目中引入依赖</h3><blockquote><p>因为每个项目都需要依赖 所以我我们向api中加入依赖</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-cloud-starter-zipkin&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h3 id="2-修改调用的配置文件-user-center和order-center"><a href="#2-修改调用的配置文件-user-center和order-center" class="headerlink" title="2.修改调用的配置文件(user-center和order-center)"></a>2.修改调用的配置文件(user-center和order-center)</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#  开启链路追踪</span><br>  <span class="hljs-attr">zipkin:</span><br>    <span class="hljs-attr">base-path:</span> <span class="hljs-string">http://localhost:9411</span><br>  <span class="hljs-attr">sleuth:</span><br>    <span class="hljs-attr">sampler:</span> <span class="hljs-number">1</span> <span class="hljs-comment">#配置采样率 默认的采样比例为: 0.1，即 10%，所设置的值介于 0 到 1 之间，1 则表示全部采集</span><br>    <span class="hljs-attr">rate:</span> <span class="hljs-number">10</span> <span class="hljs-comment">#为了使用速率限制采样器,选择每秒间隔接受的 trace 量，最小数字为 0，最大值为 2,147,483,647（最大 int） 默认为 10</span><br></code></pre></td></tr></table></figure><h3 id="3-启动测试"><a href="#3-启动测试" class="headerlink" title="3.启动测试"></a>3.启动测试</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230118170212061.png" alt="image-20230118170212061"></p><h2 id="7-Admin监控"><a href="#7-Admin监控" class="headerlink" title="7.Admin监控"></a>7.Admin监控</h2><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230118174835079.png" alt="image-20230118174835079"></p><h3 id="1-构建boot项目"><a href="#1-构建boot项目" class="headerlink" title="1.构建boot项目"></a>1.构建boot项目</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230118174234525.png" alt="image-20230118174234525"></p><h3 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2.修改配置文件"></a>2.修改配置文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;spring-boot-admin.version&gt;2.3.0&lt;/spring-boot-admin.version&gt;<br>    &lt;version&gt;2.3.12.RELEASE&lt;/version&gt;<br>    &lt;dependency&gt;<br>          &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>          &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;<br>          &lt;version&gt;2.2.3.RELEASE&lt;/version&gt;<br>      &lt;/dependency&gt;<br>&lt;spring-cloud.version&gt;Hoxton.SR12&lt;/spring-cloud.version&gt;<br>   &lt;dependency&gt;<br>              &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>              &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;<br>              &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;<br>              &lt;type&gt;pom&lt;/type&gt;<br>              &lt;scope&gt;import&lt;/scope&gt;<br>          &lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h3 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3.修改配置文件"></a>3.修改配置文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">10086</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">admin-service</span>  <span class="hljs-comment">#端口号范围 0-65535</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:8761/eureka</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">localhost</span><br></code></pre></td></tr></table></figure><h3 id="4-开启注解-erueks-client"><a href="#4-开启注解-erueks-client" class="headerlink" title="4.开启注解(erueks-client)"></a>4.开启注解(erueks-client)</h3><blockquote><p>@EnableEurekaClient</p></blockquote><h3 id="5-开启admin注解"><a href="#5-开启admin注解" class="headerlink" title="5.开启admin注解"></a>5.开启admin注解</h3><blockquote><p>@EnableAdminServer</p></blockquote><h3 id="6-修改注解-查看详细信息"><a href="#6-修改注解-查看详细信息" class="headerlink" title="6.修改注解-查看详细信息"></a>6.修改注解-查看详细信息</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">10086</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">admin-service</span>  <span class="hljs-comment">#端口号范围 0-65535</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:8761/eureka</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">localhost</span><br><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">web:</span><br>        <span class="hljs-attr">exposure:</span><br>          <span class="hljs-attr">include:</span> <span class="hljs-string">&#x27;*&#x27;</span>  <span class="hljs-comment">#暴露自己的信息</span><br></code></pre></td></tr></table></figure><h3 id="7-暴露user和order-center"><a href="#7-暴露user和order-center" class="headerlink" title="7.暴露user和order-center"></a>7.暴露user和order-center</h3><blockquote><p>添加项目依赖</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><blockquote><p>修改配置文件</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">order-service</span><br>    <span class="hljs-comment">#  开启链路追踪</span><br>  <span class="hljs-attr">zipkin:</span><br>    <span class="hljs-attr">base-path:</span> <span class="hljs-string">http://localhost:9411</span><br>  <span class="hljs-attr">sleuth:</span><br>    <span class="hljs-attr">sampler:</span> <span class="hljs-number">1</span> <span class="hljs-comment">#配置采样率 默认的采样比例为: 0.1，即 10%，所设置的值介于 0 到 1 之间，1 则表示全部采集</span><br>    <span class="hljs-attr">rate:</span> <span class="hljs-number">10</span> <span class="hljs-comment">#为了使用速率限制采样器,选择每秒间隔接受的 trace 量，最小数字为 0，最大值为 2,147,483,647（最大 int） 默认为 10</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:8761/eureka</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-comment">#开启被admin监控的配置文件</span><br><span class="hljs-attr">management:</span><br>  <span class="hljs-attr">endpoints:</span><br>    <span class="hljs-attr">web:</span><br>      <span class="hljs-attr">exposure:</span><br>        <span class="hljs-attr">include:</span> <span class="hljs-string">&#x27;*&#x27;</span><br><br></code></pre></td></tr></table></figure><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230118193747272.png" alt="image-20230118193747272"></p>]]></content>
    
    
    <categories>
      
      <category>Java成长之路</category>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springcloud</tag>
      
      <tag>微服务，链路追踪</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day04-01-17-SpringCloud技术-Hystrix</title>
    <link href="/2023/01/17/Day04-01-17-SpringCloud%E6%8A%80%E6%9C%AF-Hystrix/"/>
    <url>/2023/01/17/Day04-01-17-SpringCloud%E6%8A%80%E6%9C%AF-Hystrix/</url>
    
    <content type="html"><![CDATA[<h1 id="Day04-01-17-SpringCloud技术-Hystrix"><a href="#Day04-01-17-SpringCloud技术-Hystrix" class="headerlink" title="Day04-01-17-SpringCloud技术-Hystrix"></a>Day04-01-17-SpringCloud技术-Hystrix</h1><h2 id="1-服务雪崩"><a href="#1-服务雪崩" class="headerlink" title="1.服务雪崩"></a>1.服务雪崩</h2><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230117161822739.png" alt="image-20230117161822739"></p><h3 id="1-服务雪崩的本质"><a href="#1-服务雪崩的本质" class="headerlink" title="1.服务雪崩的本质"></a>1.服务雪崩的本质</h3><blockquote><p><strong>服务雪崩的本质：线程没有及时回收。</strong></p><p><strong>不管是调用成功还是失败，只要线程可以及时回收，就可以解决服务雪崩</strong></p></blockquote><h3 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2.解决方案"></a>2.解决方案</h3><h4 id="1-修改调用的超时时长"><a href="#1-修改调用的超时时长" class="headerlink" title="1.修改调用的超时时长"></a>1.<strong>修改调用的超时时长</strong></h4><blockquote><p>将服务间的调用超时时长改小，这样就可以让线程及时回收，保证服务可用</p><p>优点：非常简单，也可以有效的解决服务雪崩</p><p>缺点：<strong>不够灵活</strong>，有的服务需要更长的时间去处理（写库，整理数据）</p></blockquote><h4 id="2-设置拦截器"><a href="#2-设置拦截器" class="headerlink" title="2.设置拦截器"></a>2.<strong>设置拦截器</strong></h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230117164307381.png" alt="image-20230117164307381"></p><h2 id="2-Hystrix简介"><a href="#2-Hystrix简介" class="headerlink" title="2.Hystrix简介"></a>2.Hystrix简介</h2><blockquote><p>熔断器，也叫断路器！（正常情况下 断路器是关的 只有出了问题才打开）用来<strong>保护微服务不****雪崩的方法</strong>。思想和我们上面画的拦截器一样。</p><p>Hystrix 是 Netflix 公司开源的一个项目，它提供了熔断器功能，能够阻止<strong>分布式系统中出现</strong>联动故障**。Hystrix 是通过隔离服务的访问点阻止联动故障的，并提供了故障的解决方案，从而提高了整个分布式系统的弹性。微博 弹性云扩容 Docker K8s</p></blockquote><h2 id="3-Hystrix快速入门"><a href="#3-Hystrix快速入门" class="headerlink" title="3.Hystrix快速入门"></a>3.Hystrix快速入门</h2><h3 id="1-构建eureka-serve-注册中心"><a href="#1-构建eureka-serve-注册中心" class="headerlink" title="1.构建eureka-serve(注册中心)"></a>1.构建eureka-serve(注册中心)</h3><h3 id="2-构建rent-car-service-服务者"><a href="#2-构建rent-car-service-服务者" class="headerlink" title="2.构建rent-car-service(服务者)"></a>2.构建rent-car-service(服务者)</h3><h4 id="1-新建项目"><a href="#1-新建项目" class="headerlink" title="1.新建项目"></a>1.新建项目</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230117165426262.png" alt="image-20230117165426262"></p><h4 id="2-修改pom-xml配置文件"><a href="#2-修改pom-xml配置文件" class="headerlink" title="2.修改pom.xml配置文件"></a>2.修改pom.xml配置文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">  &lt;parent&gt;<br>     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>     &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;<br>     &lt;version&gt;2.3.12.RELEASE&lt;/version&gt;<br>     &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;<br> &lt;/parent&gt;<br>&lt;properties&gt;<br>     &lt;java.version&gt;1.8&lt;/java.version&gt;<br>     &lt;spring-cloud.version&gt;Hoxton.SR12&lt;/spring-cloud.version&gt;<br> &lt;/properties&gt;<br>&lt;dependency&gt;<br>         &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>         &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;<br>         &lt;version&gt;2.2.3.RELEASE&lt;/version&gt;<br> &lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h4 id="3-修改配置文件-yml"><a href="#3-修改配置文件-yml" class="headerlink" title="3.修改配置文件(yml)"></a>3.修改配置文件(yml)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">server:<br>  port: <span class="hljs-number">8081</span><br>spring:<br>  application:<br>    name: rent-car-service<br>eureka:<br>  client:<br>    service-url:<br>      defaultZone: http:<span class="hljs-comment">//localhost:8761/eureka</span><br>  instance:<br>    instance-id: $&#123;spring.application.name&#125;:$&#123;server.port&#125;<br>    prefer-ip-address: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h4 id="4-开启注解"><a href="#4-开启注解" class="headerlink" title="4.开启注解"></a>4.开启注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableEurekaClient</span><br></code></pre></td></tr></table></figure><h4 id="5-开发接口"><a href="#5-开发接口" class="headerlink" title="5.开发接口"></a>5.开发接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    *对用户的开放的租车接口</span><br><span class="hljs-comment">    * @author RenBoQing</span><br><span class="hljs-comment">    * @date 2023/1/17 0017 17:38</span><br><span class="hljs-comment">    * @return java.lang.String</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@GetMapping(&quot;/rentCar&quot;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">rentCar</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;租车成功&quot;</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="3-构建customer-service-调用者"><a href="#3-构建customer-service-调用者" class="headerlink" title="3.构建customer-service(调用者)"></a>3.构建customer-service(调用者)</h3><h4 id="1-新建项目-1"><a href="#1-新建项目-1" class="headerlink" title="1.新建项目"></a>1.新建项目</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230117171114339.png" alt="image-20230117171114339"></p><h4 id="2-修改pom-xml配置文件-1"><a href="#2-修改pom-xml配置文件-1" class="headerlink" title="2.修改pom.xml配置文件"></a>2.修改pom.xml配置文件</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">  &lt;parent&gt;<br>     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>     &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;<br>     &lt;version&gt;2.3.12.RELEASE&lt;/version&gt;<br>     &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;<br> &lt;/parent&gt;<br>&lt;properties&gt;<br>     &lt;java.version&gt;1.8&lt;/java.version&gt;<br>     &lt;spring-cloud.version&gt;Hoxton.SR12&lt;/spring-cloud.version&gt;<br> &lt;/properties&gt;<br>&lt;dependency&gt;<br>         &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>         &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;<br>         &lt;version&gt;2.2.3.RELEASE&lt;/version&gt;<br> &lt;/dependency&gt;<br>&lt;dependency&gt;<br>         &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>         &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;<br>     &lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h4 id="3-修改配置文件-yml-1"><a href="#3-修改配置文件-yml-1" class="headerlink" title="3.修改配置文件(yml)"></a>3.修改配置文件(yml)</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">customer-service</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:8761/eureka</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h4 id="4-开启注解-1"><a href="#4-开启注解-1" class="headerlink" title="4.开启注解"></a>4.开启注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableEurekaClient</span><br></code></pre></td></tr></table></figure><h4 id="5-编写远程调用feign"><a href="#5-编写远程调用feign" class="headerlink" title="5.编写远程调用feign"></a>5.编写远程调用feign</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(value = &quot;rent-car-service&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CustomerRentFeign</span> &#123;<br>    <span class="hljs-comment">//远程调用的接口</span><br>    <span class="hljs-meta">@GetMapping(&quot;/rentCar&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">rentCar</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-开启feign的客户端"><a href="#6-开启feign的客户端" class="headerlink" title="6.开启feign的客户端"></a>6.开启feign的客户端</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-meta">@EnableFeignClients</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomerServiceApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(CustomerServiceApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-注入调用"><a href="#7-注入调用" class="headerlink" title="7.注入调用"></a>7.注入调用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomerController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CustomerRentFeign customerRentFeign;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/customerRent&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">CustomerRent</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;客户来租车了&quot;</span>);<br>        <span class="hljs-comment">//远程调用</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">rentCar</span> <span class="hljs-operator">=</span> customerRentFeign.rentCar();<br>        System.out.println(rentCar);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-整合Hystrix"><a href="#4-整合Hystrix" class="headerlink" title="4.整合Hystrix"></a>4.整合Hystrix</h2><h3 id="1-引入依赖文件-消费者-调用者"><a href="#1-引入依赖文件-消费者-调用者" class="headerlink" title="1.引入依赖文件(消费者-调用者)"></a>1.引入依赖文件(消费者-调用者)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd"> &lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-cloud-starter-netflix-hystrix&lt;/artifactId&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h3 id="2-创建远程调用服务宕机后的备用服务"><a href="#2-创建远程调用服务宕机后的备用服务" class="headerlink" title="2.创建远程调用服务宕机后的备用服务"></a>2.创建远程调用服务宕机后的备用服务</h3><blockquote><p>在服务者的feign下面去实现这个对应的接口  即为备用的方案 就好比service 和serviceimpl的关系</p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230117194557938.png" alt="image-20230117194557938"></p><blockquote><p>并在hystrix的下面创建他的实现类，备用方案</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConsumerRentFeignHystrix</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CustomerRentFeign</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     *备选方法</span><br><span class="hljs-comment">     * @author RenBoQing</span><br><span class="hljs-comment">     * @date 2023/1/17 0017 19:47</span><br><span class="hljs-comment">     * @return java.lang.String</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">rentCar</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我是备胎&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>并在原来提供服务的接口上说明 该服务宕机后 指定对应的备选方案</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(value = &quot;rent-car-service&quot;, fallback = ConsumerRentFeignHystrix.class)</span><br><span class="hljs-comment">//fallback表示该服务熔断以后 启用备用方案的实现类的名称</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CustomerRentFeign</span> &#123;<br>    <span class="hljs-comment">//远程调用的接口</span><br>    <span class="hljs-meta">@GetMapping(&quot;/rentCar&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">rentCar</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-开启feign对Hystrix的支持-调用者"><a href="#3-开启feign对Hystrix的支持-调用者" class="headerlink" title="3.开启feign对Hystrix的支持(调用者)"></a>3.开启feign对Hystrix的支持(调用者)</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#开启feign对Hystrix的支持</span><br><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">hystrix:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#在cloud的f版本以前 是默认开启的 但是后来有了其他的熔断组件</span><br></code></pre></td></tr></table></figure><h2 id="5-Hystrix常用配置"><a href="#5-Hystrix常用配置" class="headerlink" title="5.Hystrix常用配置"></a>5.Hystrix常用配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">server:<br>  port: 8081<br>spring:<br>  application:<br>    name: customer-service<br>eureka:<br>  client:<br>    service-url:<br>      defaultZone: http://localhost:8761/eureka<br>  instance:<br>    instance-id: $&#123;spring.application.name&#125;:$&#123;server.port&#125;<br>    prefer-ip-address: true<br> #开启feign对Hystrix的支持<br>feign:<br>  hystrix:<br>    enabled: true #在cloud的f版本以前 是默认开启的 但是后来有了其他的熔断组件<br>ribbon:<br>  ReadTimeout: 5000 #要结合 feign 的底层 ribbon 调用的时长<br>  ConnectTimeout: 5000<br>hystrix: #hystrix 的全局控制<br>  command:<br>    default: #default 是全局控制，也可以换成单个方法控制，把 default 换成方法名即可<br>      fallback:<br>        isolation:<br>          semaphore:<br>            maxConcurrentRequests: 1000 #信号量隔离级别最大并发数<br>      circuitBreaker:<br>        enabled: true #开启断路器<br>        requestVolumeThreshold: 3 #失败次数（阀值）<br>        sleepWindowInMilliseconds: 20000 #窗口时间<br>        errorThresholdPercentage: 60 #失败率<br>      execution:<br>        isolation:<br>          Strategy: thread #隔离方式 thread 线程隔离集合和 SEMAPHORE 信号量隔离<br></code></pre></td></tr></table></figure><h2 id="6-分布式项目架构"><a href="#6-分布式项目架构" class="headerlink" title="6.分布式项目架构"></a>6.分布式项目架构</h2><h3 id="1-单体项目结构"><a href="#1-单体项目结构" class="headerlink" title="1.单体项目结构"></a>1.单体项目结构</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230117211525904.png" alt="image-20230117211525904"></p><h3 id="2-分布式聚合项目结构"><a href="#2-分布式聚合项目结构" class="headerlink" title="2.分布式聚合项目结构"></a>2.分布式聚合项目结构</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230117214529517.png" alt="image-20230117214529517"></p><h4 id="1-优化方案一"><a href="#1-优化方案一" class="headerlink" title="1.优化方案一"></a>1.优化方案一</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230117214808807.png" alt="image-20230117214808807"></p><h4 id="2-优化方案二"><a href="#2-优化方案二" class="headerlink" title="2.优化方案二"></a>2.优化方案二</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230117220546384.png" alt="image-20230117220546384"></p><h2 id="7-Feign的工程化实例"><a href="#7-Feign的工程化实例" class="headerlink" title="7.Feign的工程化实例"></a>7.Feign的工程化实例</h2><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230117221725059.png" alt="image-20230117221725059"></p><h3 id="1-创建创建父项目feign"><a href="#1-创建创建父项目feign" class="headerlink" title="1.创建创建父项目feign"></a>1.创建创建父项目feign</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230117223949555.png" alt="image-20230117223949555"></p><blockquote><p>主项目的父项目是一个boot</p></blockquote><h4 id="1-主项目配置文件-pom"><a href="#1-主项目配置文件-pom" class="headerlink" title="1.主项目配置文件(pom)"></a>1.主项目配置文件(pom)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;<br>         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;<br>         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;<br>    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;<br>    &lt;!-- 该项目的父项目是一个boot项目 --&gt;<br>    &lt;parent&gt;<br>        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;<br>        &lt;version&gt;2.3.12.RELEASE&lt;/version&gt;<br>        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;<br>    &lt;/parent&gt;<br>    &lt;!--   父项目的打包方式是pom--&gt;<br>    &lt;packaging&gt;pom&lt;/packaging&gt;<br>    &lt;groupId&gt;com.powernode&lt;/groupId&gt;<br>    &lt;artifactId&gt;04-feign-project&lt;/artifactId&gt;<br>    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;<br>    &lt;!--定义全局版本号控制--&gt;<br>    &lt;properties&gt;<br>        &lt;maven.compiler.source&gt;8&lt;/maven.compiler.source&gt;<br>        &lt;maven.compiler.target&gt;8&lt;/maven.compiler.target&gt;<br>        &lt;java.version&gt;1.8&lt;/java.version&gt;<br>        &lt;spring-cloud.version&gt;Hoxton.SR12&lt;/spring-cloud.version&gt;<br>    &lt;/properties&gt;<br>    &lt;!--    项目依赖 全局依赖 所有模块都有--&gt;<br>    &lt;dependencies&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;<br>            &lt;artifactId&gt;lombok&lt;/artifactId&gt;<br>        &lt;/dependency&gt;<br>    &lt;/dependencies&gt;<br>    &lt;!--    依赖管理  加载这里的依赖不会被加载进项目 只是做了一个版本控制--&gt;<br>    &lt;dependencyManagement&gt;<br>        &lt;dependencies&gt;<br>            &lt;!--            cloud版本号控制--&gt;<br>            &lt;dependency&gt;<br>                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;<br>                &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;<br>                &lt;type&gt;pom&lt;/type&gt;<br>                &lt;scope&gt;import&lt;/scope&gt;<br>            &lt;/dependency&gt;<br>        &lt;/dependencies&gt;<br>    &lt;/dependencyManagement&gt;<br><br>    &lt;!--   打包 和仓库的 构建工具--&gt;<br>    &lt;build&gt;<br><br>    &lt;/build&gt;<br>&lt;/project&gt;<br></code></pre></td></tr></table></figure><h4 id="2-构建project-domain"><a href="#2-构建project-domain" class="headerlink" title="2.构建project-domain"></a>2.构建project-domain</h4><blockquote><p>这里的都需要使用pom项目来修改为boot项目 </p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230117230756904.png" alt="image-20230117230756904"></p><h4 id="3-构建common-api"><a href="#3-构建common-api" class="headerlink" title="3.构建common-api"></a>3.构建common-api</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230117230756904.png" alt="image-20230117230756904"></p><h4 id="4-构建user-center"><a href="#4-构建user-center" class="headerlink" title="4.构建user-center"></a>4.构建user-center</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230117231841811.png" alt="image-20230117231841811"></p><h4 id="5-构建order-center"><a href="#5-构建order-center" class="headerlink" title="5.构建order-center"></a>5.构建order-center</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230117232008585.png" alt="image-20230117232008585"></p><h4 id="6-构建各模块的依赖关系"><a href="#6-构建各模块的依赖关系" class="headerlink" title="6.构建各模块的依赖关系"></a>6.构建各模块的依赖关系</h4><blockquote><p>api会依赖domain  所以在api的xml文件中引入domain</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;dependency&gt;<br>         &lt;groupId&gt;com.powernode&lt;/groupId&gt;<br>         &lt;artifactId&gt;project-domain&lt;/artifactId&gt;<br>         &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;<br>     &lt;/dependency&gt;<br></code></pre></td></tr></table></figure><blockquote><p>user-center 和order-center会依赖api 所以在user-center和order-center中引入api</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;dependencies&gt;<br>     &lt;dependency&gt;<br>         &lt;groupId&gt;com.powernode&lt;/groupId&gt;<br>         &lt;artifactId&gt;common-api&lt;/artifactId&gt;<br>         &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;<br>     &lt;/dependency&gt;<br> &lt;/dependencies&gt;<br></code></pre></td></tr></table></figure><h3 id="2-书写全局domain"><a href="#2-书写全局domain" class="headerlink" title="2.书写全局domain"></a>2.书写全局domain</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> RenBoQing</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span> 2023年01月17日 23:40</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Order</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer orderId;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Double price;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>注意事项 domain 和api不需要启动相当于一个jar的感觉  user-center和order-center需要引入 启动服务</p></blockquote><h3 id="3-构建order-center"><a href="#3-构建order-center" class="headerlink" title="3.构建order-center"></a>3.构建order-center</h3><h4 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-编写代码"><a href="#2-编写代码" class="headerlink" title="2.编写代码"></a>2.编写代码</h4><h5 id="1-改为Springboot项目"><a href="#1-改为Springboot项目" class="headerlink" title="1.改为Springboot项目"></a>1.改为Springboot项目</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderServiceApp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(OrderServiceApp.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-构建接口"><a href="#2-构建接口" class="headerlink" title="2.构建接口"></a>2.构建接口</h5><blockquote><p>为了接口能够复用和被远程调用 而且远程调用的接口和对外暴露的接口相同 直接抽取到api中构建</p><p>因为api中需要 FeignClient所以需要引入依赖 </p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230118000057506.png" alt="image-20230118000057506"></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(&quot;order-service&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserOrderFeign</span> &#123;<br><br>   <span class="hljs-comment">//根据用户用id来查询订单</span><br>    <span class="hljs-meta">@GetMapping(&quot;/order/getOrderByUserId&quot;)</span><br>    Order <span class="hljs-title function_">getOrderById</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> Integer userId)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这里定义以后 子模块对应的接口直接实现这个接口即可</p></blockquote><h5 id="3-在order-center中实现接口"><a href="#3-在order-center中实现接口" class="headerlink" title="3.在order-center中实现接口"></a>3.在order-center中实现接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderController</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserOrderFeign</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Order <span class="hljs-title function_">getOrderById</span><span class="hljs-params">(Integer userId)</span> &#123;<br>        System.out.println(userId);<br>        <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> Order.builder().name(<span class="hljs-string">&quot;青椒肉丝&quot;</span>).price(<span class="hljs-number">12.32</span>).orderId(<span class="hljs-number">12</span>).build();<br>        <span class="hljs-keyword">return</span> order;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-修改配置文件-注册发现"><a href="#3-修改配置文件-注册发现" class="headerlink" title="3.修改配置文件-注册发现"></a>3.修改配置文件-注册发现</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">order-service</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:8761/eureka</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="4-构建user-center-1"><a href="#4-构建user-center-1" class="headerlink" title="4.构建user-center"></a>4.构建user-center</h3><h4 id="1-引入依赖-1"><a href="#1-引入依赖-1" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h4><blockquote><p>为了接口能够复用和被远程调用 而且远程调用的接口和对外暴露的接口相同 直接抽取到api中构建</p><p>因为api中需要 FeignClient所以需要引入依赖 </p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230118000057506.png" alt="image-20230118000057506"></p><p>因为api中添加了feign所以子模块不需要添加</p><p>添加熔断注解到api中</p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230118002525635.png" alt="image-20230118002525635"></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;dependency&gt;<br>        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>    &lt;/dependency&gt;<br>    &lt;dependency&gt;<br>        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;<br>    &lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h4 id="2-编写代码-1"><a href="#2-编写代码-1" class="headerlink" title="2.编写代码"></a>2.编写代码</h4><h5 id="1-改为SpringBoot项目"><a href="#1-改为SpringBoot项目" class="headerlink" title="1.改为SpringBoot项目"></a>1.改为SpringBoot项目</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-meta">@EnableFeignClients</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceApp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(UserServiceApp.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-构建接口-1"><a href="#2-构建接口-1" class="headerlink" title="2.构建接口"></a>2.构建接口</h5><blockquote><p>这里使用浏览器访问 直接书写接口即可 不需要内部调用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserOrderFeign userOrderFeign;<br>    <span class="hljs-meta">@GetMapping(&quot;/find&quot;)</span><br>    <span class="hljs-keyword">public</span> Order <span class="hljs-title function_">findOrder</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> userOrderFeign.getOrderById(<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-修改配置文件-注册发现-1"><a href="#3-修改配置文件-注册发现-1" class="headerlink" title="3.修改配置文件-注册发现"></a>3.修改配置文件-注册发现</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">user-service</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:8761/eureka</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="5-整合Hystrix熔断"><a href="#5-整合Hystrix熔断" class="headerlink" title="5.整合Hystrix熔断"></a>5.整合Hystrix熔断</h3><h4 id="1-user-service中开启熔断"><a href="#1-user-service中开启熔断" class="headerlink" title="1.user-service中开启熔断"></a>1.user-service中开启熔断</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">user-service</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:8761/eureka</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">hystrix:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h4 id="2-在user-service中或者api中书写熔断代码"><a href="#2-在user-service中或者api中书写熔断代码" class="headerlink" title="2.在user-service中或者api中书写熔断代码"></a>2.在user-service中或者api中书写熔断代码</h4><blockquote><p>为了方便管理 我们统一在api中书写代码</p></blockquote><h5 id="1-在api的feign下书写代码"><a href="#1-在api的feign下书写代码" class="headerlink" title="1.在api的feign下书写代码"></a>1.在api的feign下书写代码</h5><blockquote><p>在api的feign中新建hystrix去实现对应的接口方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserOrderFeignHystrix</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserOrderFeign</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Order <span class="hljs-title function_">getOrderById</span><span class="hljs-params">(Integer userId)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;走了熔断方案 没有数据走过来&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-在对应的接口上指定熔断的方案"><a href="#2-在对应的接口上指定熔断的方案" class="headerlink" title="2.在对应的接口上指定熔断的方案"></a>2.在对应的接口上指定熔断的方案</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(value = &quot;order-service&quot;,fallback = UserOrderFeignHystrix.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserOrderFeign</span> &#123;<br><br>   <span class="hljs-comment">//根据用户用id来查询订单</span><br>    <span class="hljs-meta">@GetMapping(&quot;/order/getOrderByUserId&quot;)</span><br>    Order <span class="hljs-title function_">getOrderById</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> Integer userId)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java成长之路</category>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springcloud</tag>
      
      <tag>微服务，服务容错</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day03-01-16-SpringCloud技术-openFeign</title>
    <link href="/2023/01/16/Day03-01-16-SpringCloud%E6%8A%80%E6%9C%AF-openFeign/"/>
    <url>/2023/01/16/Day03-01-16-SpringCloud%E6%8A%80%E6%9C%AF-openFeign/</url>
    
    <content type="html"><![CDATA[<h1 id="Day03-01-16-SpringCloud技术-openFeign"><a href="#Day03-01-16-SpringCloud技术-openFeign" class="headerlink" title="Day03-01-16-SpringCloud技术-openFeign"></a>Day03-01-16-SpringCloud技术-openFeign</h1><blockquote><p>上 一 节 我 们 讲 到 Ribbon 做 了 负 载 均 衡 ， 用 Eureka-Client 来 做 服 务 发 现 ， 通 过</p><p>RestTemplate 来完成服务调用，但是这都不是我们的终极方案，终极方案是使用 <strong>OpenFeign</strong></p></blockquote><h2 id="1-OpenFeign简介"><a href="#1-OpenFeign简介" class="headerlink" title="1.OpenFeign简介"></a>1.OpenFeign简介</h2><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230116205345721.png" alt="image-20230116205345721"></p><blockquote><p>Feign 是一个<strong>远程调用</strong>的组件 (接口，注解) http 调用的</p><p>Feign 集成了 ribbon </p><p>ribbon 里面集成了 eureka</p></blockquote><h2 id="2-OpenFeign快速入门"><a href="#2-OpenFeign快速入门" class="headerlink" title="2.OpenFeign快速入门"></a>2.OpenFeign快速入门</h2><h3 id="1-基本架构"><a href="#1-基本架构" class="headerlink" title="1.基本架构"></a>1.基本架构</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230116211816213.png" alt="image-20230116211816213"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230116211903011.png" alt="image-20230116211903011"></p><h3 id="2-新建Erueka-serve"><a href="#2-新建Erueka-serve" class="headerlink" title="2.新建Erueka-serve"></a>2.新建Erueka-serve</h3><h5 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a>1.创建项目</h5><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230115220931468.png" alt="image-20230115220931468"></p><h5 id="2-修改pom-xml"><a href="#2-修改pom-xml" class="headerlink" title="2.修改pom.xml"></a>2.修改pom.xml</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;parent&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;<br>    &lt;version&gt;2.3.12.RELEASE&lt;/version&gt;<br>    &lt;relativePath/&gt; <br>&lt;/parent&gt;<br> &lt;properties&gt;<br>    &lt;java.version&gt;1.8&lt;/java.version&gt;<br>    &lt;spring-cloud.version&gt;Hoxton.SR12&lt;/spring-cloud.version&gt;<br>&lt;/properties&gt;<br>&lt;dependency&gt;<br>        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;<br>        &lt;version&gt;2.2.3.RELEASE&lt;/version&gt;<br>    &lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h5 id="3-修改配置文件并开启注解"><a href="#3-修改配置文件并开启注解" class="headerlink" title="3.修改配置文件并开启注解"></a>3.修改配置文件并开启注解</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8761</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">eureka-serve</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">server:</span><br>    <span class="hljs-attr">eviction-interval-timer-in-ms:</span> <span class="hljs-number">1000</span><br>    <span class="hljs-attr">renewal-percent-threshold:</span> <span class="hljs-number">0.85</span><br>    <span class="hljs-attr">enable-self-preservation:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">localhsot</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;eureka.instance.hostname&#125;:$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">lease-renewal-interval-in-seconds:</span> <span class="hljs-number">10</span><br>    <span class="hljs-attr">lease-expiration-duration-in-seconds:</span> <span class="hljs-number">20</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultzone:</span> <span class="hljs-string">http://localhost:8761/eureka</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">registry-fetch-interval-seconds:</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//开启EurekaServer服务</span><br><span class="hljs-meta">@EnableEurekaServer</span><br></code></pre></td></tr></table></figure><h3 id="3-创建provider-order-service"><a href="#3-创建provider-order-service" class="headerlink" title="3.创建provider-order-service"></a>3.创建provider-order-service</h3><blockquote><p>为用户提供点餐接口 被别人调用 就不要使用远程调用 但是需要调用别人的话就需要使用远程调用</p></blockquote><h4 id="1-选择依赖"><a href="#1-选择依赖" class="headerlink" title="1.选择依赖"></a>1.选择依赖</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230116214222863.png" alt="image-20230116214222863"></p><h4 id="2-修改pom-xml-1"><a href="#2-修改pom-xml-1" class="headerlink" title="2.修改pom.xml"></a>2.修改pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.12.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud.version</span>&gt;</span>Hoxton.SR12<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.3.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-开启注解"><a href="#3-开启注解" class="headerlink" title="3.开启注解"></a>3.开启注解</h4><blockquote><p>@EnableEurekaClient</p></blockquote><h4 id="4-修改yml配置文件"><a href="#4-修改yml配置文件" class="headerlink" title="4.修改yml配置文件"></a>4.修改yml配置文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">order-serve</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:8761/eureka</span><br></code></pre></td></tr></table></figure><h4 id="5-开发接口"><a href="#5-开发接口" class="headerlink" title="5.开发接口"></a>5.开发接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  *为用户暴露的点餐接口</span><br><span class="hljs-comment">  * @author RenBoQing</span><br><span class="hljs-comment">  * @date 2023/1/16 0016 22:05</span><br><span class="hljs-comment">  * @return java.lang.String</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-meta">@GetMapping(&quot;/doOrder&quot;)</span><br> <span class="hljs-keyword">public</span> String <span class="hljs-title function_">doOrder</span><span class="hljs-params">()</span> &#123;<br>     <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;用户开始点餐&quot;</span>;<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="4-创建consumer-user-service"><a href="#4-创建consumer-user-service" class="headerlink" title="4.创建consumer-user-service"></a>4.<strong>创建</strong>consumer-user-service</h3><h4 id="1-选择依赖-1"><a href="#1-选择依赖-1" class="headerlink" title="1.选择依赖"></a>1.选择依赖</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230116221058546.png" alt="image-20230116221058546"></p><h4 id="2-修改pom-xml-2"><a href="#2-修改pom-xml-2" class="headerlink" title="2.修改pom.xml"></a>2.修改pom.xml</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;parent&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;<br>    &lt;version&gt;2.3.12.RELEASE&lt;/version&gt;<br>    &lt;relativePath/&gt; <br>&lt;/parent&gt;<br> &lt;properties&gt;<br>    &lt;java.version&gt;1.8&lt;/java.version&gt;<br>    &lt;spring-cloud.version&gt;Hoxton.SR12&lt;/spring-cloud.version&gt;<br>&lt;/properties&gt;<br>&lt;dependency&gt;<br>        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;<br>        &lt;version&gt;2.2.3.RELEASE&lt;/version&gt;<br>    &lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h4 id="3-开启注解-1"><a href="#3-开启注解-1" class="headerlink" title="3.开启注解"></a>3.开启注解</h4><blockquote><p>@EnableEurekaClient</p></blockquote><h4 id="4-修改yml配置文件-1"><a href="#4-修改yml配置文件-1" class="headerlink" title="4.修改yml配置文件"></a>4.修改yml配置文件</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">user-service</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:8761/eureka</span><br></code></pre></td></tr></table></figure><h4 id="5-开启远程调用注解"><a href="#5-开启远程调用注解" class="headerlink" title="5.开启远程调用注解"></a>5.开启远程调用注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-meta">@EnableFeignClients</span> <span class="hljs-comment">//开启feign的客户端功能 发起调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(UserServiceApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-新建接口"><a href="#6-新建接口" class="headerlink" title="6.新建接口"></a>6.新建接口</h4><blockquote><p>在项目下专门建立一个包 叫做Feign 里面全部是关于调用的接口 接口的名称见名知意</p><p>1.例如user 去调用 order的接口 接口名称 就叫做 UserOrderFeign</p><p>2.开启注解 @FeignClient 里面的value的值就是 就是提供者的名称 对应服务的名称 在eureka中注册的名称 也就是 spring.application.name</p><p>3.需要调用那个接口 只需要把controller对应的方法写成接口即可 包括注解和方法的返回值 以及参数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(value = &quot;order-service&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserOrderFeign</span> &#123;<br>   <span class="hljs-comment">//需要调用那个接口 只需要把controller对应的方法写成接口即可 包括注解和方法的返回值 以及参数</span><br>    <span class="hljs-meta">@GetMapping(&quot;/doOrder&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">doOrder</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-新建接口测试"><a href="#7-新建接口测试" class="headerlink" title="7.新建接口测试"></a>7.新建接口测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceController</span> &#123;<br>    <span class="hljs-comment">// 注入user-order-feign</span><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserOrderFeign userOrderFeign;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/userDoOrder&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">userDoOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//    这里需要使用远程调用 使用对应的接口即可 返回值</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">userDoOrder</span> <span class="hljs-operator">=</span> userOrderFeign.userDoOrder();<br>        <span class="hljs-keyword">return</span> userDoOrder;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="8-调用总结"><a href="#8-调用总结" class="headerlink" title="8.调用总结"></a>8.调用总结</h4><blockquote><p>浏览器(前端)——-&gt; user-service(&#x2F;userDoorder)—–RPC(feign)—&gt;order-service( &#x2F;doorder)</p></blockquote><h3 id="5-负载均衡调用测试"><a href="#5-负载均衡调用测试" class="headerlink" title="5.负载均衡调用测试"></a>5.负载均衡调用测试</h3><h4 id="1-选择依赖-2"><a href="#1-选择依赖-2" class="headerlink" title="1.选择依赖"></a>1.选择依赖</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230116214222863.png" alt="image-20230116214222863"></p><h4 id="2-修改pom-xml-3"><a href="#2-修改pom-xml-3" class="headerlink" title="2.修改pom.xml"></a>2.修改pom.xml</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">  &lt;parent&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;<br>    &lt;version&gt;2.3.12.RELEASE&lt;/version&gt;<br>    &lt;relativePath/&gt; <br>&lt;/parent&gt;<br> &lt;properties&gt;<br>    &lt;java.version&gt;1.8&lt;/java.version&gt;<br>    &lt;spring-cloud.version&gt;Hoxton.SR12&lt;/spring-cloud.version&gt;<br>&lt;/properties&gt;<br>&lt;dependency&gt;<br>        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;<br>        &lt;version&gt;2.2.3.RELEASE&lt;/version&gt;<br>    &lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h4 id="3-开启注解-2"><a href="#3-开启注解-2" class="headerlink" title="3.开启注解"></a>3.开启注解</h4><blockquote><p>@EnableEurekaClient</p></blockquote><h4 id="4-修改配置文件"><a href="#4-修改配置文件" class="headerlink" title="4.修改配置文件"></a>4.修改配置文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8082</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">order-service</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:8761/eureka</span><br></code></pre></td></tr></table></figure><h4 id="5-开发接口-1"><a href="#5-开发接口-1" class="headerlink" title="5.开发接口"></a>5.开发接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">   *为用户暴露的点餐接口</span><br><span class="hljs-comment">   * @author RenBoQing</span><br><span class="hljs-comment">   * @date 2023/1/16 0016 22:05</span><br><span class="hljs-comment">   * @return java.lang.String</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-meta">@GetMapping(&quot;/doOrder&quot;)</span><br>  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">doOrder</span><span class="hljs-params">()</span> &#123;<br>      System.out.println(<span class="hljs-string">&quot;用户开始点餐&quot;</span>);<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;用户开始点餐 我是BB提供的点餐借口&quot;</span>;<br>  &#125;<br></code></pre></td></tr></table></figure><blockquote><p>这里的feign会自动开启轮负载均衡的轮循算法</p></blockquote><h4 id="6-接口测试"><a href="#6-接口测试" class="headerlink" title="6.接口测试"></a>6.接口测试</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230117111621661.png" alt="image-20230117111621661"></p><h3 id="6-调用超时设置"><a href="#6-调用超时设置" class="headerlink" title="6.调用超时设置"></a>6.<strong>调用超时设置</strong></h3><blockquote><p>因 为 ribbon默 认 调 用 超 时 时 长 为 <strong>1s</strong> ， 可 以 修 改 ， 超 时 调 整 可 以 查 看DefaultClientConfigImpl</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">ribbon:</span> <span class="hljs-comment">#feign 默认调用 1s 超时</span><br>  <span class="hljs-attr">ReadTimeout:</span> <span class="hljs-number">5000</span> <span class="hljs-comment">#修改调用时长为 5s</span><br>  <span class="hljs-attr">ConnectTimeout:</span> <span class="hljs-number">5000</span> <span class="hljs-comment">#修改连接时长为 5s</span><br></code></pre></td></tr></table></figure><h2 id="3-OpenFeign调用参数处理"><a href="#3-OpenFeign调用参数处理" class="headerlink" title="3.OpenFeign调用参数处理"></a>3.OpenFeign调用参数处理</h2><h3 id="1-基本概述"><a href="#1-基本概述" class="headerlink" title="1.基本概述"></a>1.基本概述</h3><blockquote><p><strong>Feign</strong> <strong>传参确保消费者和提供者的参数列表一致 包括返回值 方法签名要一致</strong></p></blockquote><blockquote><p><strong>1.</strong> <strong>通过</strong> <strong>URL</strong> <strong>传参数，****GET</strong> <strong>请求，参数列表使用</strong><strong>@PathVariable****（“”）</strong></p><p><strong>2.</strong> <strong>如果是</strong> <strong>GET</strong> <strong>请求，每个基本参数必须加</strong><strong>@RequestParam****（“”）</strong></p><p><strong>3.</strong> <strong>如果是</strong> <strong>POST</strong> <strong>请求，而且是对象集合等参数，必须加</strong><strong>@Requestbody</strong> <strong>或者</strong><strong>@RequestParam</strong></p></blockquote><h3 id="2-参数传递分类-order-service"><a href="#2-参数传递分类-order-service" class="headerlink" title="2.参数传递分类(order-service)"></a>2.参数传递分类(order-service)</h3><h4 id="1-URL传参"><a href="#1-URL传参" class="headerlink" title="1.URL传参"></a>1.URL传参</h4><blockquote><p>&#x2F;doorder&#x2F;热干面&#x2F;add&#x2F;油条&#x2F;aaa</p><p>使用url传递参数的时候 参数列表使用 PathVariable</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;testUrl/&#123;name&#125;/and/&#123;age&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testUrl</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;name&quot;)</span> String name,<span class="hljs-meta">@PathVariable(&quot;age&quot;)</span> Integer age)</span>&#123;<br>       System.out.println(name+<span class="hljs-string">&quot;:&quot;</span>+age);<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="2-get传递一个参数"><a href="#2-get传递一个参数" class="headerlink" title="2.get传递一个参数"></a>2.get传递一个参数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">     *传递一个参数 get请求</span><br><span class="hljs-comment">     * @author RenBoQing</span><br><span class="hljs-comment">     * @date 2023/1/17 0017 12:20</span><br><span class="hljs-comment">     * @param name</span><br><span class="hljs-comment">     * @return java.lang.String</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/oneParam&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">onParam</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String name)</span> &#123;<br>        System.out.println(name);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="3-get传递多个参数"><a href="#3-get传递多个参数" class="headerlink" title="3.get传递多个参数"></a>3.get传递多个参数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *传递两个参数 get请求</span><br><span class="hljs-comment"> * @author RenBoQing</span><br><span class="hljs-comment"> * @date 2023/1/17 0017 12:27</span><br><span class="hljs-comment"> * @param name</span><br><span class="hljs-comment"> * @param age</span><br><span class="hljs-comment"> * @return java.lang.String</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@GetMapping(&quot;/twoParams&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">twoParams</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String name, <span class="hljs-meta">@RequestParam</span> Integer age)</span> &#123;<br>    System.out.println(name + <span class="hljs-string">&quot;:&quot;</span> + age);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-post传递一个对象"><a href="#4-post传递一个对象" class="headerlink" title="4.post传递一个对象"></a>4.post传递一个对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    *post请求 一个对象</span><br><span class="hljs-comment">    * @author RenBoQing</span><br><span class="hljs-comment">    * @date 2023/1/17 0017 12:37</span><br><span class="hljs-comment">    * @param order</span><br><span class="hljs-comment">    * @return java.lang.String</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@PostMapping(&quot;/oneObj&quot;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">oneObj</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Order order)</span> &#123;<br>       System.out.println(order);<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="5-post传递一个对象-一个基本参数"><a href="#5-post传递一个对象-一个基本参数" class="headerlink" title="5.post传递一个对象+一个基本参数"></a>5.post传递一个对象+一个基本参数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *post请求 一个对象一个基本参数</span><br><span class="hljs-comment"> * @author RenBoQing</span><br><span class="hljs-comment"> * @date 2023/1/17 0017 12:38</span><br><span class="hljs-comment"> * @param order</span><br><span class="hljs-comment"> * @param name</span><br><span class="hljs-comment"> * @return java.lang.String</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@PostMapping(&quot;/oneObjOneParam&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">oneObjOneParam</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Order order, <span class="hljs-meta">@RequestParam(&quot;name&quot;)</span> String name)</span> &#123;<br>    System.out.println(order);<br>    System.out.println(name);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-开启远程调用注解-user-service"><a href="#3-开启远程调用注解-user-service" class="headerlink" title="3.开启远程调用注解(user-service)"></a>3.开启远程调用注解(user-service)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-meta">@EnableFeignClients</span> <span class="hljs-comment">//开启feign的客户端功能 发起调用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(UserServiceApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-新建feign接口-user-service"><a href="#4-新建feign接口-user-service" class="headerlink" title="4.新建feign接口(user-service)"></a>4.新建feign接口(user-service)</h3><blockquote><p>就是将刚才order-service的接口的方法签名进行复制</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;testUrl/&#123;name&#125;/and/&#123;age&#125;&quot;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testUrl</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;name&quot;)</span> String name, <span class="hljs-meta">@PathVariable(&quot;age&quot;)</span> Integer age)</span>;<br><br><br>   <span class="hljs-meta">@GetMapping(&quot;/oneParam&quot;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">onParam</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String name)</span>;<br><br><br>   <span class="hljs-meta">@GetMapping(&quot;/twoParams&quot;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">twoParams</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> String name, <span class="hljs-meta">@RequestParam</span> Integer age)</span>;<br><br><br>   <span class="hljs-meta">@PostMapping(&quot;/oneObj&quot;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">oneObj</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Order order)</span>;<br><br><br>   <span class="hljs-meta">@PostMapping(&quot;/oneObjOneParam&quot;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">oneObjOneParam</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Order order, <span class="hljs-meta">@RequestParam(&quot;name&quot;)</span> String name)</span>;<br></code></pre></td></tr></table></figure><h3 id="5-开启负载均衡注解-user-sevice"><a href="#5-开启负载均衡注解-user-sevice" class="headerlink" title="5.开启负载均衡注解(user-sevice)"></a>5.开启负载均衡注解(user-sevice)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  *开启负载均衡的注解</span><br><span class="hljs-comment">  * @author RenBoQing</span><br><span class="hljs-comment">  * @date 2023/1/17 0017 13:02</span><br><span class="hljs-comment">  * @return org.springframework.web.client.RestTemplate</span><br><span class="hljs-comment">  */</span><br> <span class="hljs-meta">@Bean</span><br> <span class="hljs-meta">@LoadBalanced</span><br> <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">()</span> &#123;<br>     <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="6-开启测试"><a href="#6-开启测试" class="headerlink" title="6.开启测试"></a>6.开启测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//浏览器请求都是get</span><br>    <span class="hljs-meta">@GetMapping(&quot;/testParam&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testParam</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> userOrderFeign.testUrl(<span class="hljs-string">&quot;任柏庆&quot;</span>, <span class="hljs-number">15</span>);<br>        System.out.println(result);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">onParam</span> <span class="hljs-operator">=</span> userOrderFeign.onParam(<span class="hljs-string">&quot;人间至味是清欢&quot;</span>);<br>        System.out.println(onParam);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">twoParams</span> <span class="hljs-operator">=</span> userOrderFeign.twoParams(<span class="hljs-string">&quot;哈哈&quot;</span>, <span class="hljs-number">60</span>);<br>        System.out.println(twoParams);<br>        <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> Order.builder().name(<span class="hljs-string">&quot;牛排&quot;</span>).id(<span class="hljs-number">1</span>).price(<span class="hljs-number">200.3</span>).time(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()).build();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">oneObj</span> <span class="hljs-operator">=</span> userOrderFeign.oneObj(order);<br>        System.out.println(oneObj);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">oneObjOneParam</span> <span class="hljs-operator">=</span> userOrderFeign.oneObjOneParam(order, <span class="hljs-string">&quot;大数据&quot;</span>);<br>        System.out.println(oneObjOneParam);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230117132158086.png" alt="image-20230117132158086"></p><h3 id="7-关于时间参数的注意事项"><a href="#7-关于时间参数的注意事项" class="headerlink" title="7.关于时间参数的注意事项"></a>7.关于时间参数的注意事项</h3><blockquote><p>使用 feign 远程调用时，传递 Date 类型，接收方的时间会相差 14 个小时，是因为时区造成的</p></blockquote><blockquote><p><strong>1.</strong> <strong>使用字符串传递参数，接收方转换成时间类型（推荐使用）不要单独传递时间</strong></p><p><strong>2.使用 JDK8 的 LocalDate(日期) 或 LocalDateTime(日期和时间，接收方只有秒，没有毫</strong>秒)</p><p>3.<img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230117135248891.png" alt="image-20230117135248891"></p></blockquote><h2 id="4-Feign的源码分析"><a href="#4-Feign的源码分析" class="headerlink" title="4.Feign的源码分析"></a>4.Feign的源码分析</h2><h3 id="1-OpenFeign的原理"><a href="#1-OpenFeign的原理" class="headerlink" title="1.OpenFeign的原理"></a>1.OpenFeign的原理</h3><blockquote><p><strong>根据上面的案例，我们知道</strong> <strong>feign</strong> <strong>是接口调用，接口如果想做事，必须要有实现类</strong></p><p><strong>可是我们并没有写实现类，只是加了一个</strong>**@FeignClient(value&#x3D;<strong><strong>”</strong></strong>xxx-service<strong><strong>”</strong></strong>)**<strong>的注解</strong></p><p><strong>所以我们猜测</strong> <strong>feign</strong> <strong>帮我们创建了代理对象，然后完成真实的调用。</strong></p><p>动态代理 1jdk （invoke） 2cglib 子类继承的</p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230117144939280.png" alt="image-20230117144939280"></p><h3 id="2-OpenFeign常见面试题"><a href="#2-OpenFeign常见面试题" class="headerlink" title="2.OpenFeign常见面试题"></a>2.OpenFeign常见面试题</h3><blockquote><p><strong>OpenFeign</strong> 主要基于接口和注解实现了远程调用</p></blockquote><h4 id="1-OpenFeign-用过吗？它是如何运作的"><a href="#1-OpenFeign-用过吗？它是如何运作的" class="headerlink" title="1.. OpenFeign 用过吗？它是如何运作的"></a>1.<strong>. OpenFeign</strong> <strong>用过吗？它是如何运作的</strong></h4><blockquote><p><strong>在主启动类上加上</strong><strong>@EnableFeignClients</strong> <strong>注解后，启动会进行包扫描，把所有加了</strong>**@FeignClient(value&#x3D;<strong><strong>”</strong></strong>xxx-service<strong><strong>”</strong></strong>)**<strong>注解的接口进行创建代理对象通过代理对象，使用</strong></p><p><strong>ribbon</strong> <strong>做了负载均衡和远程调用</strong></p></blockquote><h4 id="2-如何创建的代理对象"><a href="#2-如何创建的代理对象" class="headerlink" title="2.如何创建的代理对象"></a>2.<strong>如何创建的代理对象</strong></h4><blockquote><p><strong>当 项 目 在 启 动 时 ， 先 扫 描 ， 然 后 拿 到 标 记 了</strong> <strong>@FeignClient</strong> <strong>注 解 的 接 口 信 息 ， 由</strong></p><p><strong>ReflectiveFeign</strong> <strong>类的</strong> <strong>newInstance</strong> <strong>方法创建了代理对象</strong> <strong>JDK</strong> <strong>代理</strong></p></blockquote><h4 id="3-OpenFeign-到底是用什么做的远程调用"><a href="#3-OpenFeign-到底是用什么做的远程调用" class="headerlink" title="3.OpenFeign 到底是用什么做的远程调用"></a>3.<strong>OpenFeign</strong> <strong>到底是用什么做的远程调用</strong></h4><blockquote><p><strong>使用的是</strong> <strong>HttpURLConnection</strong> （java.net）</p></blockquote><h4 id="4-OpenFeign-怎么和-ribbon-整合的"><a href="#4-OpenFeign-怎么和-ribbon-整合的" class="headerlink" title="4.OpenFeign 怎么和 ribbon 整合的"></a>4.<strong>OpenFeign</strong> <strong>怎么和</strong> <strong>ribbon</strong> <strong>整合的</strong></h4><blockquote><p><strong>在代理对象执行调用的时候</strong></p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230117150654315.png" alt="image-20230117150654315"></p><h2 id="5-Feign的日志开启"><a href="#5-Feign的日志开启" class="headerlink" title="5.Feign的日志开启"></a>5.Feign的日志开启</h2><blockquote><p>从前面的测试中我们可以看出，没有任何关于远程调用的日志输出，如请头，参数Feign 提供了日志打印功能，我们可以通过配置来调整日志级别，从而揭开 Feign 中 Http 请求的所有细节</p></blockquote><h3 id="1-日志级别"><a href="#1-日志级别" class="headerlink" title="1.日志级别"></a>1.日志级别</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230117150816385.png" alt="image-20230117150816385"></p><blockquote><p>NONE 默认的，不显示日志</p><p>BASE 仅记录请求方法，URL ，响应状态码及执行时间</p><p>HEADERS 在 BASE 之上增加了请求和响应头的信息</p><p>FULL 在 HEADERS 之上增加了请求和响应的正文及无数据</p></blockquote><h3 id="2-创建配置类"><a href="#2-创建配置类" class="headerlink" title="2.创建配置类"></a>2.<strong>创建配置类</strong></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">   *打印feign的日志级别</span><br><span class="hljs-comment">   * @author RenBoQing</span><br><span class="hljs-comment">   * @date 2023/1/17 0017 15:11 </span><br><span class="hljs-comment">   * @return feign.Logger.Level</span><br><span class="hljs-comment">   */</span><br>   <span class="hljs-meta">@Bean</span><br>   <span class="hljs-keyword">public</span> Logger.Level <span class="hljs-title function_">level</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-keyword">return</span> Logger.Level.FULL;<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="3-开启日志-yml"><a href="#3-开启日志-yml" class="headerlink" title="3.开启日志(yml)"></a>3.开启日志(yml)</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#  开启日志</span><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">level:</span><br>    <span class="hljs-attr">com.powernode.userservice.feign.UserOrderFeign:</span> <span class="hljs-string">info</span> <span class="hljs-comment">#开启当前对应接口的日志</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java成长之路</category>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springcloud</tag>
      
      <tag>微服务，远程调用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day02-01-15-SpringCloud技术-Ribbon</title>
    <link href="/2023/01/15/Day02-01-15-SpringCloud%E6%8A%80%E6%9C%AF-Ribbon/"/>
    <url>/2023/01/15/Day02-01-15-SpringCloud%E6%8A%80%E6%9C%AF-Ribbon/</url>
    
    <content type="html"><![CDATA[<h1 id="Day02-01-15-SpringCloud技术-Ribbon"><a href="#Day02-01-15-SpringCloud技术-Ribbon" class="headerlink" title="Day02-01-15-SpringCloud技术-Ribbon"></a>Day02-01-15-SpringCloud技术-Ribbon</h1><h2 id="1-Ribbon概述"><a href="#1-Ribbon概述" class="headerlink" title="1.Ribbon概述"></a>1.<strong>Ribbon概述</strong></h2><blockquote><p>1.Spring Cloud Ribbon 是一个基于 HTTP 和 TCP 的<strong>客户端负载均衡工具</strong>，它基于 <strong>Netflix</strong>Ribbon 实现。通过 Spring Cloud 的封装，可以让我们轻松地将面向服务的 REST 模版请求自动转换成客户端负载均衡的服务调用。 轮询 hash 权重 … </p><p>2.简单的说 Ribbon 就是 netfix 公司的一个开源项目，主要功能是提供<strong>客户端负载均衡算法和</strong>服务调用**。Ribbon 客户端组件提供了一套完善的配置项，比如连接超时，重试等。</p><p>3.在 Spring Cloud 构建的微服务系统中， Ribbon 作为服务<strong>消费者</strong>的负载均衡器，有两种使用方式，一种是和 <strong>RestTemplate</strong> 相结合，另一种是和 OpenFeign 相结合。OpenFeign 已经默认集成了 Ribbon,关于 OpenFeign 的内容将会在下一章进行详细讲解。Ribbon 有很多子模块，但很多模块没有用于生产环境!</p></blockquote><h2 id="2-负载均衡"><a href="#2-负载均衡" class="headerlink" title="2.负载均衡"></a>2.负载均衡</h2><blockquote><p>负载均衡，英文名称为 Load Balance（LB）http:&#x2F;&#x2F; lb:&#x2F;&#x2F;（负载均衡协议） ，其含义就是指将负载（工作任务）进行平衡、分摊到多个操作单元上进行运行，例如 Web 服务器、企业核心应用服务器和其它主要任务服务器等，从而协同完成工作任务。负载均衡构建在原有网络结构之上，它提供了一种透明且廉价有效的方法扩展服务器和网络设备的带宽、加强网络数据处理能力、增加吞吐量、提高网络的可用性和灵活性.</p></blockquote><h3 id="1-服务器的负载均衡"><a href="#1-服务器的负载均衡" class="headerlink" title="1.服务器的负载均衡"></a>1.服务器的负载均衡</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230115210510067.png" alt="image-20230115210510067"></p><h2 id="3-Ribbon快速入门"><a href="#3-Ribbon快速入门" class="headerlink" title="3.Ribbon快速入门"></a>3.Ribbon快速入门</h2><h3 id="1-ribbon调用架构图"><a href="#1-ribbon调用架构图" class="headerlink" title="1.ribbon调用架构图"></a>1.ribbon调用架构图</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230115211736677.png" alt="image-20230115211736677"></p><h3 id="2-项目搭建"><a href="#2-项目搭建" class="headerlink" title="2.项目搭建"></a>2.项目搭建</h3><blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230115212007659.png" alt="image-20230115212007659"></p></blockquote><h4 id="1-创建eureka-serve"><a href="#1-创建eureka-serve" class="headerlink" title="1.创建eureka-serve"></a>1.创建eureka-serve</h4><h5 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a>1.创建项目</h5><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230115220931468.png" alt="image-20230115220931468"></p><h5 id="2-修改pom-xml"><a href="#2-修改pom-xml" class="headerlink" title="2.修改pom.xml"></a>2.修改pom.xml</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;parent&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;<br>    &lt;version&gt;2.3.12.RELEASE&lt;/version&gt;<br>    &lt;relativePath/&gt; <br>&lt;/parent&gt;<br> &lt;properties&gt;<br>    &lt;java.version&gt;1.8&lt;/java.version&gt;<br>    &lt;spring-cloud.version&gt;Hoxton.SR12&lt;/spring-cloud.version&gt;<br>&lt;/properties&gt;<br>&lt;dependency&gt;<br>        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;<br>        &lt;version&gt;2.2.3.RELEASE&lt;/version&gt;<br>    &lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h5 id="3-修改配置文件并开启注解"><a href="#3-修改配置文件并开启注解" class="headerlink" title="3.修改配置文件并开启注解"></a>3.修改配置文件并开启注解</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8761</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">eureka-serve</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">server:</span><br>    <span class="hljs-attr">eviction-interval-timer-in-ms:</span> <span class="hljs-number">1000</span><br>    <span class="hljs-attr">renewal-percent-threshold:</span> <span class="hljs-number">0.85</span><br>    <span class="hljs-attr">enable-self-preservation:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">localhsot</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;eureka.instance.hostname&#125;:$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">lease-renewal-interval-in-seconds:</span> <span class="hljs-number">10</span><br>    <span class="hljs-attr">lease-expiration-duration-in-seconds:</span> <span class="hljs-number">20</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultzone:</span> <span class="hljs-string">http://localhost:8761/eureka</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">registry-fetch-interval-seconds:</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//开启EurekaServer服务</span><br><span class="hljs-meta">@EnableEurekaServer</span><br></code></pre></td></tr></table></figure><h4 id="2-创建provider-1"><a href="#2-创建provider-1" class="headerlink" title="2.创建provider-1"></a>2.创建provider-1</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230115212256700.png" alt="image-20230115212256700"></p><h5 id="1-修改xml的配置文件"><a href="#1-修改xml的配置文件" class="headerlink" title="1.修改xml的配置文件"></a>1.修改xml的配置文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.12.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud.version</span>&gt;</span>Hoxton.SR12<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.3.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-编写配置文件并开启注解"><a href="#2-编写配置文件并开启注解" class="headerlink" title="2.编写配置文件并开启注解"></a>2.编写配置文件并开启注解</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">provider</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:8761/eureka</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">localhsot</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;eureka.instance.hostname&#125;:$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">lease-renewal-interval-in-seconds:</span> <span class="hljs-number">10</span><br>    <span class="hljs-attr">lease-expiration-duration-in-seconds:</span> <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><blockquote><p>@EnableEurekaClient</p></blockquote><h5 id="3-编写接口"><a href="#3-编写接口" class="headerlink" title="3.编写接口"></a>3.编写接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     *提供者aaa的接口</span><br><span class="hljs-comment">     * @author RenBoQing</span><br><span class="hljs-comment">     * @date 2023/1/15 0015 22:23</span><br><span class="hljs-comment">     * @return java.lang.String</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我是提供者aaa返回的接口&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-创建provider-2"><a href="#3-创建provider-2" class="headerlink" title="3.创建provider-2"></a>3.创建provider-2</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230115223047299.png" alt="image-20230115223047299"></p><h5 id="1-修改配置文件"><a href="#1-修改配置文件" class="headerlink" title="1.修改配置文件"></a>1.修改配置文件</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;parent&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;<br>    &lt;version&gt;2.3.12.RELEASE&lt;/version&gt;<br>    &lt;relativePath/&gt; <br>&lt;/parent&gt;<br> &lt;properties&gt;<br>    &lt;java.version&gt;1.8&lt;/java.version&gt;<br>    &lt;spring-cloud.version&gt;Hoxton.SR12&lt;/spring-cloud.version&gt;<br>&lt;/properties&gt;<br>&lt;dependency&gt;<br>        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>        &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;<br>        &lt;version&gt;2.2.3.RELEASE&lt;/version&gt;<br>    &lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h5 id="2-编写配置文件并开始注解"><a href="#2-编写配置文件并开始注解" class="headerlink" title="2.编写配置文件并开始注解"></a>2.编写配置文件并开始注解</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">provider</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:8761/eureka</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">localhsot</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;eureka.instance.hostname&#125;:$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">lease-renewal-interval-in-seconds:</span> <span class="hljs-number">10</span><br>    <span class="hljs-attr">lease-expiration-duration-in-seconds:</span> <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><blockquote><p>@EnableEurekaClient</p></blockquote><h5 id="3-编写接口-1"><a href="#3-编写接口-1" class="headerlink" title="3.编写接口"></a>3.编写接口</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我是提供者BB的接口&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-创建consumer-消费者"><a href="#4-创建consumer-消费者" class="headerlink" title="4.创建consumer(消费者)"></a>4.创建consumer(消费者)</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230115230957646.png" alt="image-20230115230957646"></p><h5 id="1-修改配置文件-1"><a href="#1-修改配置文件-1" class="headerlink" title="1.修改配置文件"></a>1.修改配置文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--添加ribbon的依赖--&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.9.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--boot版本--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.12.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-comment">&lt;!--cloud版本--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud.version</span>&gt;</span>Hoxton.SR12<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud.version</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-comment">&lt;!--eureka-client版本--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.3.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h5 id="2-编写配置文件并开启注解-1"><a href="#2-编写配置文件并开启注解-1" class="headerlink" title="2.编写配置文件并开启注解"></a>2.编写配置文件并开启注解</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8082</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">consumer</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://localhost:8761/eureka</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">localhsot</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;eureka.instance.hostname&#125;:$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">lease-renewal-interval-in-seconds:</span> <span class="hljs-number">10</span><br>    <span class="hljs-attr">lease-expiration-duration-in-seconds:</span> <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><blockquote><p>@EnableEurekaClient</p></blockquote><h5 id="3-编写consumer的启动类-添加RestTemplate"><a href="#3-编写consumer的启动类-添加RestTemplate" class="headerlink" title="3.编写consumer的启动类(添加RestTemplate)"></a>3.编写consumer的启动类(添加RestTemplate)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    *将RestTemplate注入到IOC容器中</span><br><span class="hljs-comment">    * @author RenBoQing</span><br><span class="hljs-comment">    * @date 2023/1/15 0015 23:29</span><br><span class="hljs-comment">    * @return org.springframework.web.client.RestTemplate</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@Bean</span><br>   <span class="hljs-meta">@LoadBalanced</span> <span class="hljs-comment">//开启ribbon的功能 的负载均衡的功能</span><br>   <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">()</span> &#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>   &#125;<br></code></pre></td></tr></table></figure><h5 id="4-编写接口并测试"><a href="#4-编写接口并测试" class="headerlink" title="4.编写接口并测试"></a>4.编写接口并测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/testRibbon&quot;)</span><br>    <span class="hljs-comment">//String serviceName 参数为服务的名称 也就是application.name</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRibbon</span><span class="hljs-params">(String serviceName)</span> &#123;<br>        <span class="hljs-comment">//  需要拿到对应的ip和端口号以及地址</span><br>        <span class="hljs-comment">//这里的ribbon会自动解析服务的名称和端口号</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">forObject</span> <span class="hljs-operator">=</span> restTemplate.getForObject(<span class="hljs-string">&quot;http://&quot;</span> + serviceName + <span class="hljs-string">&quot;/hello&quot;</span>, String.class);<br>        <span class="hljs-keyword">return</span> forObject;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-小思考"><a href="#5-小思考" class="headerlink" title="5.小思考"></a>5.小思考</h5><blockquote><p>思考ribbon是怎么将 <a href="http://provider/hello%E8%B7%AF%E5%BE%84%E8%AF%B7%E6%B1%82%E6%88%90%E5%8A%9F%E7%9A%84http://127.0.0.1:8080/helLo">http://provider/hello路径请求成功的http://127.0.0.1:8080/helLo</a><br>1.拦截这个请求<br>2.截取主机名称<br>3.借助eureka来做服务发现List&lt;&gt;<br>4.通过负载均衡算法拿到一个服务ip port5.reconsutruct</p><p>5 reconstructRL(重构路径)</p><p>6.发起请求</p></blockquote><h5 id="6-注意事项"><a href="#6-注意事项" class="headerlink" title="6.注意事项"></a>6.注意事项</h5><h6 id="1-关于restTemplate问题"><a href="#1-关于restTemplate问题" class="headerlink" title="1.关于restTemplate问题"></a>1.关于restTemplate问题</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">只要restTemplate加了rabbon的注解 项目中发起请求 都会走ribbon的代理<br>如果需要使用原生的restTemplate 就需要重新<span class="hljs-keyword">new</span>一个对象<br>  <span class="hljs-type">RestTempLate</span> <span class="hljs-variable">myRest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTempLate</span>();<br><span class="hljs-type">String</span> <span class="hljs-variable">forobject</span> <span class="hljs-operator">=</span> myRest.getForobject(<span class="hljs-string">&quot;http://LocaLhost:8888/aaa&quot;</span>， string.class);<br></code></pre></td></tr></table></figure><h6 id="2-关于消费者先启动问题"><a href="#2-关于消费者先启动问题" class="headerlink" title="2.关于消费者先启动问题"></a>2.关于消费者先启动问题</h6><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230116000705912.png" alt="image-20230116000705912"></p><h2 id="4-Ribbon源码分析"><a href="#4-Ribbon源码分析" class="headerlink" title="4.Ribbon源码分析"></a>4.Ribbon源码分析</h2><h3 id="1-Ribbon的职责"><a href="#1-Ribbon的职责" class="headerlink" title="1.Ribbon的职责"></a>1.Ribbon的职责</h3><blockquote><p><strong>先通过</strong> <strong>“http:&#x2F;&#x2F;“ + serviceId + “&#x2F;info”</strong> <strong>我们思考</strong> <strong>ribbon</strong> <strong>在真正调用之前需要做什么？</strong></p><p><strong>restTemplate.getForObject(“<a href="http://provider/info%E2%80%9D">http://provider/info”</a>, String.class);</strong></p><p>想要把上面这个请求执行成功，我们需要以下几步</p><ol><li><p>拦截该请求；</p></li><li><p>获取该请求的 URL 地址:<a href="http://provider/hello">http://provider/hello</a></p></li><li><p>截取 URL 地址中的 provider</p></li><li><p>从服务列表中找到 key 为 provider 的服务实例的集合(服务发现)</p></li><li><p>根据<strong>负载均衡算法</strong>选出一个符合的实例</p></li><li><p>拿到该实例的 host 和 port，重构原来 URL 中的 provider</p></li><li><p>真正的发送 restTemplate.getForObject(“<a href="http://ip:port/hello”，String.class">http://ip:port/hello”，String.class</a>)</p></li></ol></blockquote><h3 id="2-负载均衡测试"><a href="#2-负载均衡测试" class="headerlink" title="2.负载均衡测试"></a>2.负载均衡测试</h3><blockquote><p>Ribbon的重点就是负载均衡</p></blockquote><h4 id="1-创建Controller"><a href="#1-创建Controller" class="headerlink" title="1.创建Controller"></a>1.创建Controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br>   <span class="hljs-keyword">private</span> LoadBalancerClient loadBalancerClient;<br>   <span class="hljs-comment">/*</span><br><span class="hljs-comment">   *测试ribbon的负载均衡</span><br><span class="hljs-comment">   * @author RenBoQing</span><br><span class="hljs-comment">   * @date 2023/1/16 0016 12:42</span><br><span class="hljs-comment">   * @param serviceName</span><br><span class="hljs-comment">   * @return java.lang.String</span><br><span class="hljs-comment">   */</span><br>   <span class="hljs-meta">@GetMapping(&quot;/testRibbonRule&quot;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testRibbonRule</span><span class="hljs-params">(String serviceName)</span> &#123;<br>       <span class="hljs-comment">//这里需要调用loadBalancerClient客户端</span><br>       <span class="hljs-type">ServiceInstance</span> <span class="hljs-variable">choose</span> <span class="hljs-operator">=</span> loadBalancerClient.choose(serviceName);<br>       <span class="hljs-keyword">return</span> choose.toString();<br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="3-Ribbon-负载均衡的实现和几种算法"><a href="#3-Ribbon-负载均衡的实现和几种算法" class="headerlink" title="3.Ribbon 负载均衡的实现和几种算法"></a>3.<strong>Ribbon</strong> <strong>负载均衡的实现和几种算法</strong></h3><h4 id="1-轮循算法"><a href="#1-轮循算法" class="headerlink" title="1.轮循算法"></a>1.轮循算法</h4><h5 id="1-基本机构图"><a href="#1-基本机构图" class="headerlink" title="1.基本机构图"></a>1.基本机构图</h5><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230116190600533.png" alt="image-20230116190600533"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230116192253831.png" alt="image-20230116192253831"></p><h4 id="2-RandomRule–随机"><a href="#2-RandomRule–随机" class="headerlink" title="2.RandomRule–随机"></a>2.RandomRule–随机</h4><h4 id="3-权重"><a href="#3-权重" class="headerlink" title="3.权重"></a>3.权重</h4><h4 id="4-iphash"><a href="#4-iphash" class="headerlink" title="4.iphash"></a>4.<strong>iphash</strong></h4><h4 id="5-AvailabilityFilteringRule"><a href="#5-AvailabilityFilteringRule" class="headerlink" title="5**.AvailabilityFilteringRule**"></a>5**.AvailabilityFilteringRule**</h4><blockquote><p>会先过滤掉由于多次访问故障处于断路器跳闸状态的服务，还有并发的连接数量超过阈值的服务，然后对于剩余的服务列表按照轮询的策略进行访问</p></blockquote><h4 id="6-WeightedResponseTimeRule"><a href="#6-WeightedResponseTimeRule" class="headerlink" title="6.WeightedResponseTimeRule"></a>6.WeightedResponseTimeRule</h4><blockquote><p>根据平均响应时间计算所有服务的权重，响应时快服务权重越大被选中的概率越大。刚启动时如果同统计信息不足，则使用轮询的策略，等统计信息足够会切换到自身规则</p></blockquote><h4 id="7-RetryRule"><a href="#7-RetryRule" class="headerlink" title="7.RetryRule"></a>7.<strong>RetryRule</strong></h4><blockquote><p>先按照轮询的策略获取服务，如果获取服务失败则在指定的时间内会进行重试，获取可用的服务</p></blockquote><h4 id="8-BestAvailableRule"><a href="#8-BestAvailableRule" class="headerlink" title="8.BestAvailableRule"></a>8.<strong>BestAvailableRule</strong></h4><blockquote><p>会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量小的服务</p></blockquote><h4 id="9-ZoneAvoidanceRule"><a href="#9-ZoneAvoidanceRule" class="headerlink" title="9.ZoneAvoidanceRule"></a>9.<strong>ZoneAvoidanceRule</strong></h4><blockquote><p>默认规则复合判断Server 所在区域的性能和Server的可用行选择服务器</p></blockquote><blockquote><p><strong>Ribbon</strong> <strong>默认使用哪一个负载均衡算法：</strong></p><p><strong>ZoneAvoidanceRule</strong> <strong>：区间内亲和轮询的算法！通过一个</strong> <strong>key</strong> <strong>来区分</strong></p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230116193025460.png" alt="image-20230116193025460"></p><h3 id="4-修改默认的负载均衡算法"><a href="#4-修改默认的负载均衡算法" class="headerlink" title="4.修改默认的负载均衡算法"></a>4.<strong>修改默认的负载均衡算法</strong></h3><h4 id="1-修改yml文件"><a href="#1-修改yml文件" class="headerlink" title="1.修改yml文件"></a>1.修改yml文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">provider:</span> <span class="hljs-comment">#提供者的服务名称,那么访问该服务的时候就会按照自定义的负载均衡算法</span><br>  <span class="hljs-attr">ribbon:</span><br>    <span class="hljs-attr">NFLoadBalancerRuleClassName:</span> <span class="hljs-string">com.netflix.loadbalancer.RandomRule</span> <span class="hljs-comment">#几种算法的全限定类名</span><br></code></pre></td></tr></table></figure><h4 id="2-全局配置"><a href="#2-全局配置" class="headerlink" title="2.全局配置"></a>2.全局配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//写入Bean的配置文件</span><br> <span class="hljs-comment">/*</span><br><span class="hljs-comment">     *指定全局的配置服务全部使用同一个规则</span><br><span class="hljs-comment">     * @author RenBoQing</span><br><span class="hljs-comment">     * @date 2023/1/16 0016 19:44</span><br><span class="hljs-comment">     * @return com.netflix.loadbalancer.IRule</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> IRule <span class="hljs-title function_">myRule</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//指定调用所有的服务都用此算法</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomRule</span>();<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="5-Ribbon的常用配置"><a href="#5-Ribbon的常用配置" class="headerlink" title="5.Ribbon的常用配置"></a>5.Ribbon的常用配置</h2><blockquote><p><strong>Ribbon</strong> <strong>有很多默认的配置，查看</strong> <strong>DefaultClientConfigImpl</strong></p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230116194932178.png" alt="image-20230116194932178"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">ribbon:</span> <span class="hljs-comment">#全局的设置</span><br><span class="hljs-attr">eager-load:</span><br><span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># ribbon 一启动不会主动去拉取服务列表，当实际使用时才去拉取 是否立即加载</span><br><span class="hljs-attr">http:</span><br><span class="hljs-attr">client:</span><br><span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span> <span class="hljs-comment"># 在 ribbon 最后要发起 Http 的调用调用，我们认为是RestTemplate 完成的，其实最后是 HttpURLConnection 来完成的，这里面设置为 true ，可以把 HttpUrlConnection-&gt;HttpClient</span><br><span class="hljs-attr">okhttp:</span><br><span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#HttpUrlConnection 来完成的，这里面设置为 true ，可以</span><br><span class="hljs-string">把</span> <span class="hljs-string">HttpUrlConnection-&gt;OkHttpClient(也是发</span> <span class="hljs-string">http</span> <span class="hljs-string">请求的，它在移动端的开发用的多)</span><br><span class="hljs-attr">provider:</span> <span class="hljs-comment">#提供者的服务名称,那么访问该服务的时候就会按照自定义的负载均衡算法</span><br><span class="hljs-attr">ribbon:</span><br><span class="hljs-attr">NFLoadBalancerRuleClassName:</span> <span class="hljs-string">com.netflix.loadbalancer.RandomRule</span><br><span class="hljs-comment">#修改默认负载均衡算法，几种算法的全限定类名</span><br><span class="hljs-comment"># NFLoadBalancerClassName: #loadBalance 策略</span><br><span class="hljs-comment"># NFLoadBalancerPingClassName: #ping 机制策略</span><br><span class="hljs-comment"># NIWSServerListClassName: #服务列表策略</span><br><span class="hljs-comment"># NIWSServerListFilterClassName: #服务列表过滤策略</span><br><span class="hljs-comment">#ZonePreferenceServerListFilter 默认是优先过滤非一个区的服务列</span><br></code></pre></td></tr></table></figure><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230116203153946.png" alt="image-20230116203153946"></p><h2 id="6-Ribbon小结"><a href="#6-Ribbon小结" class="headerlink" title="6.Ribbon小结"></a>6.Ribbon小结</h2><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230116204049097.png" alt="image-20230116204049097"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230116204311522.png" alt="image-20230116204311522"></p>]]></content>
    
    
    <categories>
      
      <category>Java成长之路</category>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springcloud</tag>
      
      <tag>微服务，负载均衡</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day01-01-14-SpringCloud技术-Eureka</title>
    <link href="/2023/01/14/Day01-01-14-SpringCloud%E6%8A%80%E6%9C%AF-Eureka/"/>
    <url>/2023/01/14/Day01-01-14-SpringCloud%E6%8A%80%E6%9C%AF-Eureka/</url>
    
    <content type="html"><![CDATA[<h1 id="Day01-01-14-SpringCloud技术-Eureka"><a href="#Day01-01-14-SpringCloud技术-Eureka" class="headerlink" title="Day01-01-14-SpringCloud技术-Eureka"></a>Day01-01-14-SpringCloud技术-Eureka</h1><h2 id="1-微服务基本概述"><a href="#1-微服务基本概述" class="headerlink" title="1.微服务基本概述"></a>1.微服务基本概述</h2><h3 id="1-微服务简介"><a href="#1-微服务简介" class="headerlink" title="1.微服务简介"></a>1.微服务简介</h3><blockquote><p>微服务(不是一个框架 而是一种架构思想)，是著名的oo（面向对象，ObjectOriented ）专家 Martin Fowler 提出来的，它是用来描述将软件应用程序设计为独立部署的服务的种特殊方式。最近两年，微服务在各大技术会议、文章、书籍上出现的频率已经让人意识到它对于软件领域所带来的影响力。微服务架构的系统是个分布式系统，按业务领域划分为独立的服务单元，有自动化运维、容错、快速演进的特点，它能够解决传统单体架构系统的痛点，同时也能满足越来越复杂的业务需求.</p></blockquote><h3 id="2-单体架构的不足"><a href="#2-单体架构的不足" class="headerlink" title="2.单体架构的不足"></a>2.单体架构的不足</h3><blockquote><p>在应用的初始阶段，单体架构无论是在开发速度、运维难度上，还是服务器的成本上都有</p><p>着显著的优势。在一个产品的前景不明确的初始阶段，用单体架构是非常明智的选择。随着应</p><p>用业务的发展和业务复杂度的提高，这种架构明显存在很多的不足，主要体现在以下 3 个方面：</p><p><strong>1. 业务越来越复杂，单体应用的代码量越来越大，代码的可读性、可维护性和可扩展性下降，</strong></p><p><strong>新人接手代码所需的时间成倍增加，业务扩展带来的代价越来越大。</strong></p><p><strong>2. 随着用户越来越多，程序承受的并发越来越高，单体应用的并发能力有限。</strong></p><p><strong>3. 测试的难度越来越大，单体应用的业务都在同个程序中，随着业务的扩张、复杂度的增加，</strong></p><p><strong>单体应用修改业务或者增加业务或许会给其他业务带来定的影响，导致测试难度增加。</strong></p></blockquote><h3 id="3-什么是微服务"><a href="#3-什么是微服务" class="headerlink" title="3.什么是微服务"></a>3.什么是微服务</h3><blockquote><p><strong>就是将一个大的应用，拆分成多个小的模块，每个模块都有自己的功能和职责，每个模块可以</strong></p><p><strong>进行交互，这就是微服务</strong></p><p>对于微服务，业界没有严格统一的定义，但是作为“微服务”这名词的发明人，Martin Fowler</p><p>对微服务的定义似乎更具有权威性和指导意义，他的理解如下：</p><p><strong>简而言之，微服务架构的风格，就是将单一程序开发成一个微服务，每个微服务运行在自己的进程中，并使用轻量级通信机制，通常是HTTP RESTFUL API 。这些服务围绕业务能力来划分构建的，并通过完全自动化部署机制来独立部署这些服务可以使用不同的编程语言，以及不同数据存储技术，以保证最低限度的集中式管理.</strong></p></blockquote><h3 id="4-微服务的特点"><a href="#4-微服务的特点" class="headerlink" title="4.微服务的特点"></a>4.微服务的特点</h3><blockquote><p><strong>1. 按业务(功能)划分为一个独立运行的程序，即服务单元。</strong></p><p><strong>2. 服务之间通过 HTTP 协议相互通信。 http 是一个万能的协议 (web 应用都支持的模式)</strong></p><p><strong>3. 自动化部署。</strong></p><p><strong>4. 可以用不同的编程语言。</strong></p><p><strong>5. 可以用不同的存储技术。</strong></p><p><strong>6. 服务集中化管理。</strong></p><p><strong>7. 微服务是一个分布式系统。</strong></p></blockquote><h3 id="5-微服务特点基本概述"><a href="#5-微服务特点基本概述" class="headerlink" title="5.微服务特点基本概述"></a>5.微服务特点基本概述</h3><h4 id="1-微服务单元按业务来划分（不是绝对的）"><a href="#1-微服务单元按业务来划分（不是绝对的）" class="headerlink" title="1.微服务单元按业务来划分（不是绝对的）"></a>1.<strong>微服务单元按业务来划分（不是绝对的）</strong></h4><blockquote><p>微服务的“微”到底需要定义到什么样的程度，这是个非常难以界定的概念，可以从以个方面来界定： 是根据代码量来定义，根据代码的多少来判断程序的大小： 是根据开发时间的长短来判断： 是根据业务的大小来划分。根据 Martin Fowler 的定义，微服务的“微”是按照</p><p>业务来划分的 。一个大的业务可以拆分成若干小的业务， 个小的业务又可以拆分成若干更小的业务，业务到底怎么拆分才算合适，这需要开发人员自己去决定。例如微博最常见的功能是微博内容、关注和粉丝，而其中微博内容又有点赞、评论等，如何将微博这个复杂的程序划分为单个的服务，需要由开发团队去决定。按业务划分的微服务单元独立部署，运行在独立的进程中 这些微服务单元是高度组件化的模块，并提供了稳定的模块边界，服务与服务之间没有任何的相合 有非常好的扩展性和复用性。传统的软件开发模式通常由 UI 团队、服务端团队、</p><p>数据库和运维团队构成，相应地将软件按照职能划分为 、服务端、数据库和运维等模块。通常这些开发 员各司其职 很少有人跨职能去工作。 如果按照业务来划分服务，每个服务都需要独立的 UI 、服务端、数据库和运维。也就是说， 个小的业务的微服务需要动用团队的人去协作，这显然增加了团队与团队之间交流协作的成本。所以产生了跨职能团 队，这个团队负责一个服务的所有工作，包括 UI 、服务端和数据库。当这个团队只有 个人的时候，就对开发人员提出了更高的要求.</p></blockquote><h4 id="2-微服务通过-HTTP-来互相通信"><a href="#2-微服务通过-HTTP-来互相通信" class="headerlink" title="2.微服务通过 HTTP 来互相通信"></a>2.<strong>微服务通过 HTTP 来互相通信</strong></h4><blockquote><p>按照业务划分的微服务单元独立部署 并运行在各自的进程中。微服务单元之间的通信方般倾向于使用 HTTP 这种简单的通信机制，更多的时候是使用 RESTfulAPI 。这种接受请求、处理业务逻辑、返回数据的 HTTP 模式非常高效，并且这种通机制与平台和语言无关。例如用</p><p>Java 写的服务可以消费用 Go 语言写的服务</p></blockquote><h4 id="3-微服务的数据库独立"><a href="#3-微服务的数据库独立" class="headerlink" title="3.微服务的数据库独立"></a>3.<strong>微服务的数据库独立</strong></h4><blockquote><p>在单体架构中，所有的业务都共用个数据库。随着业务量的增加，数据库的表的数量越来越多，难以管理和维护，并且数据量的增 会导致查询速度越来越慢。 例如个应用有这样几个业务：用户的信息、用户的账户、用户的购物 、数据报 服务等。典型的单体架构如微服务的 个特点就是按业务划分服务，服务与服务之间无稠合，就连数据库也是独立的个典型的微服务的架构就是每个微服务都有自己独立的数据库，数据库之间没有何联系这样做的好处在于，随着业务的不断扩张，服务与服务不需要提供数据库集成，而是提供 API 接口相互调用：还有 个好处是数据库独立，单业务的数据盆少，易于维护，数据库性能有着明显的优势，数据库的迁移也很方便。另外，随着存储技术的发展，数据库的存储方式不再仅仅是关系型数据库，非关系数据库的应用也非常广泛，例如 MongoDB ，它们有着良好的读 性能，因此越来越受欢迎</p><p>个典型的微服务的系统，可能每 个服务的数据库都不相同，每个服务所使用的数据存储技术可能有所不同。</p></blockquote><h4 id="4-微服务的自动化部署（CI-x2F-CD）-持续集成-持续交付"><a href="#4-微服务的自动化部署（CI-x2F-CD）-持续集成-持续交付" class="headerlink" title="4.微服务的自动化部署（CI &#x2F;CD）(持续集成 持续交付)"></a>4.<strong>微服务的自动化部署（CI &#x2F;CD）(持续集成 持续交付)</strong></h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230114123126062.png" alt="image-20230114123126062"></p><blockquote><p>在微服务架构中，系统会被拆分为若干个微服务，每个微服务又是一个独立的应用程序。单体架构的应用程序只需要部署一次，而微服务架构有多少个服务就需要部署多少次。随着服务数量的增加，如果微服务按照单体架构的部署方式，部署的难度会呈指数增加。业务的粒度划分</p><p>得越细，微服务的数量就越多，这时需要更稳定的部署机制。随着技术的发展，尤其是 Docker容器技术的推进，以及自动化部署工具（例如开源组件 Jenkins）的出现，自动化部署变得越来越简单。自动化部署可以提高部署的效率，减少人为的控制，部署过程中出现错误的概率降低，部署过程的每一步自动化，提高软件的质量。构建一个自动化部署的系统，虽然在前期需要开发人员或者运维人员的学习，但是对于整个软件系统来说是一个全新的概念。在软件系统的整个生命周期之中，每一步是由程序控制的，而不是人为控制，软件的质量提高到了一个新的高度。随着 DevOps 这种全新概念的推进，自动化部署必然会成为微服务部署 的一种方式</p></blockquote><h4 id="5-服务集中化管理"><a href="#5-服务集中化管理" class="headerlink" title="5.服务集中化管理"></a>5.<strong>服务集中化管理</strong></h4><blockquote><p>微服务系统是按业务单元来划分服务的，服务数量越多，管理起来就越复杂，因此微服务必须使用集中化管理。目前流行的微服务框架中，例如 Spring Cloud 采用 Eureka 来注册服务和发现服务，另外， Zookeeper、 Consul 等都是非常优秀的服务集中化管理框架</p></blockquote><h4 id="6-分布式架构"><a href="#6-分布式架构" class="headerlink" title="6.分布式架构"></a>6.<strong>分布式架构</strong></h4><blockquote><p>分布式系统是集群部署的，由很多计算机相互协作共同构成，它能够处理海量的用户请求。当分布式系统对外提供服务时，用户是毫不知情的，还以为是一台服务器在提供服务。分布式系统的复杂任务通过计算机之间的相互协作来完成，当然简单的任务也可以在一台计算机上完</p><p>成。分布式系统通过网络协议来通信，所以分布式系统在空间上没有任何限制，即分布式服务器可以部署不同的机房和不同的地区。微服务架构是分布式架构，分布式系统比单体系统更加复杂，主要体现在服务的独立性和服务相互调用的可靠性，以及分布式事务、全局锁、全局 Id</p><p>等，而单体系统不需要考虑这些复杂性。另外，分布式系统的应用都是集群化部署，会给数据一致性带来困难。分布式系统中的服务通信依赖于网络，网络不好，必然会对分布式系统带来很大的影响。在分布式系统中，服务之间相互依赖，如果一个服务出现了故障或者是网络延迟，在高并发的情况下，会导致线程阻塞，在很短的时间内该服务的线程资源会消耗殆尽，最终使得该服务不可用。由于服务的相互依赖，可能会导致整个系统的不可用，这就是“雪崩效应”。为了防止此类事件的发生，分布式系统必然要采取相应的措施，例如“熔断机制”。</p></blockquote><h4 id="7-熔断机制-Hystrix"><a href="#7-熔断机制-Hystrix" class="headerlink" title="7.熔断机制 Hystrix"></a>7.<strong>熔断机制</strong> <strong>Hystrix</strong></h4><blockquote><p>为了防止“雪崩效应”事件的发生，分布式系统采用了熔断机制。在用 SpringCloud 构建的微服务系统中，采用了熔断器（即 Hystrix 令 组件的 C ircuit Breaker）去做熔断。例如在微服务系统中，有 a、 b、 c、 d、 e、如果此时服务 b 出现故障或者网络延迟，服务 b 会出现大量的线程阻塞，有可能在很短的时间内线程资源就被消耗完了，导致服务 b 的不可用。如果服务 b 为较 底层的服务，会影响到其他服务，导致其他服务会一直等待服务 b 的处理。如果服务 b 迟迟不处理，大量的网络请求不仅仅堆积在服务 b，而且会堆积到依赖于服务 b 的其他服务。而因服务 b 出现故障影响的服务，也会影响到依赖于因服务 b 出现故障影响的服务的其他服务，从而由 b 开始，影响到整个系统，导致整个系统的不可用。这是一件非常可怕的事，因为服务器运营商的不可靠，必然会导致服务的不可靠，而网络服务商的不可靠性，也会导致服务的不可靠。在高并发的场景下，稍微有点不可靠，由于故障的传播性，会导致大量的服务不可用，甚至导致整个系统崩溃。为了解决这一难题，微服务架构引入了熔断机制。当服务 b 出现故障，请求失败次数超过设定的阀值之后，服务 b 就会开启熔断器，之后服务 b 不进行任何的业务逻辑操作，执行快速失败，直接返回请求失败的信息。其他依赖于 b 的服务就不会因为得不到响应而线程阻塞，这时除了服务 b 和依赖于服务 b 的部分功能不可用外，其他功能正常.</p></blockquote><h3 id="6-微服务的优势"><a href="#6-微服务的优势" class="headerlink" title="6.微服务的优势"></a>6.微服务的优势</h3><blockquote><p>相对于单体服务来说，微服务具有很多的优势，主要体现在以下方面。</p><ol><li><p>将一个复杂的业务分解成若干小的业务，每个业务拆分成一个服务，服务的边界明确，将复杂的问题简单化。服务按照业务拆分，编码也是按照业务来拆分，代码的可读性和可扩展性增加。新人加入团队，不需要了解所有的业务代码，只需要了解他所接管的服务的代码，新人学习时间成本减少。</p></li><li><p>由于微服务系统是分布式系统，服务与服务之间没有任何的祸合。随着业务的增加，可以根据业务再拆分服务，具有极强的横向扩展能力。随着应用的用户量的增加，井发量增加，可以将微服务集群化部署，从而增加系统的负载能力。简而言之，微服务系统的微服务单元具有很强的横向扩展能力。</p></li><li><p>服务与服务之问通过 HTTP 网络通信协议来通信，单个微服务内部高度祸合，服务与服务之间完全独立，无调合。这使得微服务可以采用任何的开发语言和技术来实现。开发人员不再被强迫使用公司以前的技术或者已经过时的技术，而是可以自由选择最适合业务场景的或者最适合自己的开发语言和技术，提高开发效率、降低开发成本。</p></li><li><p>如果是一个单体的应用，由于业务的复杂性、代码的祸合性，以及可能存在的历史问题。在重写一个单体应用时，要求重写的应用的人员了解所有的业务，所以重写单体应用是非常困难的，并且重写风险也较高。如果是微服务系统，由于微服务系统是按照业务的进行拆分的，并且有坚实的服务边界，所以重写某个服务就相当于重写某一个业务的代码，非常简单。</p></li><li><p>微服务的每个服务单元都是独立部署的，即独立运行在某个进程里。微服务的修改和部署对其他服务没有影响。试想，假设一个应用只有一个简单的修改，如果是单体架构，需要测试和部署整个应用；而如果采用微服务架构，只需要测试并部署被修改的那个服务，这就大大减少了测试和部署的时间。</p></li><li><p>微服务在 CAP 理论中采用的是 AP 架构，即具有高可用和分区容错的特点。高可用主要体现在系统 7 x 24 小时不间断的服务，它要求系统有大量的服务器集群，从而提高了系统的负载能力。另外，分区容错也使得系统更加健壮</p></li></ol></blockquote><h3 id="7-微服务的不足"><a href="#7-微服务的不足" class="headerlink" title="7.微服务的不足"></a>7.微服务的不足</h3><blockquote><p>凡事都有两面性，微服务也不例外，微服务相对于单体应用来说具有很多的优势，当然也有它</p><p>的不足，主要体现在如下方面：</p><p>1.微服务的复杂度</p><p>2.分布式事务问题</p><p>3.服务的划分（按照功能划分 还是按照组件来划分呢） 分工</p><p>4.服务的部署（不用自动化部署 自动化部署）</p></blockquote><h3 id="8-微服务架构的设计原则"><a href="#8-微服务架构的设计原则" class="headerlink" title="8.微服务架构的设计原则"></a>8.微服务架构的设计原则</h3><blockquote><p><strong>开闭原则 单一原则</strong> 6 大设计原则 架构设计和代码设计思路一样的</p><p>软件设计就好比建筑设计。 Architect 这个词在建筑学中是“建筑师”的意思，而在软件领域里则是“架构师”的意思，可见它们确实有相似之处。无论是建筑师还是架构师，他们都希望把作品设计出自己的特色，并且更愿意把创造出的东西被称为艺术品。然而现实却是，建筑设计和软件设计有非常大的区别。建筑师设计并建造出来的建筑往往很难有变化，除非拆了重建。而架构师设计出来的软件系统，为了满足产品的业务发展，在它的整个生命周期中，每一个版本都有很多的变化。软件设计每一个版本都在变化，所以软件设计应该是渐进式发展。软件从一开始就不应该被设计成微服务架构，微服务架构固然有优势，但是它需要更多的资源，包括服务器资源、技术人员等。追求大公司所带来的技术解决方案，刻意地追求某个新技术，企图使用技术解决所有的问题，这些都是软件设计的误区。技术应该是随着业务的发展而发展的，任何脱离业务的技术是不能产生价值的。在初创公司，业务很单一时，如果在 LAMP 单体构架够用的情况下，就应该用 LAMP，因为它开发速度快，性价比高。随着业务的发展，用户量的增加，可以考虑将数据库读写分离、加缓存、加复杂均衡服务器、将应用程序集群化部署等。如果业务还在不断发展，这时可以考虑使用分布式系统，例如微服务架构的系统。不管使用什么样的架构，驱动架构的发展一定是业务的发展，只有当前架构不再适合当前业务的发展，才考虑更换架构。在微服务架构中，有三大难题，那就是服务故障的传播性熔断服务的划分和分布式事务。在微服务设计时，一定要考虑清楚这三个难题，从而选择合适的框架。目前比较流行的微服务框架有 Spring 社区的 SpringCloud、 Google 公司的 Kubemetes 等。不管使用哪一种框架或者工具，都需要考虑这三大难题。为了解决服务故障的传播性，一般的微服务框架</p><p>都有熔断机制组件。另外，服务的划分没有具体的划分方法，一般来说根据业务来划分服务，领域驱动设计具有指导作用。最后，分布式事务一般的解决办法就是两阶段提交或者三阶段提交，不管使用哪一种都存在事务失败，导致数据不一致的情况，关键时刻还得人工去恢复数据。</p><p>总之，微服务的设计一定是渐进式的，并且是随着业务的发展而发展的。</p></blockquote><h3 id="9-SpringCloud-管家-注重服务的管理）"><a href="#9-SpringCloud-管家-注重服务的管理）" class="headerlink" title="9.SpringCloud (管家 注重服务的管理）"></a>9.SpringCloud (管家 注重服务的管理）</h3><blockquote><p>Spring Cloud 作为 <strong>Java</strong> 语言的<strong>微服务框架</strong>，它依赖于 <strong>Spring Boot</strong>，有快速开发、持续交付和容易部署等特点。 Spring Cloud 的<strong>组件</strong>非常多，涉及微服务的方方面面，井在开源社区 Spring 和 <strong>Netflix</strong>、 Pivotal 两大公司的推动下越来越完善，如今 <strong>alibaba</strong> 也加入到其中。 <strong>spring</strong> <strong>官方</strong> <strong>netflix alibaba</strong>Spring Cloud 在开发部署上继承了 Spring Boot 的一些优点，提高其在开发和部署上的效率。 <strong>Spring Cloud</strong> <strong>的首要目标就是通过提供一系列开发组件和框架，帮助开发者迅速搭建</strong>一个分布式的微服务系统。 Spring Cloud 是通过包装其他技术框架来实现的，例如包装开源的 Netflix oss 组件，实现了一套通过基于注解、 Java 配置和基于模版开发的微服务框架。 Spring Cloud 提供了开发分布式微服务系统的一些常用组件，例如服务注册和发现、配置中心、熔断器、远程调用，智能路由、微代理、控制总线、全局锁、分布式会话等</p></blockquote><h3 id="10-SpringCloud-版本对应关系"><a href="#10-SpringCloud-版本对应关系" class="headerlink" title="10.SpringCloud 版本对应关系"></a>10.<strong>SpringCloud</strong> <strong>版本对应关系</strong></h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230114131207992.png" alt="image-20230114131207992"></p><h3 id="11-SpringCloud-常用组件表"><a href="#11-SpringCloud-常用组件表" class="headerlink" title="11.SpringCloud 常用组件表"></a>11.<strong>SpringCloud</strong> <strong>常用组件表</strong></h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230114131251999.png" alt="image-20230114131251999"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230114131301652.png" alt="image-20230114131301652"></p><h3 id="12-微服务最终架构"><a href="#12-微服务最终架构" class="headerlink" title="12.微服务最终架构"></a>12.微服务最终架构</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230114131334401.png" alt="image-20230114131334401"></p><h2 id="2-Eureka"><a href="#2-Eureka" class="headerlink" title="2.Eureka"></a>2.<strong>Eureka</strong></h2><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><blockquote><p>注册发现中心</p><p>Eureka 来源于古希腊词汇，意为“发现了”。在软件领域， Eureka 是 <strong>Netflix</strong> 在线影片公司开源的一个<strong>服务注册与发现的组件</strong>，和其他 Netflix 公司的服务组件（例如负载均衡、熔断器、网关等） 一起，被 Spring Cloud 社区整合为 Spring Cloud Netflix 模块。Eureka 是 Netflix 贡献给 Spring Cloud 的一个框架！Netflix 给 Spring Cloud 贡献了很多框架，后面我们会学习到！</p></blockquote><h3 id="2-Eureka-和-Zookeeper-的区别"><a href="#2-Eureka-和-Zookeeper-的区别" class="headerlink" title="2.Eureka 和 Zookeeper 的区别"></a>2.Eureka <strong>和</strong> <strong>Zookeeper</strong> <strong>的区别</strong></h3><h4 id="1-CAP-原则"><a href="#1-CAP-原则" class="headerlink" title="1.CAP 原则"></a>1.<strong>CAP</strong> <strong>原则</strong></h4><blockquote><p>在分布式 微服务里面 CAP 定理</p><p>问：为什么 zookeeper 不适合做注册中心？</p><p>CAP 原则又称 CAP 定理，指的是在一个分布式系统中，</p><p>一致性（</p><p>Consistency）</p><p>可用性（</p><p>Availability）</p><p>分区容错性（</p><p>Partition tolerance）（这个特性是不可避免的）</p><p>CAP 原则指的是，这三个要素最多只能同时实现两点，不可能三者兼顾。</p></blockquote><h4 id="2-分布式特征"><a href="#2-分布式特征" class="headerlink" title="2.分布式特征"></a>2.<strong>分布式特征</strong></h4><blockquote><p><strong>C :</strong> 数据的一致性 （A,B,C 里面的数据是一致的）</p><p>Zk 注重数据的一致性。</p><p>Eureka 不是很注重数据的一致性！</p><p><strong>A:</strong> 服务的可用性（若 zk 集群里面的 master 挂了怎么办）Paxos（多数派）</p><p>在 zk 里面，若主机挂了，则 zk 集群整体不对外提供服务了，需要选一个新的出来（</p><p>120s左右）才能继续对外提供服务！</p><p>Eureka 注重服务的可用性，当 Eureka 集群只有一台活着，它就能对外提供服务</p><p><strong>P</strong>：区的容错性（在集群里面的机器，因为网络原因，机房的原因，可能导致数据不会里面</p><p>同步），它在分布式必须需要实现的特性！</p><p><strong>Zookeeper</strong> 注重数据的一致性，CP zk(注册中心，配置文件中心，协调中心*)</p><p><strong>Eureka</strong> <strong>注重服务的可用性</strong> <strong>AP</strong> </p><p><strong>eureka</strong> <strong>（注册中心）</strong></p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230114150443549.png" alt="image-20230114150443549"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230114150605291.png" alt="image-20230114150605291"></p><h3 id="3-Eureka快速入门"><a href="#3-Eureka快速入门" class="headerlink" title="3.Eureka快速入门"></a>3.<strong>Eureka</strong>快速入门</h3><h4 id="1-创建Eureka-server"><a href="#1-创建Eureka-server" class="headerlink" title="1.创建Eureka-server"></a>1.创建<strong>Eureka-server</strong></h4><h5 id="1-创建项目并选择依赖"><a href="#1-创建项目并选择依赖" class="headerlink" title="1.创建项目并选择依赖"></a>1.创建项目并选择依赖</h5><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230114195233502.png" alt="image-20230114195233502"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230114195247262.png" alt="image-20230114195247262"></p><h5 id="2-分析pom-xml配置文件"><a href="#2-分析pom-xml配置文件" class="headerlink" title="2.分析pom.xml配置文件"></a>2.分析pom.xml配置文件</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;<br>&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;<br>         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;<br>    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;<br>    &lt;parent&gt;<br>        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;<br>       &lt;!-- 注意选择boot的版本   --&gt;<br>        &lt;version&gt;2.3.12.RELEASE&lt;/version&gt;<br>        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;<br>    &lt;/parent&gt;<br>    &lt;groupId&gt;com.powernode&lt;/groupId&gt;<br>    &lt;artifactId&gt;eureka-serve&lt;/artifactId&gt;<br>    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;<br>    &lt;name&gt;eureka-serve&lt;/name&gt;<br>    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;<br><br>    &lt;properties&gt;<br>        &lt;java.version&gt;1.8&lt;/java.version&gt;<br>             &lt;!-- cloud的版本和boot的版本要对应   --&gt;<br>        &lt;spring-cloud.version&gt;Hoxton.SR12&lt;/spring-cloud.version&gt;<br>    &lt;/properties&gt;<br>            &lt;!-- eureka-server 服务端的依赖 --&gt;<br>    &lt;dependencies&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;<br>            &lt;version&gt;2.2.3.RELEASE&lt;/version&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;<br>            &lt;optional&gt;true&lt;/optional&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;<br>            &lt;artifactId&gt;lombok&lt;/artifactId&gt;<br>            &lt;optional&gt;true&lt;/optional&gt;<br>        &lt;/dependency&gt;<br>        &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;<br>            &lt;scope&gt;test&lt;/scope&gt;<br>        &lt;/dependency&gt;<br>    &lt;/dependencies&gt;<br>    &lt;dependencyManagement&gt;<br>        &lt;dependencies&gt;<br>            &lt;dependency&gt;<br>                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;<br>                &lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;<br>                &lt;type&gt;pom&lt;/type&gt;<br>                &lt;scope&gt;import&lt;/scope&gt;<br>            &lt;/dependency&gt;<br>        &lt;/dependencies&gt;<br>    &lt;/dependencyManagement&gt;<br>    &lt;build&gt;<br>        &lt;plugins&gt;<br>            &lt;plugin&gt;<br>                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;<br>                &lt;configuration&gt;<br>                    &lt;excludes&gt;<br>                        &lt;exclude&gt;<br>                            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;<br>                            &lt;artifactId&gt;lombok&lt;/artifactId&gt;<br>                        &lt;/exclude&gt;<br>                    &lt;/excludes&gt;<br>                &lt;/configuration&gt;<br>            &lt;/plugin&gt;<br>        &lt;/plugins&gt;<br>    &lt;/build&gt;<br>&lt;/project&gt;<br><br></code></pre></td></tr></table></figure><h5 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3.修改配置文件"></a>3.修改配置文件</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8761</span>   <span class="hljs-comment">#eureka的默认端口</span><br><span class="hljs-comment"># 应用的名称</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">eureka-serve</span>   <span class="hljs-comment">#应用名称 服务的名称</span><br></code></pre></td></tr></table></figure><h5 id="4-修改启动类并开启注解"><a href="#4-修改启动类并开启注解" class="headerlink" title="4.修改启动类并开启注解"></a>4.修改启动类并开启注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-comment">//开启EurekaServer服务</span><br><span class="hljs-meta">@EnableEurekaServer</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EurekaServeApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(EurekaServeApplication.class, args);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="5-访问测试"><a href="#5-访问测试" class="headerlink" title="5.访问测试"></a>5.访问测试</h5><blockquote><p><a href="http://localhost:8761/">http://localhost:8761</a></p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230114200859688.png" alt="image-20230114200859688"></p><h5 id="6-端口及配置文件分析"><a href="#6-端口及配置文件分析" class="headerlink" title="6.端口及配置文件分析"></a>6.端口及配置文件分析</h5><blockquote><p>Eureka-Server不仅提供让别人注册的功能，它也能注册到别人里面，自己注册自己所以，在启动项目时，默认会注册自己，我们也可以关掉这个功能。</p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230114201015053.png" alt="image-20230114201015053"></p><h4 id="2-创建Eureka-client"><a href="#2-创建Eureka-client" class="headerlink" title="2.创建Eureka-client"></a>2.创建Eureka-client</h4><h5 id="1-创建项目并选择依赖-1"><a href="#1-创建项目并选择依赖-1" class="headerlink" title="1.创建项目并选择依赖"></a>1.创建项目并选择依赖</h5><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230114201434383.png" alt="image-20230114201434383"></p><h5 id="2-分析pom-xml配置文件-1"><a href="#2-分析pom-xml配置文件-1" class="headerlink" title="2.分析pom.xml配置文件"></a>2.分析pom.xml配置文件</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">   &lt;!--    boot版本    --&gt;<br>    &lt;parent&gt;<br>        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;<br>        &lt;version&gt;2.3.12.RELEASE&lt;/version&gt;<br>        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;<br>    &lt;/parent&gt;<br>&lt;!--   cloud版本     --&gt;<br>   &lt;properties&gt;<br>        &lt;java.version&gt;1.8&lt;/java.version&gt;<br>        &lt;spring-cloud.version&gt;Hoxton.SR12&lt;/spring-cloud.version&gt;<br>    &lt;/properties&gt;<br>&lt;!--  eureka-client客户端依赖      --&gt;<br>      &lt;dependency&gt;<br>            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;<br>            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;<br>            &lt;version&gt;2.2.3.RELEASE&lt;/version&gt;<br>        &lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h5 id="3-修改配置文件-1"><a href="#3-修改配置文件-1" class="headerlink" title="3.修改配置文件"></a>3.修改配置文件</h5><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span>  <span class="hljs-comment">#客户端没有要求</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">eureka-client-a</span><br><span class="hljs-comment">#    需要注册 注册的含义是什么?就是将自己的一些信息发送过去</span><br><span class="hljs-comment">#1.什么信息(ip 端口 系统已经好了)  2.发到哪里(指定一个地址 )</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-comment">#这个就是发送到服务端的地址  </span><br>      <span class="hljs-attr">defaultzone:</span> <span class="hljs-string">http://localhost:8761/eureka</span>  <span class="hljs-comment">#eureka服务端和客户端的交互地址</span><br></code></pre></td></tr></table></figure><h5 id="4-修改启动类并开启注解-1"><a href="#4-修改启动类并开启注解-1" class="headerlink" title="4.修改启动类并开启注解"></a>4.修改启动类并开启注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-comment">//开启客户端的注解</span><br><span class="hljs-meta">@EnableEurekaClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EurekaClientAApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(EurekaClientAApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="5-访问测试-1"><a href="#5-访问测试-1" class="headerlink" title="5.访问测试"></a>5.访问测试</h5><blockquote><p><a href="http://localhost:8761/">http://localhost:8761</a></p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230114202240511.png" alt="image-20230114202240511"></p><h5 id="6-再一次创建一个客户端B"><a href="#6-再一次创建一个客户端B" class="headerlink" title="6.再一次创建一个客户端B"></a>6.再一次创建一个客户端B</h5><blockquote><p>如 client-a 一样，这里就不贴多余截图了，<strong>注意端口和服务名以及启动类上的注解</strong>，在测试</p><p>查看是否注册上去，在 eureka 里面是通过 spring.application.name 来区分服务的</p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230114203422872.png" alt="image-20230114203422872"></p><h5 id="7-同一个服务（客户端）启动多台"><a href="#7-同一个服务（客户端）启动多台" class="headerlink" title="7.同一个服务（客户端）启动多台"></a>7.<strong>同一个服务（客户端）启动多台</strong></h5><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230114203451126.png" alt="image-20230114203451126"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230114203502540.png" alt="image-20230114203502540"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230114203521474.png" alt="image-20230114203521474"></p><h5 id="8-注册中心的状态认识"><a href="#8-注册中心的状态认识" class="headerlink" title="8.注册中心的状态认识"></a>8.<strong>注册中心的状态认识</strong></h5><blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230114203600151.png" alt="image-20230114203600151"></p></blockquote><h5 id="9-服务的实例名称"><a href="#9-服务的实例名称" class="headerlink" title="9.服务的实例名称"></a>9.<strong>服务的实例名称</strong></h5><blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230114203632511.png" alt="image-20230114203632511"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230114203640765.png" alt="image-20230114203640765"></p></blockquote><h3 id="4-常用配置文件设置（serve和client）"><a href="#4-常用配置文件设置（serve和client）" class="headerlink" title="4.常用配置文件设置（serve和client）"></a>4.<strong>常用配置文件设置</strong>（serve和client）</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230114211907860.png" alt="image-20230114211907860"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230114211917182.png" alt="image-20230114211917182"></p><h4 id="1-server中-服务端-常用的配置"><a href="#1-server中-服务端-常用的配置" class="headerlink" title="1.server中(服务端)常用的配置"></a>1.server中(服务端)常用的配置</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8761</span>   <span class="hljs-comment">#eureka的默认端口</span><br><span class="hljs-comment"># 应用的名称</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">eureka-serve</span>   <span class="hljs-comment">#应用名称</span><br><span class="hljs-comment">#eureka的配置分为三类server client  实例类 eureka-serve既是客户端又是服务端</span><br><span class="hljs-comment">#serve端一般不写client 但是需要写 实例类() 它本身是一实例</span><br><span class="hljs-attr">eureka:</span><br><span class="hljs-comment">#  服务端配置</span><br>  <span class="hljs-attr">server:</span><br>    <span class="hljs-attr">eviction-interval-timer-in-ms:</span> <span class="hljs-number">30000</span> <span class="hljs-comment">#清除无效节点的频率(毫秒)--定期删除</span><br>    <span class="hljs-attr">enable-self-preservation:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment">#server 的自我保护机制，避免因为网络原因造成误剔除,生产环境建议打开</span><br>    <span class="hljs-attr">renewal-percent-threshold:</span> <span class="hljs-number">0.85</span> <span class="hljs-comment">#85%，如果在一个机房的 client 端，15 分钟内有 85%的 client 没有续约，那么则可能是网络原因，认为服务实例没有问题，不会剔除他们，宁可放过一万，不可错杀一个，确保高可用</span><br><span class="hljs-comment">#  实例的配置</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">localhsot</span>  <span class="hljs-comment">#本机的名称</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;eureka.instance.hostname&#125;:$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span> <span class="hljs-comment">#主机名称:应用名称:端口号  使用stl表达式取值</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 服务列表以 ip 的形式展示具体的服务信息</span><br>    <span class="hljs-attr">lease-renewal-interval-in-seconds:</span> <span class="hljs-number">10</span> <span class="hljs-comment"># 表示 eureka client 发送心跳给 server 端的频率</span><br>    <span class="hljs-attr">lease-expiration-duration-in-seconds:</span> <span class="hljs-number">20</span> <span class="hljs-comment">#表示 eureka server 至上一次收到 client 的心跳之后，等待下一次心跳的超时时间，在这个时间内若没收到下一次心跳，则将移除该实例</span><br><br></code></pre></td></tr></table></figure><h4 id="2-client-客户端-常用配置"><a href="#2-client-客户端-常用配置" class="headerlink" title="2.client(客户端)常用配置"></a>2.client(客户端)常用配置</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span>  <span class="hljs-comment">#客户端没有要求</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">eureka-client-a</span><br><span class="hljs-comment">#    需要注册 注册的含义是什么?就是将自己的一些信息发送过去</span><br><span class="hljs-comment">#1.什么信息(ip 端口 系统已经好了)  2.发到哪里(指定一个地址 )</span><br><span class="hljs-attr">eureka:</span><br><span class="hljs-comment">#  客户端配置</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-comment">#eureka 服务端和客户端的交互地址,集群用,隔开</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultzone:</span> <span class="hljs-string">http://localhost:8761/eureka</span> <span class="hljs-comment">#eureka服务端和客户端的交互地址</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span>   <span class="hljs-comment">#注册自己 也可以不注册</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#是否拉取服务列表到本地</span><br>    <span class="hljs-attr">registry-fetch-interval-seconds:</span> <span class="hljs-number">10</span> <span class="hljs-comment"># 表示 eureka-client 间隔多久去拉取服务注册信息  缓解脏读问题 但是性能就下降了</span><br><span class="hljs-comment">#  实力端配置</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">localhost</span> <span class="hljs-comment">#主机的地址 也可以写ip  最好写ip地址</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;eureka.instance.hostname&#125;:$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span> <span class="hljs-comment">#主机名称:应用名称:端口号  使用stl表达式取值</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment">#显示ip</span><br>    <span class="hljs-attr">lease-expiration-duration-in-seconds:</span> <span class="hljs-number">20</span>  <span class="hljs-comment">#表示 eureka server 至上一次收到 client 的心跳之后，等待下一次心跳的超时时间，在这个时间内若没收到下一次心跳，则将移除该实例</span><br>    <span class="hljs-attr">lease-renewal-interval-in-seconds:</span> <span class="hljs-number">10</span> <span class="hljs-comment"># 表示 eureka client 发送心跳给 server 端的频率</span><br></code></pre></td></tr></table></figure><h3 id="5-构建高可用的-Eureka-Server-集群"><a href="#5-构建高可用的-Eureka-Server-集群" class="headerlink" title="5.构建高可用的 Eureka-Server 集群"></a>5.<strong>构建高可用的</strong> <strong>Eureka-Server</strong> <strong>集群</strong></h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230115122945801.png" alt="image-20230115122945801"></p><h4 id="1-修改eureka-service配置文件"><a href="#1-修改eureka-service配置文件" class="headerlink" title="1.修改eureka-service配置文件"></a>1.修改eureka-service配置文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8761</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">erueka-serve</span><br>  <span class="hljs-comment">#  服务端配置</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-comment">#eureka 服务端和客户端的交互地址,集群用,隔开</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultzone:</span> <span class="hljs-string">http://localhost:8762/eureka,</span> <span class="hljs-string">http://localhost:8763/eureka</span> <span class="hljs-comment">#eureka服务端和客户端的交互地址 这里将8761注册到62和63中</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span>   <span class="hljs-comment">#注册自己 也可以不注册</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#是否拉取服务列表到本地</span><br>    <span class="hljs-attr">registry-fetch-interval-seconds:</span> <span class="hljs-number">10</span> <span class="hljs-comment"># 表示 eureka-client 间隔多久去拉取服务注册信息  缓解脏读问题 但是性能就下降了</span><br>  <span class="hljs-comment">#  实例的配置</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">localhsot</span>  <span class="hljs-comment">#本机的名称</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;eureka.instance.hostname&#125;:$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span> <span class="hljs-comment">#主机名称:应用名称:端口号  使用stl表达式取值</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 服务列表以 ip 的形式展示具体的服务信息</span><br>    <span class="hljs-attr">lease-renewal-interval-in-seconds:</span> <span class="hljs-number">10</span> <span class="hljs-comment"># 表示 eureka client 发送心跳给 server 端的频率</span><br>    <span class="hljs-attr">lease-expiration-duration-in-seconds:</span> <span class="hljs-number">20</span> <span class="hljs-comment">#表示 eureka server 至上一次收到 client 的心跳之后，等待下一次心跳的超时时间，在这个时间内若没收到下一次心跳，则将移除该实例</span><br></code></pre></td></tr></table></figure><h4 id="2-新建eureka-service-a服务端并修改配置文件"><a href="#2-新建eureka-service-a服务端并修改配置文件" class="headerlink" title="2.新建eureka-service-a服务端并修改配置文件"></a>2.新建eureka-service-a服务端并修改配置文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#集群配置</span><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8762</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">erueka-serve</span><br>  <span class="hljs-comment">#  服务端配置</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-comment">#eureka 服务端和客户端的交互地址,集群用,隔开</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultzone:</span> <span class="hljs-string">http://localhost:8761/eureka,http://localhost:8763/eureka</span> <span class="hljs-comment">#eureka服务端和客户端的交互地址 这里将8762注册到61和63中</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span>   <span class="hljs-comment">#注册自己 也可以不注册</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#是否拉取服务列表到本地</span><br>    <span class="hljs-attr">registry-fetch-interval-seconds:</span> <span class="hljs-number">10</span> <span class="hljs-comment"># 表示 eureka-client 间隔多久去拉取服务注册信息  缓解脏读问题 但是性能就下降了</span><br><br>  <span class="hljs-comment">#  实例的配置</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">hostname:</span> <span class="hljs-string">localhsot</span>  <span class="hljs-comment">#本机的名称</span><br>    <span class="hljs-attr">instance-id:</span> <span class="hljs-string">$&#123;eureka.instance.hostname&#125;:$&#123;spring.application.name&#125;:$&#123;server.port&#125;</span> <span class="hljs-comment">#主机名称:应用名称:端口号  使用stl表达式取值</span><br>    <span class="hljs-attr">prefer-ip-address:</span> <span class="hljs-literal">true</span> <span class="hljs-comment"># 服务列表以 ip 的形式展示具体的服务信息</span><br>    <span class="hljs-attr">lease-renewal-interval-in-seconds:</span> <span class="hljs-number">10</span> <span class="hljs-comment"># 表示 eureka client 发送心跳给 server 端的频率</span><br>    <span class="hljs-attr">lease-expiration-duration-in-seconds:</span> <span class="hljs-number">20</span> <span class="hljs-comment">#表示 eureka server 至上一次收到 client 的心跳之后，等待下一次心跳的超时时间，在这个时间内若没收到下一次心跳，则将移除该实例</span><br></code></pre></td></tr></table></figure><h4 id="3-新建eureka-service-b服务端修改配置文件"><a href="#3-新建eureka-service-b服务端修改配置文件" class="headerlink" title="3.新建eureka-service-b服务端修改配置文件"></a>3.新建eureka-service-b服务端修改配置文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8763</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">erueka-serve</span><br>  <span class="hljs-comment">#  服务端配置</span><br><span class="hljs-attr">eureka:</span><br>  <span class="hljs-attr">client:</span><br>    <span class="hljs-comment">#eureka 服务端和客户端的交互地址,集群用,隔开</span><br>    <span class="hljs-attr">service-url:</span><br>      <span class="hljs-attr">defaultzone:</span> <span class="hljs-string">http://localhost:8761/eureka,http://localhost:8762/eureka</span> <span class="hljs-comment">#eureka服务端和客户端的交互地址 这里将8763注册到61和62中</span><br>    <span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span>   <span class="hljs-comment">#注册自己 也可以不注册</span><br>    <span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#是否拉取服务列表到本地</span><br>    <span class="hljs-attr">registry-fetch-interval-seconds:</span> <span class="hljs-number">10</span> <span class="hljs-comment"># 表示 eureka-client 间隔多久去拉取服务注册信息  缓解脏读问题 但是性能就下降了</span><br><br>  <span class="hljs-comment">#  实例的配置</span><br>  <span class="hljs-attr">instance:</span><br>    <span class="hljs-attr">lease-expiration-duration-in-seconds:</span> <span class="hljs-number">20</span> <span class="hljs-comment">#表示 eureka server 至上一次收到 client 的心跳之后，等待下一次心跳的超时时间，在这个时间内若没收到下一次心跳，则将移除该实例</span><br><br></code></pre></td></tr></table></figure><h4 id="4-构建测试"><a href="#4-构建测试" class="headerlink" title="4.构建测试"></a>4.构建测试</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230115141756698.png" alt="image-20230115141756698"></p><h4 id="5-修改配置"><a href="#5-修改配置" class="headerlink" title="5.修改配置"></a>5.修改配置</h4><blockquote><p>发现并没有出现集群信息，只是同一个服务 server 启动了多台 没有数据交互 不是真正意</p><p>义上的集群</p><p><a href="http://localhost:8761/eureka/,http://localhost:8762/eureka/">http://localhost:8761/eureka/,http://localhost:8762/eureka/</a></p><p>这样写，eureka 认为只有一个机器，就是 localhost</p><p>所以这里面不能写成一样</p><p>修改 hosts 文件： </p><p>C:\Windows\System32\drivers\etc</p><p>如果你修改了 hosts 文件 发现没有生效 记得在 cmd 里面刷新一下</p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230115143542908.png" alt="image-20230115143542908"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230115143628998.png" alt="image-20230115143628998"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230115143646469.png" alt="image-20230115143646469"></p><blockquote><p>相当于只修改了defaultzone: <a href="http://localhost:8761/eureka/,http://localhost:8762/eureka/">http://localhost:8761/eureka/,http://localhost:8762/eureka/</a> 里面的local</p><p>改为 per1,per2 ,per3 改为对应的即可</p></blockquote><h4 id="6-最终优化配置文件-每个配置都需要修改"><a href="#6-最终优化配置文件-每个配置都需要修改" class="headerlink" title="6.最终优化配置文件(每个配置都需要修改)"></a>6.最终优化配置文件(每个配置都需要修改)</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br><span class="hljs-attr">port:</span> <span class="hljs-number">8761</span> <span class="hljs-comment">#不需要修改 defaultZone 了,修改端口起三个服务</span><br><span class="hljs-attr">spring:</span><br><span class="hljs-attr">application:</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">eureka-server</span> <span class="hljs-comment">#服务名称</span><br><span class="hljs-attr">eureka:</span><br><span class="hljs-attr">client:</span><br><span class="hljs-attr">fetch-registry:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#是否拉取服务列表</span><br><span class="hljs-attr">register-with-eureka:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#是否注册自己（集群需要注册自己和拉取服务）</span><br><span class="hljs-attr">service-url:</span><br><span class="hljs-attr">defaultZone:</span> <span class="hljs-string">http://peer1:8761/eureka/,http://peer2:8762/eureka/,http://peer3:8763/eureka/</span><br><span class="hljs-attr">server:</span><br><span class="hljs-attr">eviction-interval-timer-in-ms:</span> <span class="hljs-number">90000</span> <span class="hljs-comment">#清除无效节点的评率(毫秒)</span><br><span class="hljs-attr">instance:</span><br><span class="hljs-attr">lease-expiration-duration-in-seconds:</span> <span class="hljs-number">90</span> <span class="hljs-comment">#server 在等待下一个客户端发送的心跳时间，若在指定时间</span><br><span class="hljs-string">不能收到客户端心跳，则剔除此实例并且禁止流量</span><br></code></pre></td></tr></table></figure><h4 id="7-集群的使用"><a href="#7-集群的使用" class="headerlink" title="7.集群的使用"></a>7.<strong>集群的使用</strong></h4><h5 id="1-修改eureka-client-a配置文件"><a href="#1-修改eureka-client-a配置文件" class="headerlink" title="1.修改eureka-client-a配置文件"></a>1.修改<strong>eureka-client-a</strong>配置文件</h5><blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230115144629227.png" alt="image-20230115144629227"></p><p>相当于这个客户端注册到对应的三个 服务端</p></blockquote><h5 id="2-连接测试"><a href="#2-连接测试" class="headerlink" title="2.连接测试"></a>2.连接测试</h5><blockquote><p>无论哪一台成功 都会成功进行交互</p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230115144859262.png" alt="image-20230115144859262"></p><h5 id="3-宕机测试"><a href="#3-宕机测试" class="headerlink" title="3.宕机测试"></a>3.宕机测试</h5><blockquote><p>Eureka server 的集群里面，没有主机和从机的概念，节点都是对等的，只有集群里面有一</p><p>个集群存活，就能保证服务的可用性。 （主机 （写） 从 （读））</p><p>只要有一台存活，服务就能注册和调用</p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230115144933756.png" alt="image-20230115144933756"></p></blockquote><h4 id="8-分布式数据一致性协议"><a href="#8-分布式数据一致性协议" class="headerlink" title="8.分布式数据一致性协议"></a>8.分布式数据一致性协议</h4><blockquote><p>zk 是 Paxos</p><p>eureka 没有分布式数据一致性的机制 节点都是相同的</p><p>nacos raft</p><p>在有主从模式的集群中 一般都要遵循这样的协议 才可以稳定对外提供服务</p><p>Zookeeper Paxos</p><p>Nacos raft</p><p><a href="http://thesecretlivesofdata.com/raft/">http://thesecretlivesofdata.com/raft/</a></p></blockquote><h3 id="6-Eureka概念的理解"><a href="#6-Eureka概念的理解" class="headerlink" title="6.Eureka概念的理解"></a>6.<strong>Eureka</strong>概念的理解</h3><h4 id="1-服务的注册"><a href="#1-服务的注册" class="headerlink" title="1.服务的注册"></a>1.服务的注册</h4><blockquote><p>当项目启动时（eureka 的客户端），就会向 eureka-server 发送自己的<strong>元数据（原始数据）</strong>（运行的 ip，端口 port，健康的状态监控等，因为使用的是 http&#x2F;ResuFul 请求风格），eureka-server 会在自己内部保留这些元数据(内存中)。（有一个服务列表restful 风格，以 http 动词的请求方式，完成对 url 资源的操作）</p></blockquote><h4 id="2-服务的续约"><a href="#2-服务的续约" class="headerlink" title="2.服务的续约"></a>2.<strong>服务的续约</strong></h4><blockquote><p>项目启动成功了，除了向 eureka-server 注册自己成功，还会<strong>定时</strong>的向 eureka-server 汇报自己，心跳，表示自己还活着。（修改一个时间）</p></blockquote><h4 id="3-服务的下线（主动下线）"><a href="#3-服务的下线（主动下线）" class="headerlink" title="3.服务的下线（主动下线）"></a>3.<strong>服务的下线（主动下线）</strong></h4><blockquote><p>当项目关闭时，会给 eureka-server 报告，说明自己要下机了。</p></blockquote><h4 id="4-服务的剔除（被动下线，主动剔除）"><a href="#4-服务的剔除（被动下线，主动剔除）" class="headerlink" title="4.服务的剔除（被动下线，主动剔除）"></a>4.<strong>服务的剔除（被动下线，主动剔除）</strong></h4><blockquote><p>当项目超过了指定时间没有向 eureka-server 汇报自己，那么 eureka-server 就会认为此节点死掉了，会把它剔除掉，也不会放流量和请求到此节点了。</p></blockquote><h3 id="7-Eureka-源码分析-入门"><a href="#7-Eureka-源码分析-入门" class="headerlink" title="7.Eureka 源码分析(入门)"></a>7.<strong>Eureka</strong> <strong>源码分析(入门)</strong></h3><h4 id="1-Eureka-运作原理的特点"><a href="#1-Eureka-运作原理的特点" class="headerlink" title="1.Eureka 运作原理的特点"></a>1.<strong>Eureka</strong> <strong>运作原理的特点</strong></h4><blockquote><p><strong>Eureka-server</strong> <strong>对外提供的是</strong> <strong>restful</strong> <strong>风格的服务</strong></p><p>以 http 动词的形式对 url 资源进行操作 get post put delete</p><p><strong>http</strong> <strong>服务</strong> <strong>+</strong> <strong>特定的请求方式</strong> <strong>+</strong> <strong>特定的</strong> <strong>url</strong> <strong>地址</strong></p><p>只要利用这些 restful 我们就能对项目实现注册和发现</p><p>只不过，eureka 已经帮我们使用 java 语言写了 client，让我们的项目只要依赖 client 就能实现注册和发现！</p><p>只要你会发起 Http 请求，那你就<strong>有可能</strong>自己实现服务的注册和发现。不管你是什么语言！</p></blockquote><h4 id="2-服务注册的源码分析【重点】"><a href="#2-服务注册的源码分析【重点】" class="headerlink" title="2.服务注册的源码分析【重点】"></a>2.<strong>服务注册的源码分析【重点】</strong></h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230115165440590.png" alt="image-20230115165440590"></p><h2 id="3-restTemplates"><a href="#3-restTemplates" class="headerlink" title="3.restTemplates"></a>3.restTemplates</h2><h3 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1.基本使用"></a>1.基本使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">contextLoads</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//在java代码中请求一个接口 请求一个页面</span><br>        <span class="hljs-type">RestTemplate</span> <span class="hljs-variable">restTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>        <span class="hljs-comment">//请求百度</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://www.baidu.com&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> restTemplate.getForObject(url, String.class);<br>        <span class="hljs-comment">//百度会返回一个页面</span><br>        System.out.println(result);<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="2-访问GET接口"><a href="#2-访问GET接口" class="headerlink" title="2.访问GET接口"></a>2.访问GET接口</h3><blockquote><p>Controller</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Get请求</span><br><span class="hljs-comment"> * @author RenBoQing</span><br><span class="hljs-comment"> * @date 2023/1/15 0015 18:50</span><br><span class="hljs-comment"> * @param name</span><br><span class="hljs-comment"> * @return java.lang.String</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> get请求传递参数 使用name=?参数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@GetMapping(&quot;/testGet&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">get</span><span class="hljs-params">(String name)</span> &#123;<br>    System.out.println(name);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>测试类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *使用Java代码访问get接口</span><br><span class="hljs-comment"> * @author RenBoQing</span><br><span class="hljs-comment"> * @date 2023/1/15 0015 18:47</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testGet</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//构建对象</span><br>    <span class="hljs-type">RestTemplate</span> <span class="hljs-variable">restTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    <span class="hljs-comment">//定义路径</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://127.0.0.1:8080/testGet?name=lishi&quot;</span>;<br>    <span class="hljs-comment">//getForObject 只拿到响应的结果</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> restTemplate.getForObject(url, String.class);<br>    <span class="hljs-comment">//但是getForEntity会拿到请求的所有东西 请求头参数.响应状态码 报文</span><br>    ResponseEntity&lt;String&gt; templateForEntity = restTemplate.getForEntity(url, String.class);<br>    System.out.println(result);<br>    System.out.println(templateForEntity);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-访问Post接口"><a href="#3-访问Post接口" class="headerlink" title="3.访问Post接口"></a>3.访问Post接口</h3><blockquote><p>Post的请求参数有两种 一种是application&#x2F;json 使用  @RequestBody加上对应的参数即可<br>第二种是表单参数 直接使用对应的对象即可</p></blockquote><h4 id="1-类型一-使用json传递参数"><a href="#1-类型一-使用json传递参数" class="headerlink" title="1.类型一-使用json传递参数"></a>1.类型一-使用json传递参数</h4><blockquote><p>Controller</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    *第一种 使用json的参数  接受json的核心是在请求头里面使用</span><br><span class="hljs-comment">    * @author RenBoQing</span><br><span class="hljs-comment">    * @date 2023/1/15 0015 18:56</span><br><span class="hljs-comment">    * @param user</span><br><span class="hljs-comment">    * @return java.lang.String</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-meta">@PostMapping(&quot;/testPost1&quot;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">post1</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span> &#123;<br>       System.out.println(user);<br>       <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><blockquote><p>测试类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *使用Java代码访问Post接口的json参数</span><br><span class="hljs-comment"> * @author RenBoQing</span><br><span class="hljs-comment"> * @date 2023/1/15 0015 19:25</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testPost1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//构建对象</span><br>    <span class="hljs-type">RestTemplate</span> <span class="hljs-variable">restTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    <span class="hljs-comment">//定义路径</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://127.0.0.1:8080/testPost1&quot;</span>;<br>    <span class="hljs-comment">//构建对象 使用json传参</span><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;RenBoQing&quot;</span>, <span class="hljs-number">23</span>, <span class="hljs-number">221.01</span>);<br>    <span class="hljs-comment">// 发送请求  三个参数 第一个是请求的地址 第二个是参数 ，第三个是你想要返回的值的类型</span><br>    <span class="hljs-comment">//发送post而且是json参数因为web里面默认使用jackson他会把你的对象转成json字符串</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> restTemplate.postForObject(url, user, String.class);<br>    System.out.println(result);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-类型二-使用表单传递参数"><a href="#2-类型二-使用表单传递参数" class="headerlink" title="2.类型二-使用表单传递参数"></a>2.类型二-使用表单传递参数</h4><blockquote><p>Controller</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">     *Post请求 第二种表单参数  form action</span><br><span class="hljs-comment">     * 表单接受对象 header content-type = application/x-www-form-urlencoded</span><br><span class="hljs-comment">     * @author RenBoQing</span><br><span class="hljs-comment">     * @date 2023/1/15 0015 18:52</span><br><span class="hljs-comment">     * @param name</span><br><span class="hljs-comment">     * @return java.lang.String</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(&quot;/testPost2&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">post</span><span class="hljs-params">(User user)</span> &#123;<br>        System.out.println(user);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ok&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><blockquote><p>测试类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     *用Java代码访问Post接口的表单参数</span><br><span class="hljs-comment">     * @author RenBoQing</span><br><span class="hljs-comment">     * @date 2023/1/15 0015 19:30</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testPost2</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//构建对象</span><br>        <span class="hljs-type">RestTemplate</span> <span class="hljs-variable">restTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>        <span class="hljs-comment">//定义路径</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://127.0.0.1:8080/testPost2&quot;</span>;<br>        <span class="hljs-comment">// 使用工具类 构建表单参数</span><br>        LinkedMultiValueMap&lt;String, Object&gt; valueMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedMultiValueMap</span>&lt;&gt;();<br>        valueMap.add(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;RenBoQing222&quot;</span>);<br>        valueMap.add(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">50</span>);<br>        valueMap.add(<span class="hljs-string">&quot;prices&quot;</span>, <span class="hljs-number">80000</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">post</span> <span class="hljs-operator">=</span> restTemplate.postForObject(url, valueMap, String.class);<br>        System.out.println(post);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java成长之路</category>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springcloud</tag>
      
      <tag>微服务，注册中心</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day06-1-10-Java-基础学习-面向对象基础</title>
    <link href="/2023/01/10/Day06-1-10-Java-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/01/10/Day06-1-10-Java-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Day06-1-10-Java-基础学习-面向对象基础"><a href="#Day06-1-10-Java-基础学习-面向对象基础" class="headerlink" title="Day06-1-10-Java-基础学习-面向对象基础"></a>Day06-1-10-Java-基础学习-面向对象基础</h1><h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h2><blockquote><p>面向：拿 找</p><p>对象：能干活的东西</p><p>面向对象编程：拿东西过来做对应的事情</p></blockquote><h2 id="2-设计对象并使用"><a href="#2-设计对象并使用" class="headerlink" title="2.设计对象并使用"></a>2.设计对象并使用</h2><h3 id="1-类和对象"><a href="#1-类和对象" class="headerlink" title="1.类和对象"></a>1.类和对象</h3><blockquote><p>类（设计图)∶︰是对象共同特征的描述;</p><p>对象:是真实存在的具体东西。</p><p>在Java中，必须先设计类，才能获得对象。</p></blockquote><h4 id="1-如何定义类"><a href="#1-如何定义类" class="headerlink" title="1.如何定义类"></a>1.如何定义类</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230110114723198.png" alt="image-20230110114723198">、</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span>&#123;<br>    <span class="hljs-comment">//属性</span><br>    String brand ;<br>    <span class="hljs-type">double</span> price;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span>&#123;<br>        Sysout.out.println(<span class="hljs-string">&quot;手机在打电话&quot;</span>);<br>    &#125;<br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">playGame</span><span class="hljs-params">()</span>&#123;<br>        Sysout.out.println(<span class="hljs-string">&quot;手机在玩游戏&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-如何得到类的对象"><a href="#2-如何得到类的对象" class="headerlink" title="2.如何得到类的对象"></a>2.如何得到类的对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">类名 对象名=<span class="hljs-keyword">new</span> 类型类名（）；<br> Phone phone=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();<br></code></pre></td></tr></table></figure><h4 id="3-如何使用对象"><a href="#3-如何使用对象" class="headerlink" title="3.如何使用对象"></a>3.如何使用对象</h4><blockquote><p>访问属性:对象名.成员变量</p><p>访问行为:对象名.方法名(…)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    创建对象</span><br><span class="hljs-comment">        格式：类名 对象名 = new 类名();</span><br><span class="hljs-comment">        范例：Phone p = new Phone();</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    使用对象</span><br><span class="hljs-comment">        1：使用成员变量</span><br><span class="hljs-comment">            格式：对象名.变量名</span><br><span class="hljs-comment">            范例：p.brand</span><br><span class="hljs-comment">        2：使用成员方法</span><br><span class="hljs-comment">            格式：对象名.方法名()</span><br><span class="hljs-comment">            范例：p.call()</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PhoneDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建对象</span><br>        <span class="hljs-type">Phone</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();<br>        <span class="hljs-comment">//使用成员变量</span><br>        System.out.println(p.brand);<br>        System.out.println(p.price);<br>        p.brand = <span class="hljs-string">&quot;小米&quot;</span>;<br>        p.price = <span class="hljs-number">2999</span>;<br>        System.out.println(p.brand);<br>        System.out.println(p.price);<br>        <span class="hljs-comment">//使用成员方法</span><br>        p.call();<br>        p.sendMessage();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="4-小结"><a href="#4-小结" class="headerlink" title="4.小结"></a>4.小结</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230110121011239.png" alt="image-20230110121011239"></p><h3 id="2-类的注意事项"><a href="#2-类的注意事项" class="headerlink" title="2.类的注意事项"></a>2.类的注意事项</h3><blockquote><p>●用来描述一类事物的类，专业叫做: Javabean类。在Javabean类中，是不写main方法的。<br>●在以前，编写main方法的类，叫做测试类。<br>我们可以在测试类中创建javabean类的对象并进行赋值调用。</p></blockquote><blockquote><p>1.类名首字母建议大写，需要见名知意，驼峰模式。<br>2.一个Java文件中可以定义多个class类，且只能一个类是public修饰，而且public修饰的类名必须成为代码文件名。</p><p>实际开发中建议还是一个文件定义一个class类。<br>3.成员变量的完整定义格式是:(修饰符教据类型变量名称&#x3D;初始化值;一般无需指定初始化值<br>存在默认值。</p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230110121744773.png" alt="image-20230110121744773"></p><blockquote><ul><li>需求：首先定义一个学生类，然后定义一个学生测试类，在学生测试类中通过对象完成成员变量和成员方法的使用</li><li>分析：</li><li>成员变量：姓名，年龄…</li><li>成员方法：学习，做作业…</li><li>示例代码</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-comment">//成员变量</span><br>    String name;<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-comment">//成员方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">study</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;好好学习，天天向上&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doHomework</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;键盘敲烂，月薪过万&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    学生测试类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建对象</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br><br>        <span class="hljs-comment">//使用对象</span><br>        System.out.println(s.name + <span class="hljs-string">&quot;,&quot;</span> + s.age);<br><br>        s.name = <span class="hljs-string">&quot;林青霞&quot;</span>;<br>        s.age = <span class="hljs-number">30</span>;<br><br>        System.out.println(s.name + <span class="hljs-string">&quot;,&quot;</span> + s.age);<br><br>        s.study();<br>        s.doHomework();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230110122927696.png" alt="image-20230110122927696"></p><h2 id="3-封装"><a href="#3-封装" class="headerlink" title="3.封装"></a>3.封装</h2><h3 id="1-基本概念-1"><a href="#1-基本概念-1" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><blockquote><ol><li>封装概述<br> 是面向对象三大特征之一（封装，继承，多态）</li></ol><p>  <strong>对象代表什么，就得封装对应的数据，并提供数据对应的行为</strong></p><p>  <img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230110123944812.png" alt="image-20230110123944812"></p><ol start="2"><li>封装代码实现<br> 将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问<br> 成员变量private，提供对应的getXxx()&#x2F;setXxx()方法</li></ol></blockquote><h3 id="2-封装的优势"><a href="#2-封装的优势" class="headerlink" title="2.封装的优势"></a>2.封装的优势</h3><blockquote><p>让编程变得很简单，有什么事，找对象，调方法就行。<br>降低我们的学习成本，可以少学、少记，或者说压根不用学，不用记对象有哪些方法，有需要时去找就行</p></blockquote><h3 id="3-prviate关键字"><a href="#3-prviate关键字" class="headerlink" title="3.prviate关键字"></a>3.prviate关键字</h3><h4 id="1-基本概念-2"><a href="#1-基本概念-2" class="headerlink" title="1.基本概念"></a>1.基本概念</h4><blockquote><p>是一个权限修饰符<br>可以修饰成员（成员变量和成员方法)<br>被private修饰的成员只能在本类中才能访问</p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230110192101300.png" alt="image-20230110192101300"></p><h4 id="2-set和get方法"><a href="#2-set和get方法" class="headerlink" title="2.set和get方法"></a>2.set和get方法</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230110192447434.png" alt="image-20230110192447434"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    学生类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-comment">//成员变量</span><br>    String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-comment">//提供get/set方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;<br>        <span class="hljs-keyword">if</span>(a&lt;<span class="hljs-number">0</span> || a&gt;<span class="hljs-number">120</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;你给的年龄有误&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            age = a;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-comment">//成员方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(name + <span class="hljs-string">&quot;,&quot;</span> + age);<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    学生测试类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建对象</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        <span class="hljs-comment">//给成员变量赋值</span><br>        s.name = <span class="hljs-string">&quot;林青霞&quot;</span>;<br>        s.setAge(<span class="hljs-number">30</span>);<br>        <span class="hljs-comment">//调用show方法</span><br>        s.show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-小结"><a href="#3-小结" class="headerlink" title="3.小结"></a>3.小结</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230110200729141.png" alt="image-20230110200729141"></p><h2 id="4-this关键字"><a href="#4-this关键字" class="headerlink" title="4.this关键字"></a>4.this关键字</h2><blockquote><p> this修饰的变量用于指代成员变量，其主要作用是（区分局部变量和成员变量的重名问题）</p><ul><li>方法的形参如果与成员变量同名，不带this修饰的变量指的是形参，而不是成员变量</li><li>方法的形参没有与成员变量同名，不带this修饰的变量指的是成员变量</li><li>就近原则</li></ul></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230110202617222.png" alt="image-20230110202617222"></p><h5 id="1-成员变量与局部变量"><a href="#1-成员变量与局部变量" class="headerlink" title="1.成员变量与局部变量"></a>1.成员变量与局部变量</h5><blockquote><ul><li>类中位置不同：成员变量（类中方法外）局部变量（方法内部或方法声明上）</li><li>内存中位置不同：成员变量（堆内存）局部变量（栈内存）</li><li>生命周期不同：成员变量（随着对象的存在而存在，随着对象的消失而消失）局部变量（随着方法的调用而存在，醉着方法的调用完毕而消失）</li><li>初始化值不同：成员变量（有默认初始化值）局部变量（没有默认初始化值，必须先定义，赋值才能使用</li></ul></blockquote><h2 id="5-构造方法"><a href="#5-构造方法" class="headerlink" title="5.构造方法"></a>5.构造方法</h2><h3 id="1-基本概念-3"><a href="#1-基本概念-3" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><blockquote><p>构造方法也叫作构造器、构造函数。<br>作用:在创建对象的时候给成员变量进行赋值的。</p></blockquote><h3 id="2-基本格式"><a href="#2-基本格式" class="headerlink" title="2.基本格式"></a>2.基本格式</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230110203752496.png" alt="image-20230110203752496"></p><h3 id="3-构造方法特点"><a href="#3-构造方法特点" class="headerlink" title="3.构造方法特点"></a>3.构造方法特点</h3><blockquote><p>1．方法名与类名相同，大小写也要一致</p><p>2．没有返回值类型，连void都没有<br>3．没有具体的返回值（不能由retrun带回结果数据)</p></blockquote><h3 id="4-代码示例"><a href="#4-代码示例" class="headerlink" title="4.代码示例"></a>4.代码示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-comment">//构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;无参构造方法&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(name + <span class="hljs-string">&quot;,&quot;</span> + age);<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    测试类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建对象</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        s.show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-注意事项"><a href="#5-注意事项" class="headerlink" title="5.注意事项"></a>5.注意事项</h3><blockquote><p>1.构造方法的创建</p><p>如果没有定义构造方法，系统将给出一个默认的无参数构造方法<br>如果定义了构造方法，系统将不再提供默认的构造方法</p><p>2.构造方法的重载</p><p>如果自定义了带参构造方法，还要使用无参数构造方法，就必须再写一个无参数构造方法</p><p>3.推荐的使用方式</p><p>无论是否使用，都手工书写无参数构造方法</p><p>4.重要功能！</p><p>可以使用带参构造，为成员变量进行初始</p></blockquote><h2 id="6-标准JavaBean"><a href="#6-标准JavaBean" class="headerlink" title="6.标准JavaBean"></a>6.标准JavaBean</h2><blockquote><p>1.类名需要见名知意<br>2.成员变量使用private修饰</p><p>3.提供至少两个构造方法<br>4.无参构造方法<br>5.带全部参数的构造方法成员方法<br>6.提供每一个成员变量对应的setXxx()&#x2F;getXxx()如果还有其他行为，也需要写上</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.test6;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-comment">//属性</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> String email;<br>    <span class="hljs-keyword">private</span> String gender;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String username, String password, String email, String gender, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>        <span class="hljs-built_in">this</span>.password = password;<br>        <span class="hljs-built_in">this</span>.email = email;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> username</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> username</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> password</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> password</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> email</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmail</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> email;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> email</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setEmail</span><span class="hljs-params">(String email)</span> &#123;<br>        <span class="hljs-built_in">this</span>.email = email;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> gender</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getGender</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> gender;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> gender</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGender</span><span class="hljs-params">(String gender)</span> &#123;<br>        <span class="hljs-built_in">this</span>.gender = gender;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> age</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 设置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> age</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-comment">//快捷键：</span><br>    <span class="hljs-comment">//alt + insert</span><br>    <span class="hljs-comment">//alt + Fn + insert</span><br><br>    <span class="hljs-comment">//插件PTG 1秒生成标准Javabean</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="7-面向对象内存图-重要"><a href="#7-面向对象内存图-重要" class="headerlink" title="7.面向对象内存图(重要)"></a>7.面向对象内存图(重要)</h2><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230110212802711.png" alt="image-20230110212802711"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230110212910596.png" alt="image-20230110212910596"></p><h3 id="1-一个对象内存图"><a href="#1-一个对象内存图" class="headerlink" title="1.一个对象内存图"></a>1.一个对象内存图</h3><blockquote><p>Student s &#x3D; new Student();</p><p>1．加载class文件</p><p>2．申明局部变量<br>3．在堆内存中开辟一个空间<br>4.默认初始化<br>5.显示初始化<br>6．构造方法初始化</p><p>7.将堆内存中的地址值赋值给左边的局部变量</p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230110214632272.png" alt="image-20230110214632272"></p><h3 id="2-两个对象的内存图"><a href="#2-两个对象的内存图" class="headerlink" title="2.两个对象的内存图"></a>2.两个对象的内存图</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230110215606988.png" alt="image-20230110215606988"></p><h3 id="3-两个引用指向同一个对象"><a href="#3-两个引用指向同一个对象" class="headerlink" title="3.两个引用指向同一个对象"></a>3.两个引用指向同一个对象</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230110220516944.png" alt="image-20230110220516944"></p><h3 id="4-基本数据类型"><a href="#4-基本数据类型" class="headerlink" title="4.基本数据类型"></a>4.基本数据类型</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230110221050207.png" alt="image-20230110221050207"></p><h3 id="5-引用数据类型"><a href="#5-引用数据类型" class="headerlink" title="5.引用数据类型"></a>5.引用数据类型</h3><h4 id="1-对象"><a href="#1-对象" class="headerlink" title="1.对象"></a>1.对象</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230110221307929.png" alt="image-20230110221307929"></p><h4 id="2-数组"><a href="#2-数组" class="headerlink" title="2.数组"></a>2.数组</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230110221706723.png" alt="image-20230110221706723"></p><h4 id="3-小结-1"><a href="#3-小结-1" class="headerlink" title="3.小结"></a>3.小结</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230110221905310.png" alt="image-20230110221905310"></p><h3 id="6-this关键字的内存图"><a href="#6-this关键字的内存图" class="headerlink" title="6.this关键字的内存图"></a>6.this关键字的内存图</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230110222341374.png" alt="image-20230110222341374"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230110223115929.png" alt="image-20230110223115929"></p><h3 id="7-成员变量和局部变量区别"><a href="#7-成员变量和局部变量区别" class="headerlink" title="7.成员变量和局部变量区别"></a>7.成员变量和局部变量区别</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230110223400105.png" alt="image-20230110223400105"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230110223717713.png" alt="image-20230110223717713"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230110223906469.png" alt="image-20230110223906469"></p>]]></content>
    
    
    <categories>
      
      <category>Java成长之路</category>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
      <tag>面向对象基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day05-1-9-Java-基础学习-方法</title>
    <link href="/2023/01/09/Day05-1-9-Java-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E6%96%B9%E6%B3%95/"/>
    <url>/2023/01/09/Day05-1-9-Java-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="Day05-1-9-Java-基础学习-方法"><a href="#Day05-1-9-Java-基础学习-方法" class="headerlink" title="Day05-1-9-Java-基础学习-方法"></a>Day05-1-9-Java-基础学习-方法</h1><h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h2><blockquote><p>方法(method)是程序中最小的执行单元。</p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230108221631984.png" alt="image-20230108221631984"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230108222113528.png" alt="image-20230108222113528"></p><h2 id="2-方法格式"><a href="#2-方法格式" class="headerlink" title="2.方法格式"></a>2.方法格式</h2><h3 id="1-不带参数方法"><a href="#1-不带参数方法" class="headerlink" title="1.不带参数方法"></a>1.不带参数方法</h3><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230109101851608.png" alt="image-20230109101851608"></p><h4 id="2-调用"><a href="#2-调用" class="headerlink" title="2.调用"></a>2.调用</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230109101934359.png" alt="image-20230109101934359"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//目标：利用方法最简单的格式完成当前练习</span><br><br>        <span class="hljs-comment">//调用方法</span><br>        printGFInfo();<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printGFInfo</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;小惠惠&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;萌妹子&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;18岁&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodDemo3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//目标：利用方法最简单的格式完成当前练习</span><br>        <span class="hljs-comment">//需求：在方法里面定义两个变量并求和打印</span><br>        getSum();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getSum</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> num1 + num2;<br>        System.out.println(result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-带参数方法"><a href="#2-带参数方法" class="headerlink" title="2.带参数方法"></a>2.带参数方法</h3><h4 id="1-定义及调用"><a href="#1-定义及调用" class="headerlink" title="1.定义及调用"></a>1.定义及调用</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230109103501747.png" alt="image-20230109103501747"></p><h4 id="2-形参与实参"><a href="#2-形参与实参" class="headerlink" title="2.形参与实参"></a>2.形参与实参</h4><blockquote><p>形参:全称形式参数，是指方法定义中的参数<br>实参:全称实际参数，方法调用中的参数</p><p>注意:方法调用时，形参和实参必须一一对应，否则程序将报错。</p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230109104931420.png" alt="image-20230109104931420"></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodDemo4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//目标：掌握带参数方法定义的格式和调用的格式</span><br><br>        getSum(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getSum</span><span class="hljs-params">(<span class="hljs-type">int</span> num1, <span class="hljs-type">int</span> num2)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> num1 + num2;<br>        System.out.println(result);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p> &#x2F;&#x2F;需求：定义一个方法，求长方形的周长，将结果在方法中进行打印。</p><p> &#x2F;&#x2F;目标：根据不同的需求，选择定义无参的方法，还是带参数的方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.test;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        getLength(<span class="hljs-number">5.2</span>,<span class="hljs-number">1.3</span>);<br>    &#125;<br>    <span class="hljs-comment">//1.我要干嘛？求长方形的周长</span><br>    <span class="hljs-comment">//2.我干这件事情，需要什么才能完成？长 宽</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getLength</span><span class="hljs-params">(<span class="hljs-type">double</span> len, <span class="hljs-type">double</span> width)</span>&#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (len + width) * <span class="hljs-number">2</span>;<br>        System.out.println(result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-带返回值方法"><a href="#3-带返回值方法" class="headerlink" title="3.带返回值方法"></a>3.带返回值方法</h3><h4 id="1-定义及调用-1"><a href="#1-定义及调用-1" class="headerlink" title="1.定义及调用"></a>1.定义及调用</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230109115553224.png" alt="image-20230109115553224"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.methoddemo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodDemo5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//目标：掌握带返回值方法的定义和调用格式</span><br>        <span class="hljs-comment">//1.直接调用</span><br>        <span class="hljs-comment">//getSum(10,20,30);</span><br>        <span class="hljs-comment">//2.赋值调用</span><br>        <span class="hljs-comment">//int sum = getSum(10,20,30);</span><br>        <span class="hljs-comment">//System.out.println(sum);</span><br>        <span class="hljs-comment">//3.输出调用</span><br>        <span class="hljs-comment">//System.out.println(getSum(10,20,30));</span><br>        <span class="hljs-comment">//4.先计算第一个季度的营业额</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum1</span> <span class="hljs-operator">=</span> getSum(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>);<br>        <span class="hljs-comment">//再来计算第二个季度的营业额</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum2</span> <span class="hljs-operator">=</span> getSum(<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>);<br>        <span class="hljs-comment">//计算第三个季度的营业额</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum3</span> <span class="hljs-operator">=</span> getSum(<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>);<br>        <span class="hljs-comment">//计算第四个季度的营业额</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum4</span> <span class="hljs-operator">=</span> getSum(<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>);<br>        <span class="hljs-comment">//求全年的总营业额</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> sum1 + sum2 + sum3 + sum4;<br>        System.out.println(sum);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSum</span><span class="hljs-params">(<span class="hljs-type">int</span> num1,<span class="hljs-type">int</span> num2,<span class="hljs-type">int</span> num3)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> num1 + num2 + num3;<br>        <span class="hljs-keyword">return</span> result;<span class="hljs-comment">//返回给方法的调用处</span><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230109120740113.png" alt="image-20230109120740113"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//目标：要能区分出什么时候使用带返回值的方法</span><br>        <span class="hljs-comment">//需求：定义方法，比较两个长方形的面积</span><br><br>        <span class="hljs-comment">//调用方法获取长方形的面积，再进行比较</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">area1</span> <span class="hljs-operator">=</span> getArea(<span class="hljs-number">5.3</span>, <span class="hljs-number">1.7</span>);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">area2</span> <span class="hljs-operator">=</span> getArea(<span class="hljs-number">2.4</span>, <span class="hljs-number">2.7</span>);<br><br>        <span class="hljs-keyword">if</span>(area1 &gt; area2)&#123;<br>            System.out.println(<span class="hljs-string">&quot;第一个长方形更大&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;第二个长方形更大&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//定义一个方法求长方形的面积</span><br>    <span class="hljs-comment">//1.我要干嘛？求长方形的面积</span><br>    <span class="hljs-comment">//2.需要什么？长 和 宽</span><br>    <span class="hljs-comment">//3.方法的调用处，是否需要继续使用方法的结果。</span><br>    <span class="hljs-comment">//如果要用，那么方法必须有返回值</span><br>    <span class="hljs-comment">//如果不要用，方法可以写返回值，也可以不写返回值。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getArea</span><span class="hljs-params">(<span class="hljs-type">double</span> len, <span class="hljs-type">double</span> width)</span>&#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">area</span> <span class="hljs-operator">=</span> len * width;<br>        <span class="hljs-keyword">return</span> area;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-方法小结及注意事项"><a href="#4-方法小结及注意事项" class="headerlink" title="4.方法小结及注意事项"></a>4.方法小结及注意事项</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230109123226073.png" alt="image-20230109123226073"></p><blockquote><p>方法注意事项：</p><p>1.方法不调用就不执行</p><p>2.方法与方法之间是平级关系，不能互相嵌套定义</p><p>3.方法的编写顺序和执行顺序无关</p><p>4.方法的返回值类型为void，表示该方法没有返回值，没有返回值的方法可以省略return语句不写。如果要编写return，后面不能跟具体的数据。</p><p>5.return语句下面，不能编写代码，因为永远执行不到，属于无效的代码</p></blockquote><h2 id="3-方法重载"><a href="#3-方法重载" class="headerlink" title="3.方法重载"></a>3.方法重载</h2><h3 id="1-基本概念-1"><a href="#1-基本概念-1" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><blockquote><p>1.在同一个类中，定义了多个同名的方法，这些同名的方法具有同种的功能。</p><p>2.每个方法具有不同的参数类型或参数个数，这些同名的方法，就构成了重载关系</p><p>3.简单记:同一个类中，方法名相同，参数不同的方法。与返回值无关。</p><p>4.参数不同:个数不同、类型不同、顺序不同</p><p>顺序不同可以构成重载，但是不建议!</p></blockquote><h3 id="2-Java虚拟机识别原理"><a href="#2-Java虚拟机识别原理" class="headerlink" title="2.Java虚拟机识别原理"></a>2.Java虚拟机识别原理</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230109125104121.png" alt="image-20230109125104121"></p><blockquote><ul><li><p>需求：使用方法重载的思想，设计比较两个整数是否相同的方法，兼容全整数类型（byte,short,int,long） </p></li><li><p>思路：</p></li><li><p>①定义比较两个数字的是否相同的方法compare()方法，参数选择两个int型参数</p></li><li><p>②定义对应的重载方法，变更对应的参数类型，参数变更为两个long型参数</p></li><li><p>③定义所有的重载方法，两个byte类型与两个short类型参数 </p></li><li><p>④完成方法的调用，测试运行结果</p></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//调用方法</span><br>        System.out.println(compare(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>));<br>        System.out.println(compare((<span class="hljs-type">byte</span>) <span class="hljs-number">10</span>, (<span class="hljs-type">byte</span>) <span class="hljs-number">20</span>));<br>        System.out.println(compare((<span class="hljs-type">short</span>) <span class="hljs-number">10</span>, (<span class="hljs-type">short</span>) <span class="hljs-number">20</span>));<br>        System.out.println(compare(<span class="hljs-number">10L</span>, <span class="hljs-number">20L</span>));<br>    &#125;<br>    <span class="hljs-comment">//int</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;int&quot;</span>);<br>        <span class="hljs-keyword">return</span> a == b;<br>    &#125;<br>    <span class="hljs-comment">//byte</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(<span class="hljs-type">byte</span> a, <span class="hljs-type">byte</span> b)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;byte&quot;</span>);<br>        <span class="hljs-keyword">return</span> a == b;<br>    &#125;<br>    <span class="hljs-comment">//short</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(<span class="hljs-type">short</span> a, <span class="hljs-type">short</span> b)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;short&quot;</span>);<br>        <span class="hljs-keyword">return</span> a == b;<br>    &#125;<br>    <span class="hljs-comment">//long</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(<span class="hljs-type">long</span> a, <span class="hljs-type">long</span> b)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;long&quot;</span>);<br>        <span class="hljs-keyword">return</span> a == b;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-方法练习"><a href="#4-方法练习" class="headerlink" title="4.方法练习"></a>4.方法练习</h2><h3 id="1-数组遍历"><a href="#1-数组遍历" class="headerlink" title="1.数组遍历"></a>1.数组遍历</h3><blockquote><ul><li><p>需求：设计一个方法用于数组遍历，要求遍历的结果是在一行上的。例如：[11, 22, 33, 44, 55] </p></li><li><p>思路：</p></li><li><p>①因为要求结果在一行上输出，所以这里需要在学习一个新的输出语句System.out.print(“内容”);</p><p>System.out.println(“内容”); 输出内容并换行</p><p>System.out.print(“内容”); 输出内容不换行</p><p>System.out.println(); 起到换行的作用</p></li><li><p>②定义一个数组，用静态初始化完成数组元素初始化</p></li><li><p>③定义一个方法，用数组遍历通用格式对数组进行遍历</p></li><li><p>④用新的输出语句修改遍历操作</p></li><li><p>⑤调用遍历方法</p></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-comment">/*  //先打印数据，再进行换行</span><br><span class="hljs-comment">        System.out.println(&quot;aaa&quot;);</span><br><span class="hljs-comment">        //只打印不换行</span><br><span class="hljs-comment">        System.out.print(&quot;bbb&quot;);</span><br><span class="hljs-comment">        System.out.print(&quot;ddd&quot;);</span><br><span class="hljs-comment">        //不打印任何内容，只换行</span><br><span class="hljs-comment">        System.out.println();</span><br><span class="hljs-comment">        System.out.print(&quot;cc&quot;);*/</span><br>        <span class="hljs-comment">//设计一个方法用于数组遍历，要求遍历的结果是在一行上的。例如：[11, 22, 33, 44, 55]</span><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>        printArr(arr);<br>    &#125;<br>    <span class="hljs-comment">//1.我要遍历数组</span><br>    <span class="hljs-comment">//2.需要什么？  数组</span><br>    <span class="hljs-comment">//3.调用处是否需要使用方法的结果。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printArr</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>        System.out.print(<span class="hljs-string">&quot;[&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">if</span>(i == arr.length - <span class="hljs-number">1</span>)&#123;<br>                System.out.println(arr[i] + <span class="hljs-string">&quot;]&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.print(arr[i] + <span class="hljs-string">&quot;, &quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-数组最大值"><a href="#2-数组最大值" class="headerlink" title="2.数组最大值"></a>2.数组最大值</h3><blockquote><ul><li><p>需求：设计一个方法用于获取数组中元素的最大值 </p></li><li><p>思路：</p></li><li><p>①定义一个数组，用静态初始化完成数组元素初始化</p></li><li><p>②定义一个方法，用来获取数组中的最大值，最值的认知和讲解我们在数组中已经讲解过了</p></li><li><p>③调用获取最大值方法，用变量接收返回结果</p></li><li><p>④把结果输出在控制</p></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodTest02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//定义一个数组，用静态初始化完成数组元素初始化</span><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">12</span>, <span class="hljs-number">45</span>, <span class="hljs-number">98</span>, <span class="hljs-number">73</span>, <span class="hljs-number">60</span>&#125;;<br><br>        <span class="hljs-comment">//调用获取最大值方法，用变量接收返回结果</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> getMax(arr);<br><br>        <span class="hljs-comment">//把结果输出在控制台</span><br>        System.out.println(<span class="hljs-string">&quot;number:&quot;</span> + number);<br>    &#125;<br>    <span class="hljs-comment">//定义一个方法，用来获取数组中的最大值</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">            两个明确：</span><br><span class="hljs-comment">            返回值类型：int</span><br><span class="hljs-comment">            参数：int[] arr</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMax</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> x=<span class="hljs-number">1</span>; x&lt;arr.length; x++) &#123;<br>            <span class="hljs-keyword">if</span>(arr[x] &gt; max) &#123;<br>                max = arr[x];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> max;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-获取索引"><a href="#3-获取索引" class="headerlink" title="3.获取索引"></a>3.获取索引</h3><blockquote><p>定义一个方法获取数字，在数组中的索引位置，将结果返回给调用处，如果有重复的，只要获取第一个即可。</p><p>代码示例：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.demo;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//定义一个方法获取数字，在数组中的索引位置，将结果返回给调用处</span><br>        <span class="hljs-comment">//如果有重复的，只要获取第一个即可</span><br><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> contains(arr, <span class="hljs-number">3</span>);<br>        System.out.println(index);<br>    &#125;<br>    <span class="hljs-comment">//1. 我要干嘛？判断数组中的某一个数是否存在</span><br>    <span class="hljs-comment">//2. 需要什么？数组 数字</span><br>    <span class="hljs-comment">//3. 调用处是否需要继续使用？返回</span><br>    <span class="hljs-comment">//获取number在arr中的位置</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> number)</span> &#123;<br>        <span class="hljs-comment">//遍历arr得到每一个元素</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-comment">//拿着每一个元素跟number比较</span><br>            <span class="hljs-keyword">if</span>(arr[i] == number)&#123;<br>                <span class="hljs-comment">//如果相等，表示找到了</span><br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//当循环结束之后，如果还不能返回索引，表示数组中不存在该数据</span><br>        <span class="hljs-comment">//可以返回-1</span><br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>return break关键字的区别<br>1.return:其实跟循环没有什么关系，跟方法有关的，表示1结束方法2返回结果如果方法执行到了return,那么整个方法全部结束，里面的循环也会随之结束了。<br>2.break关键字 其实跟方法没有什么关系，结束循环或者switch的。</p></blockquote><h2 id="5-数组拷贝"><a href="#5-数组拷贝" class="headerlink" title="5.数组拷贝"></a>5.数组拷贝</h2><h3 id="1-基本需求"><a href="#1-基本需求" class="headerlink" title="1.基本需求"></a>1.基本需求</h3><blockquote><p>需求:<br> 定义一个方法copyOfRange(int] arr,int from, int to)<br>功能:<br> 将数组arr中从索引from ( 包含from)开始。到索引to结束(不包含to)的元案复制到新数组中,将新数组返回。</p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230109152818319.png" alt="image-20230109152818319"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span>()&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String [] args)</span>&#123;<br><span class="hljs-comment">//定义原始数组</span><br><span class="hljs-type">int</span> array[]=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;;<br>  &#125;<br><span class="hljs-comment">//将数组arr中从索引from (包含from) 开始,到索引to结束(不包含to)的元素</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> []copyOfRange(<span class="hljs-type">int</span> [] array,<span class="hljs-type">int</span> from ,<span class="hljs-type">int</span> to)&#123;<br><span class="hljs-comment">//定义数组</span><br><span class="hljs-type">int</span>[] newArr=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span> [to-from];<br><span class="hljs-comment">//2.将原始数组arr中的from 到to 上对应的元素 直接拷贝newArr中</span><br><br><span class="hljs-comment">//伪造索引的思想</span><br><span class="hljs-type">int</span> index=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=from ;i&lt;to;i++)&#123;<br>newArr[index]=array[i];<br>index++;<br>&#125;<br>        <span class="hljs-comment">//返回定义的数组</span><br><span class="hljs-keyword">return</span> newArr;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-方法内存图"><a href="#6-方法内存图" class="headerlink" title="6.方法内存图"></a>6.方法内存图</h2><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230109161221170.png" alt="image-20230109161221170"></p><h3 id="1-方法调用的基本内存原理"><a href="#1-方法调用的基本内存原理" class="headerlink" title="1.方法调用的基本内存原理"></a>1.方法调用的基本内存原理</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230109161618706.png" alt="image-20230109161618706"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230109162637843.png" alt="image-20230109162637843"></p><h3 id="2-方法传递基本数据类型的内存原理"><a href="#2-方法传递基本数据类型的内存原理" class="headerlink" title="2.方法传递基本数据类型的内存原理"></a>2.方法传递基本数据类型的内存原理</h3><h4 id="1-基本数据类型"><a href="#1-基本数据类型" class="headerlink" title="1.基本数据类型"></a>1.基本数据类型</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230109163736773.png" alt="image-20230109163736773"></p><h3 id="3-方法传递引用数据类型的内存原理"><a href="#3-方法传递引用数据类型的内存原理" class="headerlink" title="3.方法传递引用数据类型的内存原理"></a>3.方法传递引用数据类型的内存原理</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230109164009058.png" alt="image-20230109164009058"></p><h3 id="4-小结"><a href="#4-小结" class="headerlink" title="4.小结"></a>4.小结</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230109164259423.png" alt="image-20230109164259423"></p><h2 id="7-方法的值传递"><a href="#7-方法的值传递" class="headerlink" title="7.方法的值传递"></a>7.方法的值传递</h2><h3 id="1-方法传递基本数据类型原理"><a href="#1-方法传递基本数据类型原理" class="headerlink" title="1.方法传递基本数据类型原理"></a>1.方法传递基本数据类型原理</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230109165832661.png" alt="image-20230109165832661"></p><blockquote><p>传递基本数据类型时，传递的是真实的数据，形参的改变，不影响实际参数的值.</p></blockquote><blockquote><p>如果需要改变 就需要将改变的值进行返回</p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230109170755910.png" alt="image-20230109170755910"></p></blockquote><h3 id="2-方法传递引用数据类型原理"><a href="#2-方法传递引用数据类型原理" class="headerlink" title="2.方法传递引用数据类型原理"></a>2.方法传递引用数据类型原理</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230109171932943.png" alt="image-20230109171932943"></p><blockquote><p>传递引用数据类型时，传递的是地址值，形参的改变，影响实际参数的值</p></blockquote><h3 id="3-值传递小结"><a href="#3-值传递小结" class="headerlink" title="3.值传递小结"></a>3.值传递小结</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230109172105940.png" alt="image-20230109172105940"></p>]]></content>
    
    
    <categories>
      
      <category>Java成长之路</category>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
      <tag>方法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day04-1-8-Java-基础学习-数组</title>
    <link href="/2023/01/08/Day04-1-8-Java-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E6%95%B0%E7%BB%84/"/>
    <url>/2023/01/08/Day04-1-8-Java-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="Day04-1-8-Java-基础学习-数组"><a href="#Day04-1-8-Java-基础学习-数组" class="headerlink" title="Day04-1-8-Java-基础学习-数组"></a>Day04-1-8-Java-基础学习-数组</h1><h2 id="1-数组概述和静态初始化"><a href="#1-数组概述和静态初始化" class="headerlink" title="1.数组概述和静态初始化"></a>1.数组概述和静态初始化</h2><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><blockquote><p>数组指的是一种容器，可以用来存储同种数据类型的多个值.</p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230108131619356.png" alt="image-20230108131619356"></p><h3 id="2-数组的定义"><a href="#2-数组的定义" class="headerlink" title="2.数组的定义"></a>2.数组的定义</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230108131850746.png" alt="image-20230108131850746"></p><h3 id="3-数组的初始化-静态"><a href="#3-数组的初始化-静态" class="headerlink" title="3.数组的初始化(静态)"></a>3.数组的初始化(静态)</h3><blockquote><p>初始化∶就是在内存中，为数组容器开辟空间，并将数据存入容器中的过程。</p></blockquote><blockquote><p>完整格式：数据类型[] 数组名&#x3D;new 数据类型[]{元素1,元素2}</p></blockquote><blockquote><p>简化格式:数据类型[] 数组名&#x3D;{元素1,元素2}</p></blockquote><blockquote><ul><li>等号前后的数据类型必须保持一致。</li><li>数组一旦创建之后，长度不能发生变化。</li></ul></blockquote><blockquote><p>练习:定义数组存储3个学生的姓名。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1.</span>给数组限定什么类型？ <span class="hljs-type">int</span><br><span class="hljs-number">2.</span>利用静态初始化完成创建并添加元素<br><span class="hljs-type">int</span>[] agesArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,<span class="hljs-number">22</span>&#125;;<br><span class="hljs-type">int</span>[] agesArr = &#123;<span class="hljs-number">18</span>,<span class="hljs-number">19</span>,<span class="hljs-number">20</span>,<span class="hljs-number">21</span>,<span class="hljs-number">22</span>&#125;;<br></code></pre></td></tr></table></figure><h2 id="2-数组的地址值和元素访问"><a href="#2-数组的地址值和元素访问" class="headerlink" title="2.数组的地址值和元素访问"></a>2.数组的地址值和元素访问</h2><h3 id="1-数组的地址值"><a href="#1-数组的地址值" class="headerlink" title="1.数组的地址值"></a>1.数组的地址值</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230108132954684.png" alt="image-20230108132954684"></p><blockquote><p>地址值的格式含义: [D@776ec8df]</p><p>1.[:表示当前是一个数组<br>2.D:表示当前数组里而的元素都是double类型的</p><p>3.@:.表示一个间隔符号。《固定格式)<br>4.776ec8df:才是数i组真正的地址值，（十六进制&#x2F;平时我们习惯性的会把这个整体叫傲数组的地址值。</p></blockquote><h3 id="2-索引"><a href="#2-索引" class="headerlink" title="2.索引"></a>2.索引</h3><blockquote><p>索引:也叫做下标，角标。</p><p>索引的特点:从0开始，逐个+1增长，连续不间断.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrDemo2</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        数组中元素访问的格式：</span><br><span class="hljs-comment">                数组名[索引];</span><br><span class="hljs-comment">         作用：</span><br><span class="hljs-comment">            1.获取指定索引上对应的元素</span><br><span class="hljs-comment">            2.修改指定索引上对应的元素</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>       <span class="hljs-comment">//需求1：获取arr数组中，3索引上的值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">3</span>];<br>        System.out.println(number);<br>        System.out.println(arr[<span class="hljs-number">3</span>]);<br>       <span class="hljs-comment">//需求2：将arr数组中，3索引上的值修改为10</span><br>            arr[<span class="hljs-number">3</span>] = <span class="hljs-number">10</span>;<br>        System.out.println(<span class="hljs-string">&quot;修改之后为:&quot;</span> + arr[<span class="hljs-number">3</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-数组的遍历"><a href="#3-数组的遍历" class="headerlink" title="3.数组的遍历"></a>3.数组的遍历</h3><blockquote><p>数组遍历:将数组中所有的内容取出来，取出来之后可以(打印，求和，判断..)</p><p>注意:遍历指的是取出数据的过程，不要局限的理解为，遍历就是打印!</p><p>数组的长度：数组名.length;</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++)&#123;<br>    <span class="hljs-comment">//在循环的过程中，i依次表示数组中的每一个索引</span><br>    sout(arr[i]);<span class="hljs-comment">//就可以把数组里面的每一个元素都获取出来，并打印在控制台上了。</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-数组训练"><a href="#4-数组训练" class="headerlink" title="4.数组训练"></a>4.数组训练</h3><h4 id="1-遍历求和"><a href="#1-遍历求和" class="headerlink" title="1.遍历求和"></a>1.遍历求和</h4><blockquote><p>给定一个数组,遍历其中的元素并求出其中的代数和</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.test;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/*定义一个数组，存储1,2,3,4,5</span><br><span class="hljs-comment">        遍历数组得到每一个元素，求数组里面所有的数据和*/</span><br>        <span class="hljs-comment">//分析：</span><br>        <span class="hljs-comment">//1.定义一个数组，并添加数据1,2,3,4,5</span><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br><br>        <span class="hljs-comment">//求和变量</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//2.遍历数组得到每一个数据，累加求和</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-comment">//i 依次表示数组里面的每一个索引</span><br>            <span class="hljs-comment">//arr[i] 依次表示数组里面的每一个元素</span><br>            sum = sum + arr[i];<br>        &#125;<br><br>        <span class="hljs-comment">//当循环结束之后，sum的值就是累加之后的结果</span><br>        System.out.println(sum);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-统计个数"><a href="#2-统计个数" class="headerlink" title="2.统计个数"></a>2.统计个数</h4><blockquote><p>定义一个数组，存储1,2,3,4,5,6,7,8,9,10<br>遍历数组得到每一个元素，统计数组里面一共有多少个能被3整除的数字</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/*定义一个数组，存储1,2,3,4,5,6,7,8,9,10</span><br><span class="hljs-comment">        遍历数组得到每一个元素，统计数组里面一共有多少个能被3整除的数字*/</span><br>        <span class="hljs-comment">//分析：</span><br>        <span class="hljs-comment">//1.定义一个数组 存储1,2,3,4,5,6,7,8,9,10</span><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>&#125;;<br>        <span class="hljs-comment">//定义一个变量，用来统计次数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//2.遍历数组得到每一个元素</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-comment">//i 表示数组里面的每一个索引</span><br>            <span class="hljs-comment">//arr[i] 表示数组里面的每一个元素</span><br>            <span class="hljs-comment">//3.判断当前的元素是否为3的倍数，如果是那么统计变量就需要自增一次。</span><br>            <span class="hljs-keyword">if</span>(arr[i] % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>)&#123;<br>               <span class="hljs-comment">// System.out.println(arr[i]);</span><br>                count++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//当循环结束之后，就表示数组里面所有的数字都判断完毕了，直接打印count即可</span><br>        System.out.println(<span class="hljs-string">&quot;数组中能被3整除的数字有&quot;</span> + count + <span class="hljs-string">&quot;个&quot;</span>);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>3.变化数据</p><blockquote><p>定义一个数组，存储1,2,3,4,5,6,7,8,9,10遍历数组得到每一个元素。<br>要求:<br>1.如果是奇数，则将当前数字扩大两倍2</p><p>2.如果是偶数，则将当前数字变成二分之一</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.itheima.test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrTest3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       <span class="hljs-comment">/* 定义一个数组，存储1,2,3,4,5,6,7,8,9,10</span><br><span class="hljs-comment">            遍历数组得到每一个元素。</span><br><span class="hljs-comment">            要求：</span><br><span class="hljs-comment">            1，如果是奇数，则将当前数字扩大两倍</span><br><span class="hljs-comment">            2，如果是偶数，则将当前数字变成二分之一</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-comment">//分析：</span><br>        <span class="hljs-comment">//1.定义一个数组，存1,2,3,4,5,6,7,8,9,10</span><br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;;<br>        <span class="hljs-comment">//2.遍历数组得到每一个元素</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-comment">//i 依次表示数组里面的每一个索引</span><br>            <span class="hljs-comment">//arr[i] 依次表示数组里面的每一个元素</span><br>            <span class="hljs-comment">//3.对每一个元素进行判断</span><br>            <span class="hljs-keyword">if</span>(arr[i] % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-comment">//偶数 变成二分之一</span><br>               arr[i] = arr[i] / <span class="hljs-number">2</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//奇数 扩大两倍</span><br>                arr[i] = arr[i] * <span class="hljs-number">2</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//遍历数组</span><br>        <span class="hljs-comment">//一个循环尽量只做一件事情。</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.println(arr[i]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-数组的静态初始化"><a href="#3-数组的静态初始化" class="headerlink" title="3.数组的静态初始化"></a>3.数组的静态初始化</h2><h3 id="1-基本概念-1"><a href="#1-基本概念-1" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><blockquote><p>动态初始化:初始化时只指定数组长度，由系统为数组分配初始值。</p></blockquote><blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230108173033526.png" alt="image-20230108173033526"></p></blockquote><blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230108173041785.png" alt="image-20230108173041785"></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.定义一个数组，存3个人的年龄，年龄未知</span><br><span class="hljs-type">int</span>[] agesArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>];<br><br><br><span class="hljs-comment">//2.定义一个数组，存班级10名学生的考试成绩，考试成绩暂时未知，考完才知道。</span><br><span class="hljs-type">int</span>[] scoresArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<br></code></pre></td></tr></table></figure><h3 id="2-默认初始化值"><a href="#2-默认初始化值" class="headerlink" title="2.默认初始化值"></a>2.默认初始化值</h3><blockquote><p>整数类型：0</p><p>小数类型：0.0</p><p>布尔类型：false</p><p>字符类型：’\u0000’</p><p>引用类型：null</p></blockquote><h3 id="3-静态初始化和静态初始化的区别"><a href="#3-静态初始化和静态初始化的区别" class="headerlink" title="3.静态初始化和静态初始化的区别"></a>3.静态初始化和静态初始化的区别</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230108191708058.png" alt="image-20230108191708058"></p><h3 id="4-数组常见问题"><a href="#4-数组常见问题" class="headerlink" title="4.数组常见问题"></a>4.数组常见问题</h3><blockquote><p>当访问了数组中不存在的索引，就会引发索引越界异常。</p></blockquote><blockquote><p>避免：</p><p>​针对于任意一个数组，索引的范围：<br>  ​最小索引：0<br>  ​最大索引：数组的长度 - 1<br>​               数组名.length - 1</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrDemo6</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>&#125;;<br>        <span class="hljs-comment">//用索引来访问数组中的元素</span><br>        System.out.println(arr[<span class="hljs-number">1</span>]);<br>        <span class="hljs-comment">//ArrayIndexOutOfBoundsException</span><br>        System.out.println(arr[<span class="hljs-number">10</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-数组练习"><a href="#4-数组练习" class="headerlink" title="4.数组练习"></a>4.数组练习</h2><h3 id="1-求最值"><a href="#1-求最值" class="headerlink" title="1.求最值"></a>1.求最值</h3><blockquote><p>需求：求数组中的最大值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">33</span>,<span class="hljs-number">5</span>,<span class="hljs-number">22</span>,<span class="hljs-number">44</span>,<span class="hljs-number">55</span>&#125;;<br><span class="hljs-comment">//2.定义一个变量max用来存储最大值</span><br><span class="hljs-comment">//临时认为0索引的数据是最大的</span><br><span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<br><span class="hljs-comment">//3.循环获取数组中的每一个元素</span><br><span class="hljs-comment">//拿着每一个元素跟max进行比较</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-comment">//i 索引  arr[i] 元素</span><br>    <span class="hljs-keyword">if</span>(arr[i] &gt; max)&#123;<br>        max = arr[i];<br>    &#125;<br>&#125;<br><span class="hljs-comment">//4.当循环结束之后，max记录的就是数组中的最大值</span><br>System.out.println(max);<span class="hljs-comment">//55</span><br></code></pre></td></tr></table></figure><h3 id="2-求和及统计个数"><a href="#2-求和及统计个数" class="headerlink" title="2.求和及统计个数"></a>2.求和及统计个数</h3><blockquote><p>需求1：定义一个数组，存储1,2,3,4,5</p><p>遍历数组得到每一个元素，求数组里面所有的数据和</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*定义一个数组，存储1,2,3,4,5</span><br><span class="hljs-comment">        遍历数组得到每一个元素，求数组里面所有的数据和</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//1.定义一个数组，并添加数据1,2,3,4,5</span><br><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br><span class="hljs-comment">//求和变量</span><br><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">//2.遍历数组得到每一个数据，累加求和</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-comment">//i 依次表示数组里面的每一个索引</span><br>    <span class="hljs-comment">//arr[i] 依次表示数组里面的每一个元素</span><br>    sum = sum + arr[i];<br>&#125;<br><span class="hljs-comment">//当循环结束之后，sum的值就是累加之后的结果</span><br>System.out.println(sum);<br></code></pre></td></tr></table></figure><blockquote><p>求：定义一个数组，存储1,2,3,4,5,6,7,8,9,10</p><p>遍历数组得到每一个元素，统计数组里面一共有多少个能被3整除的数字</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//分析：</span><br><span class="hljs-comment">//1.定义一个数组 存储1,2,3,4,5,6,7,8,9,10</span><br><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>&#125;;<br><span class="hljs-comment">//定义一个变量，用来统计次数</span><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">//2.遍历数组得到每一个元素</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-comment">//i 表示数组里面的每一个索引</span><br>    <span class="hljs-comment">//arr[i] 表示数组里面的每一个元素</span><br>    <span class="hljs-comment">//3.判断当前的元素是否为3的倍数，如果是那么统计变量就需要自增一次。</span><br>    <span class="hljs-keyword">if</span>(arr[i] % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-comment">// System.out.println(arr[i]);</span><br>        count++;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//当循环结束之后，就表示数组里面所有的数字都判断完毕了，直接打印count即可</span><br>System.out.println(<span class="hljs-string">&quot;数组中能被3整除的数字有&quot;</span> + count + <span class="hljs-string">&quot;个&quot;</span>);<br></code></pre></td></tr></table></figure><blockquote><p>需求：生成10个1~100之间的随机数存入数组。</p><p>1）求出所有数据的和</p><p>2）求所有数据的平均数</p><p>3）统计有多少个数据比平均值小</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//分析：</span><br><span class="hljs-comment">//1.定义数组</span><br><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<br><span class="hljs-comment">//2.把随机数存入到数组当中</span><br><span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-comment">//每循环一次，就会生成一个新的随机数</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> r.nextInt(<span class="hljs-number">100</span>) + <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//把生成的随机数添加的数组当中</span><br>    <span class="hljs-comment">//数组名[索引] = 数据;</span><br>    arr[i] = number;<br>&#125;<br><span class="hljs-comment">// 1）求出所有数据的和</span><br><span class="hljs-comment">//定义求和变量</span><br><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-comment">//循环得到每一个元素</span><br>    <span class="hljs-comment">//并把元素累加到sum当中</span><br>    sum = sum + arr[i];<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;数组中所有数据的和为：&quot;</span> + sum);<br><span class="hljs-comment">//2）求所有数据的平均数</span><br><span class="hljs-type">int</span> <span class="hljs-variable">avg</span> <span class="hljs-operator">=</span> sum / arr.length;<br>System.out.println(<span class="hljs-string">&quot;数组中平均数为：&quot;</span> + avg);<br><span class="hljs-comment">//3）统计有多少个数据比平均值小</span><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-keyword">if</span>(arr[i] &lt; avg)&#123;<br>        count++;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//当循环结束之后，就表示我已经找到了所有的比平均数小的数据</span><br>System.out.println(<span class="hljs-string">&quot;在数组中，一共有&quot;</span> + count + <span class="hljs-string">&quot;个数据，比平均数小&quot;</span>);<br><span class="hljs-comment">//遍历数组，验证答案</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    System.out.print(arr[i] + <span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-交换数据"><a href="#3-交换数据" class="headerlink" title="3.交换数据"></a>3.交换数据</h3><blockquote><p>需求：定义一个数组，存入1,2,3,4,5。按照要求交换索引对应的元素。</p><p>交换前：1,2,3,4,5</p><p>交换后：5,2,3,4,1</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.定义数组存储数据</span><br><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br><span class="hljs-comment">//2.利用循环去交换数据</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>,j = arr.length - <span class="hljs-number">1</span>; i &lt; j; i++,j--)&#123;<br>    <span class="hljs-comment">//交换变量i和变量j指向的元素</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[i];<br>    arr[i] = arr[j];<br>    arr[j] = temp;<br>&#125;<br><span class="hljs-comment">//当循环结束之后，那么数组中的数据就实现了头尾交换</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    System.out.print(arr[i] + <span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-打乱数据"><a href="#4-打乱数据" class="headerlink" title="4.打乱数据"></a>4.打乱数据</h3><blockquote><p>需求：定义一个数组，存入1~5。要求打乱数组中所有数据的顺序</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.定义数组存储1~5</span><br><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br><span class="hljs-comment">//2.循环遍历数组，从0索引开始打乱数据的顺序</span><br><span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-comment">//生成一个随机索引</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">randomIndex</span> <span class="hljs-operator">=</span> r.nextInt(arr.length);<br>    <span class="hljs-comment">//拿着随机索引指向的元素 跟 i 指向的元素进行交换</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[i];<br>    arr[i] = arr[randomIndex];<br>    arr[randomIndex] = temp;<br>&#125;<br><span class="hljs-comment">//当循环结束之后，那么数组中所有的数据已经打乱顺序了</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    System.out.print(arr[i] + <span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-数组内存图"><a href="#5-数组内存图" class="headerlink" title="5.数组内存图"></a>5.数组内存图</h2><h3 id="1-Java内存分配"><a href="#1-Java内存分配" class="headerlink" title="1.Java内存分配"></a>1.Java内存分配</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230108211224659.png" alt="image-20230108211224659"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230108211356027.png" alt="image-20230108211356027"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230108213813172.png" alt="image-20230108213813172"></p><h3 id="2-简单代码内存"><a href="#2-简单代码内存" class="headerlink" title="2.简单代码内存"></a>2.简单代码内存</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230108214057219.png" alt="image-20230108214057219"></p><h3 id="3-数组代码内存"><a href="#3-数组代码内存" class="headerlink" title="3.数组代码内存"></a>3.数组代码内存</h3><h4 id="1-定义及输出数组的内存图"><a href="#1-定义及输出数组的内存图" class="headerlink" title="1.定义及输出数组的内存图"></a>1.定义及输出数组的内存图</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230108214535779.png" alt="image-20230108214535779"></p><h4 id="2-数组赋值的内存图"><a href="#2-数组赋值的内存图" class="headerlink" title="2.数组赋值的内存图"></a>2.数组赋值的内存图</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230108214740282.png" alt="image-20230108214740282"></p><h4 id="3-两个数组的内存"><a href="#3-两个数组的内存" class="headerlink" title="3.两个数组的内存"></a>3.两个数组的内存</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230108215757596.png" alt="image-20230108215757596"></p><h4 id="4-小结"><a href="#4-小结" class="headerlink" title="4.小结"></a>4.小结</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230108215837611.png" alt="image-20230108215837611"></p><h3 id="4-两个数组指向同一个空间内存"><a href="#4-两个数组指向同一个空间内存" class="headerlink" title="4.两个数组指向同一个空间内存"></a>4.两个数组指向同一个空间内存</h3><h4 id="1-元素打印内存图"><a href="#1-元素打印内存图" class="headerlink" title="1.元素打印内存图"></a>1.元素打印内存图</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230108220328892.png" alt="image-20230108220328892"></p><h4 id="2-元素修改内存图"><a href="#2-元素修改内存图" class="headerlink" title="2.元素修改内存图"></a>2.元素修改内存图</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230108220424582.png" alt="image-20230108220424582"></p><h4 id="3-修改后访问元素内存图"><a href="#3-修改后访问元素内存图" class="headerlink" title="3.修改后访问元素内存图"></a>3.修改后访问元素内存图</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230108220526388.png" alt="image-20230108220526388"></p><blockquote><p>当两个数组指向同一个小空间时，其中一个数组对小<br>空间中的值发生了改变，那么其他数组再次访问的时候都是修改之后的结果了。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java成长之路</category>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
      <tag>数组</tag>
      
      <tag>数组内存图</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day03-1-7-Java-基础学习-流程控制语句</title>
    <link href="/2023/01/07/Day03-1-7-Java-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/"/>
    <url>/2023/01/07/Day03-1-7-Java-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="Day03-1-7-Java-基础学习-流程控制语句"><a href="#Day03-1-7-Java-基础学习-流程控制语句" class="headerlink" title="Day03-1-7-Java-基础学习-流程控制语句"></a>Day03-1-7-Java-基础学习-流程控制语句</h1><h2 id="1-顺序结构"><a href="#1-顺序结构" class="headerlink" title="1.顺序结构"></a>1.顺序结构</h2><blockquote><p>顺序结构语句是Java程序默认的执行流程，按照代码的先后顺序，从上到下依次执行</p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230107155044748.png" alt="image-20230107155044748"></p><h2 id="2-分支结构"><a href="#2-分支结构" class="headerlink" title="2.分支结构"></a>2.分支结构</h2><h3 id="1-if语句结构"><a href="#1-if语句结构" class="headerlink" title="1.if语句结构"></a>1.if语句结构</h3><h4 id="1-if结构第一种格式"><a href="#1-if结构第一种格式" class="headerlink" title="1.if结构第一种格式"></a>1.if结构第一种格式</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230107155341538.png" alt="image-20230107155341538"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfDemo</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;开始&quot;</span>);<br><span class="hljs-comment">//定义两个变量</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><span class="hljs-comment">//需求：判断a和b的值是否相等，如果相等，就在控制台输出：a等于b</span><br><span class="hljs-keyword">if</span>(a == b) &#123;<br>System.out.println(<span class="hljs-string">&quot;a等于b&quot;</span>);<br>&#125;<br><span class="hljs-comment">//需求：判断a和c的值是否相等，如果相等，就在控制台输出：a等于c</span><br><span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">if</span>(a == c) &#123;<br>System.out.println(<span class="hljs-string">&quot;a等于c&quot;</span>);<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;结束&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>1.大括号的开头可以另起一行书写，但是建议写在第一行的末尾</p><p>2.在语句体中,如果只有一句代码，大括号可以省略不写<br>3,如果对一个布尔类型的变量进行到断，不要用–号 直接将变量写在小括号中</p></blockquote><h4 id="2-if结构第二种格式"><a href="#2-if结构第二种格式" class="headerlink" title="2.if结构第二种格式"></a>2.if结构第二种格式</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230107161015419.png" alt="image-20230107161015419"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.键盘录入一个整数。表示身上的钱。</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;请输入一个整数表示身上的钱&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> sc.nextInt();<br><span class="hljs-comment">//2.对钱进行判断</span><br><span class="hljs-keyword">if</span>(money &gt;= <span class="hljs-number">100</span>)&#123;<br>    System.out.println(<span class="hljs-string">&quot;吃网红餐厅&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;福建大酒店&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>斯坦福练习题</p><p>​在实际开发中，电影院选座也会使用到if判断。假设某影院售卖了100张票，票的序号为1~100。其中奇数票号坐左侧，偶数票号坐右侧。键盘录入一个整数表示电影票的票号。根据不同情况，给出不同的提示：</p><p>如果票号为奇数，那么打印坐左边。</p><p>如果票号为偶数，那么打印坐右边。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//分析：</span><br><span class="hljs-comment">//1.键盘录入票号</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;请输入票号&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">ticket</span> <span class="hljs-operator">=</span> sc.nextInt();<br><span class="hljs-keyword">if</span>(ticket &gt;= <span class="hljs-number">1</span> &amp;&amp; ticket &lt;= <span class="hljs-number">100</span>)&#123;<br>    <span class="hljs-comment">//合法</span><br>    <span class="hljs-comment">//2.对票号进行判断</span><br>    <span class="hljs-keyword">if</span> (ticket % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">//偶数</span><br>        System.out.println(<span class="hljs-string">&quot;坐右边&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//奇数</span><br>        System.out.println(<span class="hljs-string">&quot;坐左边&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">//票号不合法</span><br>    System.out.println(<span class="hljs-string">&quot;票号不合法&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-if结构第三种格式"><a href="#3-if结构第三种格式" class="headerlink" title="3.if结构第三种格式"></a>3.if结构第三种格式</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230107162142619.png" alt="image-20230107162142619"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230107162248569.png" alt="image-20230107162248569"></p><blockquote><p>小明快要期末考试了，小明爸爸对他说，会根据他不同的考试成绩，送他不同的礼物，</p><p>假如你可以控制小明的得分，请用程序实现小明到底该获得什么样的礼物，并在控制台输出。</p><p>分析：</p><p>​①小明的考试成绩未知，可以使用键盘录入的方式获取值</p><p>​②由于奖励种类较多，属于多种判断，采用if…else…if格式实现</p><p>​③为每种判断设置对应的条件</p><p>​④为每种判断设置对应的奖励</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//95~100 自行车一辆</span><br><span class="hljs-comment">//90~94   游乐场玩一天</span><br><span class="hljs-comment">//80 ~ 89 变形金刚一个</span><br><span class="hljs-comment">//80 以下  胖揍一顿</span><br><br><span class="hljs-comment">//1.键盘录入一个值表示小明的分数</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;请输入小明的成绩&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> sc.nextInt();<br><span class="hljs-comment">//2.对分数的有效性进行判断</span><br><span class="hljs-keyword">if</span>(score &gt;= <span class="hljs-number">0</span> &amp;&amp; score &lt;= <span class="hljs-number">100</span>)&#123;<br>    <span class="hljs-comment">//有效的分数</span><br>    <span class="hljs-comment">//3.对小明的分数进行判断，不同情况执行不同的代码</span><br>    <span class="hljs-keyword">if</span>(score &gt;= <span class="hljs-number">95</span> &amp;&amp; score &lt;= <span class="hljs-number">100</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;送自行车一辆&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score &gt;= <span class="hljs-number">90</span> &amp;&amp; score &lt;= <span class="hljs-number">94</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;游乐场玩一天&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score &gt;= <span class="hljs-number">80</span> &amp;&amp; score &lt;= <span class="hljs-number">89</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;变形金刚一个&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;胖揍一顿&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">//无效的分数</span><br>    System.out.println(<span class="hljs-string">&quot;分数不合法&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230107163621138.png" alt="image-20230107163621138"> </p><h3 id="2-switch语句结构"><a href="#2-switch语句结构" class="headerlink" title="2.switch语句结构"></a>2.switch语句结构</h3><h4 id="1-基本格式"><a href="#1-基本格式" class="headerlink" title="1.基本格式"></a>1.基本格式</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230107164103988.png" alt="image-20230107164103988"></p><h4 id="2-表达式说明"><a href="#2-表达式说明" class="headerlink" title="2.表达式说明"></a>2.表达式说明</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230107164241437.png" alt="image-20230107164241437"></p><blockquote><p>需求：键盘录入星期数，显示今天的减肥活动。</p><p>周一：跑步  </p><p>周二：游泳  </p><p>周三：慢走  </p><p>周四：动感单车</p><p>周五：拳击  </p><p>周六：爬山  </p><p>周日：好好吃一顿</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1.键盘录入一个整数表示星期</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入一个整数表示星期&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">week</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-comment">//2.书写一个switch语句去跟week进行匹配</span><br>        <span class="hljs-keyword">switch</span> (week)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                System.out.println(<span class="hljs-string">&quot;跑步&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                System.out.println(<span class="hljs-string">&quot;游泳&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                System.out.println(<span class="hljs-string">&quot;慢走&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                System.out.println(<span class="hljs-string">&quot;动感单车&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                System.out.println(<span class="hljs-string">&quot;拳击&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>                System.out.println(<span class="hljs-string">&quot;爬山&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>                System.out.println(<span class="hljs-string">&quot;好好吃一顿&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;输入错误，没有这个星期&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-switch的扩展知识"><a href="#3-switch的扩展知识" class="headerlink" title="3.switch的扩展知识"></a>3.switch的扩展知识</h4><h5 id="1-default的位置和省略"><a href="#1-default的位置和省略" class="headerlink" title="1.default的位置和省略"></a>1.default的位置和省略</h5><blockquote><p>1.位置: defaule不一定是写在最下面的，我们可以写在任意位置。只不过习惯会写在最下面2.省略: defaule可以省略，语法不会有问题,但是不建议省略。</p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230107185427444.png" alt="image-20230107185427444"></p><h5 id="2-case穿透"><a href="#2-case穿透" class="headerlink" title="2.case穿透"></a>2.case穿透</h5><blockquote><p>执行流程:<br>1.首先还是会拿着小括号中表达式的谊跟下面每一个case进行匹配。<br>2.如果匹配上了，就会执行对应的语句体，如果此时发现了brcak，那么结束整个switch语句。</p><p>3.如果没有发现break，那么程序会继续执行下一个case的语句体，一直遇到break或者右大括号为止。</p><p>4.如果多个case的语句体重复了，那么我们考虑利用case穿透去简化代码。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//分析：</span><br><span class="hljs-comment">//1.键盘录入星期数</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;请输入星期&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">week</span> <span class="hljs-operator">=</span> sc.nextInt();<span class="hljs-comment">//3</span><br><span class="hljs-comment">//2.利用switch进行匹配</span><br>----------------------------------------------------<br>利用<span class="hljs-keyword">case</span>穿透简化代码<br><span class="hljs-keyword">switch</span> (week)&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>        System.out.println(<span class="hljs-string">&quot;工作日&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>        System.out.println(<span class="hljs-string">&quot;休息日&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        System.out.println(<span class="hljs-string">&quot;没有这个星期&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>&#125;<br>----------------------------------------------------<br>利用JDK12简化代码书写<br><span class="hljs-keyword">switch</span> (week) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> -&gt; System.out.println(<span class="hljs-string">&quot;工作日&quot;</span>);<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>, <span class="hljs-number">7</span> -&gt; System.out.println(<span class="hljs-string">&quot;休息日&quot;</span>);<br>    <span class="hljs-keyword">default</span> -&gt; System.out.println(<span class="hljs-string">&quot;没有这个星期&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-switch新特性-JDK以后"><a href="#3-switch新特性-JDK以后" class="headerlink" title="3.switch新特性(JDK以后)"></a>3.switch新特性(JDK以后)</h5><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230107190733785.png" alt="image-20230107190733785"></p><blockquote><p>当大括号里面只有一句代码时,大括号可以省略</p></blockquote><h5 id="4-switch和if语句的使用场景"><a href="#4-switch和if语句的使用场景" class="headerlink" title="4.switch和if语句的使用场景"></a>4.switch和if语句的使用场景</h5><blockquote><p>switch和if第三种格式各自的使用场景if的第三种格式:一般用于对范围的判断<br>switch:把有限个数据一一列举出来,让我们任选其</p></blockquote><h2 id="3-循环结构"><a href="#3-循环结构" class="headerlink" title="3.循环结构"></a>3.循环结构</h2><h3 id="1-for循环"><a href="#1-for循环" class="headerlink" title="1.for循环"></a>1.for循环</h3><h4 id="1-基本格式-1"><a href="#1-基本格式-1" class="headerlink" title="1.基本格式"></a>1.基本格式</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230107194308205.png" alt="image-20230107194308205"></p><h4 id="2-执行流程"><a href="#2-执行流程" class="headerlink" title="2.执行流程"></a>2.执行流程</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230107194452587.png" alt="image-20230107194452587"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230107194636297.png" alt="image-20230107194636297"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*需求：打印5次HelloWorld</span><br><span class="hljs-comment">开始条件：1</span><br><span class="hljs-comment">结束条件：5</span><br><span class="hljs-comment">重复代码：打印语句</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>    System.out.println(<span class="hljs-string">&quot;HelloWorld&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-实践案例"><a href="#3-实践案例" class="headerlink" title="3.实践案例"></a>3.实践案例</h4><h5 id="1-输出数据"><a href="#1-输出数据" class="headerlink" title="1.输出数据"></a>1.输出数据</h5><blockquote><p>需求：在控制台输出1-5和5-1的数据 </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForTest01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//需求：输出数据1-5</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=<span class="hljs-number">5</span>; i++) &#123;<br>System.out.println(i);<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;--------&quot;</span>);<br><span class="hljs-comment">//需求：输出数据5-1</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">5</span>; i&gt;=<span class="hljs-number">1</span>; i--) &#123;<br>System.out.println(i);<br>&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-求和"><a href="#2-求和" class="headerlink" title="2.求和"></a>2.求和</h5><blockquote><p>需求：求1-5之间的数据和，并把求和结果在控制台输出</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForTest02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//求和的最终结果必须保存起来，需要定义一个变量，用于保存求和的结果，初始值为0</span><br><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">//从1开始到5结束的数据，使用循环结构完成</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=<span class="hljs-number">5</span>; i++) &#123;<br><span class="hljs-comment">//将反复进行的事情写入循环结构内部</span><br>             <span class="hljs-comment">// 此处反复进行的事情是将数据 i 加到用于保存最终求和的变量 sum 中</span><br>sum = sum + i;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">sum += i;sum = sum + i;</span><br><span class="hljs-comment">第一次：sum = sum + i = 0 + 1 = 1;</span><br><span class="hljs-comment">第二次：sum = sum + i = 1 + 2 = 3;</span><br><span class="hljs-comment">第三次：sum = sum + i = 3 + 3 = 6;</span><br><span class="hljs-comment">第四次：sum = sum + i = 6 + 4 = 10;</span><br><span class="hljs-comment">第五次：sum = sum + i = 10 + 5 = 15;</span><br><span class="hljs-comment">*/</span><br>&#125;<br><span class="hljs-comment">//当循环执行完毕时，将最终数据打印出来</span><br>System.out.println(<span class="hljs-string">&quot;1-5之间的数据和是：&quot;</span> + sum);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3-求偶数和"><a href="#3-求偶数和" class="headerlink" title="3.求偶数和"></a>3.求偶数和</h5><blockquote><p>需求：求1-100之间的偶数和，并把求和结果在控制台输出</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForTest03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//求和的最终结果必须保存起来，需要定义一个变量，用于保存求和的结果，初始值为0</span><br><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">//对1-100的数据求和与1-5的数据求和几乎完全一样，仅仅是结束条件不同</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=<span class="hljs-number">100</span>; i++) &#123;<br><span class="hljs-comment">//对1-100的偶数求和，需要对求和操作添加限制条件，判断是否是偶数</span><br><span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">//sum += i；</span><br>sum = sum + i;<br>&#125;<br>&#125;<br><span class="hljs-comment">//当循环执行完毕时，将最终数据打印出来</span><br>System.out.println(<span class="hljs-string">&quot;1-100之间的偶数和是：&quot;</span> + sum);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="4-次数统计"><a href="#4-次数统计" class="headerlink" title="4.次数统计"></a>4.次数统计</h5><blockquote><p>需求：键盘录入两个数字，表示一个范围。 统计这个范围中。</p><p>既能被3整除，又能被5整除数字有多少个？</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test16</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       <span class="hljs-comment">/* 需求：键盘录入两个数字，表示一个范围。</span><br><span class="hljs-comment">        统计这个范围中。</span><br><span class="hljs-comment">        既能被3整除，又能被5整除数字有多少个？*/</span><br><br>        <span class="hljs-comment">//分析：</span><br>        <span class="hljs-comment">//1.键盘录入两个数字</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请录入一个数字表示范围的开始&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        System.out.println(<span class="hljs-string">&quot;请录入一个数字表示范围的结束&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> sc.nextInt();<br><br>        <span class="hljs-comment">//统计变量</span><br>        <span class="hljs-comment">//简单理解：统计符合要求的数字的个数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">//2.利用循环获取这个范围中的每一个数字</span><br>        <span class="hljs-comment">//开始条件：start</span><br>        <span class="hljs-comment">//结束条件：end</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> start; i &lt;= end; i++) &#123;<br>            <span class="hljs-comment">//3.对每一个数字进行判断，统计有多少个满足要求的数字</span><br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span> &amp;&amp; i % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>) &#123;<br>               <span class="hljs-comment">// System.out.println(i);</span><br>                count++;<br>            &#125;<br>        &#125;<br><br>        System.out.println(count);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-while循环"><a href="#2-while循环" class="headerlink" title="2.while循环"></a>2.while循环</h3><h4 id="1-基本格式-2"><a href="#1-基本格式-2" class="headerlink" title="1.基本格式"></a>1.基本格式</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230107204558791.png" alt="image-20230107204558791"></p><h4 id="2-执行流程-1"><a href="#2-执行流程-1" class="headerlink" title="2.执行流程"></a>2.执行流程</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230107204744937.png" alt="image-20230107204744937"></p><blockquote><p>初始化语句;<br>do{<br>   循环体;<br>   条件控制语句;<br>}while(条件判断语句);</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WhileDemo1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//需求：利用while循环打印1~100</span><br>        <span class="hljs-comment">//分析：</span><br>        <span class="hljs-comment">//开始条件：1</span><br>        <span class="hljs-comment">//结束条件：100</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(i &lt;= <span class="hljs-number">100</span>)&#123;<br>            System.out.println(i);<br>            i++;<br>        &#125;<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-while循环和for循环的区别"><a href="#3-while循环和for循环的区别" class="headerlink" title="3.while循环和for循环的区别"></a>3.while循环和for循环的区别</h4><blockquote><p>for和while循环，是先判断，再执行。</p><p>​do…while是先执行，再判断。</p><p>​当知道循环次数或者循环范围的时候，用for循环。</p><p>​当不知道循环次数，也不知道循环范围，但是知道循环的结束条件时，用while循环。</p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230107205054003.png" alt="image-20230107205054003"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230107205141626.png" alt="image-20230107205141626"></p><blockquote><p>需求：世界最高山峰是珠穆朗玛峰(8844.43米&#x3D;8844430毫米)，假如我有一张足够大的纸，它的厚度是0.1毫米。<br>请问，我折叠多少次，可以折成珠穆朗玛峰的高度</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test17</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/*需求：世界最高山峰是珠穆朗玛峰(8844.43米=8844430毫米)，假如我有一张足够大的纸，它的厚度是0.1毫米。</span><br><span class="hljs-comment">        请问，我折叠多少次，可以折成珠穆朗玛峰的高度?*/</span><br>        <span class="hljs-comment">//分析：折叠纸张：每一次折叠纸张的厚度都是原先的两倍</span><br>        <span class="hljs-comment">// double a = 0.1;</span><br>        <span class="hljs-comment">// a = a * 2;</span><br>        <span class="hljs-comment">// a *= 2</span><br>        <span class="hljs-comment">//1.定义一个变量用来记录山峰的高度</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">height</span> <span class="hljs-operator">=</span> <span class="hljs-number">8844430</span>;<br>        <span class="hljs-comment">//2.定义一个变量用来记录纸张的初始厚度</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">paper</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.1</span>;<br>        <span class="hljs-comment">//3.定义一个变量用来统计次数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//4.循环折叠纸张，只要纸张的厚度小于山峰的高度，那么循环就继续</span><br>        <span class="hljs-comment">//每折叠一次，统计次数就要++</span><br> <span class="hljs-comment">//选择while理由：此时我们不知道循环的次数也不知道循环的范围，只知道循环的结束条件，所以用while</span><br>        <span class="hljs-keyword">while</span>(paper &lt; height)&#123;<br>            <span class="hljs-comment">//折叠纸张</span><br>            paper = paper * <span class="hljs-number">2</span>;<br>            <span class="hljs-comment">//折叠一次，++一次</span><br>            count++;<br>        &#125;<br>        <span class="hljs-comment">//当循环结束之后，count记录的值就是折叠的次数</span><br>        System.out.println(count);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-实践案例-1"><a href="#3-实践案例-1" class="headerlink" title="3.实践案例"></a>3.实践案例</h4><h5 id="1-回文数"><a href="#1-回文数" class="headerlink" title="1.回文数"></a>1.回文数</h5><blockquote><p>需求：给你一个整数 x 。<br>如果 x 是一个回文整数，打印 true ，否则，返回 false 。<br>解释：回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。<br>例如，121 是回文，而 123 不是。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test18</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/*需求：给你一个整数 x 。</span><br><span class="hljs-comment">        如果 x 是一个回文整数，打印 true ，否则，返回 false 。</span><br><span class="hljs-comment">        解释：回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</span><br><span class="hljs-comment">        例如，121 是回文，而 123 不是。*/</span><br><br>        <span class="hljs-comment">//分析：</span><br>        <span class="hljs-comment">//1.定义变量记录整数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">12345</span>;<br>        <span class="hljs-comment">//把x做一个临时存储，用来最后进行判断</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> x;<br>        <span class="hljs-comment">//2.定义变量记录最终的结果（反过来的数字）</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//3.利用循环从右往左获取x中的数字并拼接到result当中</span><br>        <span class="hljs-comment">//while</span><br>        <span class="hljs-keyword">while</span>(x != <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-comment">//获取到x最右边的数字</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">ge</span> <span class="hljs-operator">=</span> x % <span class="hljs-number">10</span>;<br>            <span class="hljs-comment">//获取一次数字之后，那么就要把当前最右边的数字给去掉</span><br>            x = x / <span class="hljs-number">10</span>;<br>            <span class="hljs-comment">//拼接到result当中</span><br>            result = result * <span class="hljs-number">10</span> + ge;<br>        &#125;<br>        System.out.println(result == temp);<br><br>      <span class="hljs-comment">/*  //1.如何获取到3</span><br><span class="hljs-comment">        int ge = x % 10;</span><br><span class="hljs-comment">        result = result + ge;</span><br><span class="hljs-comment">        System.out.println(result);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        //2.把十位2拼接到result里面</span><br><span class="hljs-comment">        int shi = x / 10 % 10;</span><br><span class="hljs-comment">        result = result * 10 + shi;</span><br><span class="hljs-comment">        System.out.println(result);//32</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        //3.把百位拼接到result里面</span><br><span class="hljs-comment">        int bai = x / 100 % 10;</span><br><span class="hljs-comment">        result = result * 10 + bai;</span><br><span class="hljs-comment">        System.out.println(result);//321*/</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-商余数"><a href="#2-商余数" class="headerlink" title="2.商余数"></a>2.商余数</h5><blockquote><p>需求：给定两个整数，被除数和除数（都是正数，且不超过int的范围） 。</p><p>将两数相除，要求不使用乘法、除法和 % 运算符。<br>得到商和余数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-comment">/*需求：给定两个整数，被除数和除数（都是正数，且不超过int的范围） 。</span><br><span class="hljs-comment">        将两数相除，要求不使用乘法、除法和 % 运算符。</span><br><span class="hljs-comment">        得到商和余数。</span><br><span class="hljs-comment">        分析：</span><br><span class="hljs-comment">            被除数 / 除数 = 商 ... 余数</span><br><span class="hljs-comment">        int a = 100;</span><br><span class="hljs-comment">        int b = 10;</span><br><span class="hljs-comment">        100 - 10 = 90</span><br><span class="hljs-comment">        90 - 10 = 80</span><br><span class="hljs-comment">        80 - 10 = 70</span><br><span class="hljs-comment">        70 - 10 = 60</span><br><span class="hljs-comment">        ...</span><br><span class="hljs-comment">        10 - 10 = 0 (余数)</span><br><span class="hljs-comment">  */</span><br>        <span class="hljs-comment">//1.定义变量记录被除数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">dividend</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>        <span class="hljs-comment">//2.定义变量记录除数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">divisor</span> <span class="hljs-operator">=</span> <span class="hljs-number">37</span>;<br>        <span class="hljs-comment">//3.定义一个变量用来统计相减了多少次</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//3.循环 while</span><br>        <span class="hljs-comment">//在循环中，不断的用被除数 - 除数</span><br>        <span class="hljs-comment">//只要被除数 是大于等于除数的，那么就一直循环</span><br>        <span class="hljs-keyword">while</span>(dividend &gt;= divisor)&#123;<br>            dividend = dividend - divisor;<br>            <span class="hljs-comment">//只要减一次，那么统计变量就自增一次</span><br>            count++;<br>        &#125;<br>       <span class="hljs-comment">//当循环结束之后dividend变量记录的就是余数</span><br>        System.out.println(<span class="hljs-string">&quot;余数为：&quot;</span> + dividend);<br>        <span class="hljs-comment">//当循环结束之后，count记录的值就是商</span><br>        System.out.println(<span class="hljs-string">&quot;商为：&quot;</span> + count);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-do-while循环"><a href="#3-do-while循环" class="headerlink" title="3.do-while循环"></a>3.do-while循环</h3><h4 id="1-格式及流程"><a href="#1-格式及流程" class="headerlink" title="1.格式及流程"></a>1.格式及流程</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230107214039168.png" alt="image-20230107214039168"></p><h2 id="4-循环高级"><a href="#4-循环高级" class="headerlink" title="4.循环高级"></a>4.循环高级</h2><h3 id="1-无限循环"><a href="#1-无限循环" class="headerlink" title="1.无限循环"></a>1.无限循环</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230107215313427.png" alt="image-20230107215313427"></p><blockquote><p>无限循环的下面不能再写具他代码了，因为循环永远停不下来，那么下面的代码就远执行不到</p></blockquote><h3 id="2-跳转控制语句"><a href="#2-跳转控制语句" class="headerlink" title="2.跳转控制语句"></a>2.跳转控制语句</h3><blockquote><p>在循环的过程中，跳到其他语句上执行。</p></blockquote><blockquote><h6 id="continue"><a href="#continue" class="headerlink" title="continue:"></a>continue:</h6><p>​不能单独存在的。只能存在于循环当中。</p><p>​表示：跳过本次循环，继续执行下次循环。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.吃1~5号包子</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>    <span class="hljs-comment">//2.第3个包子有虫子就跳过，继续吃下面的包子</span><br>    <span class="hljs-keyword">if</span>(i == <span class="hljs-number">3</span>)&#123;<br>        <span class="hljs-comment">//跳过本次循环（本次循环中，下面的代码就不执行了），继续执行下次循环。</span><br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;在吃第&quot;</span> + i + <span class="hljs-string">&quot;个包子&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><h6 id="break"><a href="#break" class="headerlink" title="break:"></a>break:</h6><p>​不能单独存在的。可以用在switch和循环中，表示结束，跳出的意思。</p><p>代码示例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.吃1~5号包子</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>    System.out.println(<span class="hljs-string">&quot;在吃第&quot;</span> + i + <span class="hljs-string">&quot;个包子&quot;</span>);<br>    <span class="hljs-comment">//2.吃完第三个的时候就不吃了</span><br>    <span class="hljs-keyword">if</span>(i == <span class="hljs-number">3</span>)&#123;<br>        <span class="hljs-keyword">break</span>;<span class="hljs-comment">//结束整个循环。</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230107220328748.png" alt="image-20230107220328748"></p><h2 id="5-循环练习"><a href="#5-循环练习" class="headerlink" title="5.循环练习"></a>5.循环练习</h2><h3 id="1-逢七过"><a href="#1-逢七过" class="headerlink" title="1.逢七过"></a>1.逢七过</h3><blockquote><p>需求：</p><p>朋友聚会的时候可能会玩一个游戏：逢7过 </p><p>游戏规则：从任意一个数字开始报数，当你要报的数字是包含7或者是7的倍数时都要说过：过</p><p>使用程序在控制台打印出1-100之间的满足逢七必过规则的数据 </p><p>举例：</p><p>​1 2 3 4 5 6 过 8 9 10 11 12 13 过 15 16 过 18 …</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*朋友聚会的时候可能会玩一个游戏：逢7过</span><br><span class="hljs-comment">        游戏规则：从任意一个数字开始报数，当你要报的数字是包含7或者是7的倍数时都要说过：过</span><br><span class="hljs-comment">        需求：使用程序在控制台打印出1-100之间的满足逢七必过规则的数据*/</span><br><span class="hljs-comment">//分析：</span><br><span class="hljs-comment">//个位7  十位7   7倍数</span><br><span class="hljs-comment">//1 2 3 4 5 6 过 8 9 10 11 12 13 过 15 16 过 18 19 20 过....</span><br><span class="hljs-comment">//69 过 过 过 过 过 过... 80</span><br><span class="hljs-comment">//1.得到1~100之间的每一个数字</span><br><span class="hljs-comment">//开始：1</span><br><span class="hljs-comment">//结束：100</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>    <span class="hljs-comment">//2.判断每一个数字，如果符合规则，就打印过，如果不符合规则就打印真实的数字</span><br>    <span class="hljs-keyword">if</span>(i % <span class="hljs-number">10</span> == <span class="hljs-number">7</span> || i / <span class="hljs-number">10</span> % <span class="hljs-number">10</span> == <span class="hljs-number">7</span>  ||  i % <span class="hljs-number">7</span> == <span class="hljs-number">0</span>)&#123;<br>        System.out.println(<span class="hljs-string">&quot;过&quot;</span>);<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>    System.out.println(i);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-平方根"><a href="#2-平方根" class="headerlink" title="2.平方根"></a>2.平方根</h3><blockquote><p>需求：</p><p>​键盘录入一个大于等于2的整数 x ，计算并返回 x 的 平方根 。结果只保留整数部分 ，小数部分将被舍去</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*需求：键盘录入一个大于等于2的整数 x ，计算并返回 x 的 平方根 。</span><br><span class="hljs-comment">        结果只保留整数部分 ，小数部分将被舍去 。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//分析：</span><br><span class="hljs-comment">//平方根   16的平方根4</span><br><span class="hljs-comment">//         4的平方根2</span><br><span class="hljs-comment">// 10</span><br><span class="hljs-comment">// 1 * 1 = 1 &lt; 10</span><br><span class="hljs-comment">// 2 * 2 = 4 &lt; 10</span><br><span class="hljs-comment">// 3 * 3 = 9 &lt; 10</span><br><span class="hljs-comment">// 4 * 4 = 16 &gt; 10</span><br><span class="hljs-comment">//推断：10的平方根是在3~4之间。</span><br><span class="hljs-comment">// 20</span><br><span class="hljs-comment">// 1 * 1 = 1 &lt; 20</span><br><span class="hljs-comment">// 2 * 2 = 4 &lt; 20</span><br><span class="hljs-comment">// 3 * 3 = 9 &lt; 20</span><br><span class="hljs-comment">// 4 * 4 = 16 &lt; 20</span><br><span class="hljs-comment">// 5 * 5 = 25 &gt; 20</span><br><span class="hljs-comment">//推断：20的平方根是在4~5之间。</span><br><span class="hljs-comment">//在代码当中</span><br><span class="hljs-comment">//从1开始循环，拿着数字的平方跟原来的数字进行比较</span><br><span class="hljs-comment">//如果小于的，那么继续往后判断</span><br><span class="hljs-comment">//如果相等，那么当前数字就是平方根</span><br><span class="hljs-comment">//如果大于的，那么前一个数字就是平方跟的整数部分</span><br><span class="hljs-comment">//1.键盘录入一个整数</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;请输入一个整数&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> sc.nextInt();<br><span class="hljs-comment">//2.从1开始循环判断</span><br><span class="hljs-comment">//开始：1 结束: number</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= number; i++) &#123;<br>    <span class="hljs-comment">//用i * i 再跟number进行比较</span><br>    <span class="hljs-keyword">if</span>(i * i == number)&#123;<br>        System.out.println(i + <span class="hljs-string">&quot;就是&quot;</span> + number + <span class="hljs-string">&quot;的平方根&quot;</span>);<br>        <span class="hljs-comment">//一旦找到了，循环就可以停止了，后面的数字就不需要再找了，提高代码的运行效率。</span><br>        <span class="hljs-keyword">break</span>;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i * i &gt; number)&#123;<br>        System.out.println((i - <span class="hljs-number">1</span>) + <span class="hljs-string">&quot;就是&quot;</span> + number + <span class="hljs-string">&quot;平方根的整数部分&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-求质数"><a href="#3-求质数" class="headerlink" title="3.求质数"></a>3.求质数</h3><blockquote><p>键盘输入一个数 判断这个数是不是一个质数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//需求：键盘录入一个正整数 x ，判断该整数是否为一个质数。</span><br><br><span class="hljs-comment">//质数：</span><br><span class="hljs-comment">//如果一个整数只能被1和本身整除，那么这个数就是质数。否则这个数叫做合数</span><br><span class="hljs-comment">//7 = 1 * 7 质数</span><br><span class="hljs-comment">//8 = 1 * 8  2 * 4 合数</span><br><br><br><span class="hljs-comment">//分析：</span><br><span class="hljs-comment">//1.键盘录入一个正整数</span><br><span class="hljs-comment">//number</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;请输入一个正整数&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> sc.nextInt();<span class="hljs-comment">//9</span><br><br><span class="hljs-comment">//定义一个变量，表示标记</span><br><span class="hljs-comment">//标记着number是否为一个质数</span><br><span class="hljs-comment">//true： 是一个质数</span><br><span class="hljs-comment">//false : 不是一个质数</span><br><br><span class="hljs-comment">//表示最初就认为number是一个质数</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><span class="hljs-comment">//2.判断</span><br><span class="hljs-comment">//写一个循环，从2开始判断，一直判断到number-1为止</span><br><span class="hljs-comment">//看这个范围之内，有没有数字可以被number整除</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt; number; i++) &#123;<br>    <span class="hljs-comment">//i 依次表示这个范围之内的每一个数字</span><br>    <span class="hljs-comment">//看number是否能被i整除就可以了</span><br>    <span class="hljs-keyword">if</span>(number % i == <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">// 9 % 2 = 1</span><br>        flag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-comment">//System.out.println(number + &quot;不是一个质数&quot;);</span><br>        <span class="hljs-keyword">break</span>;<br>    &#125;<span class="hljs-comment">/*else&#123;</span><br><span class="hljs-comment">                System.out.println(number + &quot;是一个质数&quot;);</span><br><span class="hljs-comment">            &#125;*/</span><br>&#125;<br><span class="hljs-comment">//只有当这个循环结束了，表示这个范围之内所有的数字都判断完毕了</span><br><span class="hljs-comment">//此时才能断定number是一个质数</span><br><span class="hljs-keyword">if</span>(flag)&#123;<br>    System.out.println(number + <span class="hljs-string">&quot;是一个质数&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    System.out.println(number + <span class="hljs-string">&quot;不是一个质数&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-猜数字"><a href="#4-猜数字" class="headerlink" title="4.猜数字"></a>4.猜数字</h3><blockquote><p>需求：</p><p>​程序自动生成一个1-100之间的随机数，在代码中使用键盘录入去猜出这个数字是多少？</p><p>要求：</p><p>​使用循环猜，一直猜中为止</p></blockquote><blockquote><ol><li>生成一个1-100之间的随机数</li><li>使用键盘录入去猜出这个数字是多少</li><li>把反复猜的代码写在循环中</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.生成一个1-100之间的随机数</span><br><span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> r.nextInt(<span class="hljs-number">100</span>) + <span class="hljs-number">1</span>;<span class="hljs-comment">// 0 ~ 99 + 1 --- 1 ~ 100</span><br>System.out.println(number);<br><br><span class="hljs-comment">//2.使用键盘录入去猜出这个数字是多少？</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>    System.out.println(<span class="hljs-string">&quot;请输入一个整数&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">guessNumber</span> <span class="hljs-operator">=</span> sc.nextInt();<br>    <span class="hljs-comment">//3.比较</span><br>    <span class="hljs-keyword">if</span>(guessNumber &gt; number)&#123;<br>        System.out.println(<span class="hljs-string">&quot;您猜的数字大了&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(guessNumber &lt; number)&#123;<br>        System.out.println(<span class="hljs-string">&quot;您猜的数字小了&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;恭喜你，猜中了&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>随机范围的数字生成秘诀7-15</p><p>1.让这个范围头尾都减去一个值，让这个范围从0开始 -7 0-8</p><p>2.尾巴+1 8+1&#x3D;9</p><p>3-最终的结果，再加上第一步减去的值</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java成长之路</category>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
      <tag>流程控制语句</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day02-1-4-Java-基础学习-运算符</title>
    <link href="/2023/01/03/Day02-1-4-Java-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2023/01/03/Day02-1-4-Java-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="Day02-1-4-Java-基础学习-运算符"><a href="#Day02-1-4-Java-基础学习-运算符" class="headerlink" title="Day02-1-4-Java-基础学习-运算符"></a>Day02-1-4-Java-基础学习-运算符</h1><h2 id="1-运算符和表达式"><a href="#1-运算符和表达式" class="headerlink" title="1.运算符和表达式"></a>1.运算符和表达式</h2><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><blockquote><p>运算符：对字面量或者变量进行操作的符号。</p><p>表达式：用运算符把字面量或者变量连接起来，符合java语法的式子就可以称为表达式。</p><p>​       不同运算符连接的表达式体现的是不同类型的表达式。</p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230104131927449.png" alt="image-20230104131927449"></p><h2 id="2-算术运算符"><a href="#2-算术运算符" class="headerlink" title="2.算术运算符"></a>2.算术运算符</h2><h3 id="1-基本概念-1"><a href="#1-基本概念-1" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230104132743859.png" alt="image-20230104132743859"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">+ - * :跟小学数学中一模一样没有任何区别<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">/：除法<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">1.整数相除结果只能得到整除，如果结果想要是小数，必须要有小数参数。</span><br><span class="hljs-comment">2.小数直接参与运算，得到的结果有可能是不精确的。</span><br><span class="hljs-comment">*/</span>   <br>案例：<br>System.out.println( <span class="hljs-number">10</span> / <span class="hljs-number">3</span>);<span class="hljs-comment">//3</span><br>System.out.println(<span class="hljs-number">10.0</span> / <span class="hljs-number">3</span>);<span class="hljs-comment">//3.3333333333333335</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">%：取模、取余。<br>   他做的也是除法运算，只不过获取的是余数而已。<br>案例：<br>System.out.println(<span class="hljs-number">10</span> % <span class="hljs-number">2</span>);<span class="hljs-comment">//0</span><br>System.out.println(<span class="hljs-number">10</span> % <span class="hljs-number">3</span>);<span class="hljs-comment">//1</span><br>应用场景：<br><span class="hljs-comment">//可以利用取模来判断一个数是奇数还是偶数</span><br>System.out.println(<span class="hljs-number">15</span> % <span class="hljs-number">2</span>);<span class="hljs-comment">//1  奇数</span><br></code></pre></td></tr></table></figure><h3 id="2-运算符案例"><a href="#2-运算符案例" class="headerlink" title="2.运算符案例"></a>2.运算符案例</h3><blockquote><p>需求：键盘录入一个三位数，将其拆分为个位、十位、百位后，打印在控制台</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.键盘录入一个三位数</span><br><span class="hljs-comment">//导包 --- 创建对象 --- 接收数据</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;请输入一个三位数&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> sc.nextInt();<span class="hljs-comment">//123</span><br><span class="hljs-comment">//2.获取这个三位数的个位、十位、百位并打印出来</span><br><span class="hljs-comment">//公式：</span><br><span class="hljs-comment">//针对于任意的一个数而言</span><br><span class="hljs-comment">//个位： 数字 % 10</span><br><span class="hljs-type">int</span> <span class="hljs-variable">ones</span> <span class="hljs-operator">=</span> number % <span class="hljs-number">10</span>;<br><span class="hljs-comment">//十位： 数字 / 10 % 10</span><br><span class="hljs-type">int</span> <span class="hljs-variable">tens</span> <span class="hljs-operator">=</span> number / <span class="hljs-number">10</span> % <span class="hljs-number">10</span>;<br><span class="hljs-comment">//百位： 数字 / 100 % 10</span><br><span class="hljs-type">int</span> <span class="hljs-variable">hundreds</span> <span class="hljs-operator">=</span> number / <span class="hljs-number">100</span>  % <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><h3 id="3-数据类型转换"><a href="#3-数据类型转换" class="headerlink" title="3.数据类型转换"></a>3.数据类型转换</h3><h4 id="1-自动类型转换"><a href="#1-自动类型转换" class="headerlink" title="1.自动类型转换"></a>1.自动类型转换</h4><blockquote><p>也叫自动类型提升。</p><p>就是把一个取值范围小的数据或者变量，赋值给另一个取值范围大的变量。此时不需要我们额外写代码单独实现，是程序自动帮我们完成的.</p><p>就是小的给大的，可以直接给</p><p> 提升规则：</p><ul><li>取值范围小的，和取值范围大的进行运算，小的会先提升为大的，再进行运算。</li><li>byte、short、char三种类型的数据在运算的时候，都会直接先提升为int，然后再进行运算</li><li>byte short int long float double（取值范围从大到小）</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>System.out.println(d);<span class="hljs-comment">//10.0</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">10是整数，整数默认是int类型的。</span><br><span class="hljs-comment">而在取值范围的顺序中：byte short int long float double</span><br><span class="hljs-comment">在赋值的时候把一个int类型的赋值给了一个double类型的。把一个小的赋值给一个大的是可以直接给的。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230104142055164.png" alt="image-20230104142055164"></p><h4 id="2-强制转换"><a href="#2-强制转换" class="headerlink" title="2.强制转换"></a>2.强制转换</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230104144103293.png" alt="image-20230104144103293"></p><blockquote><p>如果要把一个取值范围大的数据或者变量赋值给另一个取值范围小的变量。是不允许直接操作。如果一定要这么干，就需要加入强制转换</p><p>​目标数据类型 变量名 &#x3D; （目标数据类型）被强转的数据；</p><p>简单理解：</p><p>​要转成什么类型的，那么就在小括号中写什么类型就可以了。</p><p>注意点：</p><p>​强制转换有可能会导致数据发生错误。（数据的精度丢失）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperatorDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">12.3</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) a;<br>        System.out.println(b);<span class="hljs-comment">//12</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-字符串拼接-相加"><a href="#4-字符串拼接-相加" class="headerlink" title="4.字符串拼接(相加)"></a>4.字符串拼接(相加)</h3><blockquote><ul><li>当+操作中出现字符串时，此时就是字符串的连接符，会将前后的数据进行拼接，并产生一个新的字符串。</li><li>当连续进行+操作时，从左到右逐个执行的。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span> + <span class="hljs-string">&quot;abc&quot;</span> + <span class="hljs-number">1</span><br> <span class="hljs-comment">//结果 &quot;1abc1&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span> + <span class="hljs-number">2</span> + <span class="hljs-string">&quot;abc&quot;</span> + <span class="hljs-number">2</span> + <span class="hljs-number">1</span><br>    <span class="hljs-comment">//“3abc21”</span><br>第一步：<span class="hljs-number">1</span> + <span class="hljs-number">2</span> 。在这个过程中，没有字符串参与的，所以做的是加法运算，结果为<span class="hljs-number">3</span>。<br>第二步：<span class="hljs-number">3</span> + <span class="hljs-string">&quot;abc&quot;</span>。在这个过程中，有字符串参与的，所以做的是拼接操作，产生一个新的字符串<span class="hljs-string">&quot;3abc&quot;</span>。<br>第三步：<span class="hljs-string">&quot;3abc&quot;</span> + <span class="hljs-number">2</span>。在这个过程中，有字符串参与的，所以做的是拼接操作，产生一个新的字符串<span class="hljs-string">&quot;3abc2&quot;</span>。<br>第四步：<span class="hljs-string">&quot;3abc2&quot;</span> + <span class="hljs-number">1</span>。在这个过程中，有字符串参与的，所以做的是拼接操作，产生一个新的字符串“3abc21”<br></code></pre></td></tr></table></figure><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230104145257803.png" alt="image-20230104145257803"></p><h3 id="5-字符相加"><a href="#5-字符相加" class="headerlink" title="5.字符相加"></a>5.字符相加</h3><blockquote><p>当+操作中出现了字符，会拿着字符到计算机内置的ASCII码表中去查对应的数字，然后再进行计算。</p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230104150003428.png" alt="image-20230104150003428"></p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230104145911170.png" alt="image-20230104145911170"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230104150118269.png" alt="image-20230104150118269"></p><h3 id="6-算术运算符小结"><a href="#6-算术运算符小结" class="headerlink" title="6.算术运算符小结"></a>6.算术运算符小结</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230104150315458.png" alt="image-20230104150315458"></p><h2 id="3-自增自减运算符"><a href="#3-自增自减运算符" class="headerlink" title="3.自增自减运算符"></a>3.自增自减运算符</h2><h3 id="1-单独使用"><a href="#1-单独使用" class="headerlink" title="1.单独使用"></a>1.单独使用</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230104150555468.png" alt="image-20230104150555468"></p><blockquote><ul><li>放在变量的前面，我们叫做先++。 比如：++a</li><li>放在变量的后面，我们叫做后++。 比如：a++</li><li>不管是先++，还是后++。单独写在一行的时候，运算结果是一模一样的。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//++</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>a++;<span class="hljs-comment">//就是让变量a里面的值 + 1</span><br>System.out.println(a);<span class="hljs-comment">//11</span><br>++a;<span class="hljs-comment">//就是让变量a里面的值 + 1</span><br>System.out.println(a);<span class="hljs-comment">//12</span><br></code></pre></td></tr></table></figure><h3 id="2-参与计算"><a href="#2-参与计算" class="headerlink" title="2.参与计算"></a>2.参与计算</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230104161519933.png" alt="image-20230104161519933"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230104161419004.png" alt="image-20230104161419004"></p><h2 id="4-赋值运算符"><a href="#4-赋值运算符" class="headerlink" title="4.赋值运算符"></a>4.赋值运算符</h2><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230104162530481.png" alt="image-20230104162530481"></p><blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230104162553311.png" alt="image-20230104162553311"></p></blockquote><blockquote><p>扩展的赋值运算符中隐层还包含了一个强制转换。</p><p>以+&#x3D;为例。</p><p>a +&#x3D; b ;实际上相当于 a &#x3D; (byte)(a + b);</p></blockquote><h2 id="5-关系-比较-运算符"><a href="#5-关系-比较-运算符" class="headerlink" title="5.关系(比较)运算符"></a>5.关系(比较)运算符</h2><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230104163019350.png" alt="image-20230104163019350"></p><h2 id="6-逻辑运算符"><a href="#6-逻辑运算符" class="headerlink" title="6.逻辑运算符"></a>6.逻辑运算符</h2><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230104163715755.png" alt="image-20230104163715755"></p><blockquote><p>&amp;：逻辑与（而且）</p><p>​两边都为真，结果才是真，只要有一个为假，那么结果就是假。</p><p>|：逻辑或（或者）</p><p>​两边都为假，结果才是假，只要有一个为真，那么结果就是真</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// &amp;  //两边都是真，结果才是真。</span><br>System.out.println(<span class="hljs-literal">true</span> &amp; <span class="hljs-literal">true</span>);<span class="hljs-comment">//true</span><br>System.out.println(<span class="hljs-literal">false</span> &amp; <span class="hljs-literal">false</span>);<span class="hljs-comment">//false</span><br>System.out.println(<span class="hljs-literal">true</span> &amp; <span class="hljs-literal">false</span>);<span class="hljs-comment">//false</span><br>System.out.println(<span class="hljs-literal">false</span> &amp; <span class="hljs-literal">true</span>);<span class="hljs-comment">//false</span><br><br>System.out.println(<span class="hljs-string">&quot;===================================&quot;</span>);<br><br><span class="hljs-comment">// | 或  //两边都是假，结果才是假，如果有一个为真，那么结果就是真。</span><br>System.out.println(<span class="hljs-literal">true</span> | <span class="hljs-literal">true</span>);<span class="hljs-comment">//true</span><br>System.out.println(<span class="hljs-literal">false</span> | <span class="hljs-literal">false</span>);<span class="hljs-comment">//false</span><br>System.out.println(<span class="hljs-literal">true</span> | <span class="hljs-literal">false</span>);<span class="hljs-comment">//true</span><br>System.out.println(<span class="hljs-literal">false</span> | <span class="hljs-literal">true</span>);<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><blockquote><h6 id="（异或）的使用："><a href="#（异或）的使用：" class="headerlink" title="^（异或）的使用："></a>^（异或）的使用：</h6><p>​在以后用的不多，了解一下即可。</p><p>计算规则：如果两边相同，结果为false，如果两边不同，结果为true</p><h6 id="（取反）的使用："><a href="#（取反）的使用：" class="headerlink" title="!（取反）的使用："></a>!（取反）的使用：</h6><p>是取反，也叫做非。</p><p>计算规则：false取反就是true，true取反就是false</p><p>温馨提示：取反最多只用一个</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//^   //左右不相同，结果才是true，左右相同结果就是false</span><br>System.out.println(<span class="hljs-literal">true</span> ^ <span class="hljs-literal">true</span>);<span class="hljs-comment">//false</span><br>System.out.println(<span class="hljs-literal">false</span> ^ <span class="hljs-literal">false</span>);<span class="hljs-comment">//false</span><br>System.out.println(<span class="hljs-literal">true</span> ^ <span class="hljs-literal">false</span>);<span class="hljs-comment">//true</span><br>System.out.println(<span class="hljs-literal">false</span> ^ <span class="hljs-literal">true</span>);<span class="hljs-comment">//true</span><br><span class="hljs-comment">// !（取反）的使用：计算规则：false取反就是true，true取反就是false</span><br>System.out.println(!<span class="hljs-literal">false</span>);<span class="hljs-comment">//true</span><br>System.out.println(!<span class="hljs-literal">true</span>);<span class="hljs-comment">//false</span><br>System.out.println(!!<span class="hljs-literal">false</span>);<span class="hljs-comment">//注意点：取反最多只用一个。</span><br></code></pre></td></tr></table></figure><h2 id="7-短路逻辑运算符"><a href="#7-短路逻辑运算符" class="headerlink" title="7.短路逻辑运算符"></a>7.短路逻辑运算符</h2><blockquote><h6 id="amp-amp-："><a href="#amp-amp-：" class="headerlink" title="&amp;&amp;："></a>&amp;&amp;：</h6><p>​运算结果跟&amp;是一模一样的，只不过具有短路效果。</p><h6 id="："><a href="#：" class="headerlink" title="||："></a>||：</h6><p>​运算结果跟|是一模一样的。只不过具有短路效果。</p><p>​    当左边不能确定整个表达式的结果，右边才会执行。</p><p>​当左边能确定整个表达式的结果，那么右边就不会执行了。从而提高了代码的运行效率</p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230104172725069.png" alt="image-20230104172725069"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//3.短路逻辑运算符具有短路效果</span><br>      <span class="hljs-comment">//简单理解：当左边的表达式能确定最终的结果，那么右边就不会参与运行了</span><br>      <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>      <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> ++a &lt; <span class="hljs-number">5</span> &amp; ++b &lt; <span class="hljs-number">5</span>;<br>      System.out.println(result);<span class="hljs-comment">//false</span><br>      System.out.println(a);<span class="hljs-comment">//11</span><br>      System.out.println(b);<span class="hljs-comment">//10</span><br></code></pre></td></tr></table></figure><h2 id="8-三元运算符"><a href="#8-三元运算符" class="headerlink" title="8.三元运算符"></a>8.三元运算符</h2><blockquote><p>又叫做：三元表达式或者问号冒号表达式</p><p>关系表达式 ？ 表达式1 ：表达式2 ；</p><p>计算规则：</p><ul><li>计算关系表达式的值。</li><li>如果关系表达式的值为真，那么执行表达式1。</li><li>如果关系表达式的值为假，那么执行表达式2。</li><li>三元运算符的最终结果一定要被使用，要么赋值给一个变量，要么直接打印出来。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperatorDemo12</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//需求：求两个数的较大值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-comment">//格式：关系表达式 ？ 表达式1 ： 表达式2 ；</span><br>        <span class="hljs-comment">//注意点：</span><br>        <span class="hljs-comment">//三元运算符的最终结果一定要被使用。</span><br>        <span class="hljs-comment">//要么赋值给一个变量，要么直接输出。</span><br>       <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span>  a &gt; b ? a : b ;<br>        System.out.println(max);<br>        System.out.println(a &gt; b ? a : b);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="10-运算符的优先级"><a href="#10-运算符的优先级" class="headerlink" title="10.运算符的优先级"></a>10.运算符的优先级</h2><blockquote><p>在Java中涉及了很多的运算符，每一种运算符都有各自的优先级。但是这些优先级不需要记忆。</p><p>咱们只要知道其中一点：</p><p>​小括号优先于所有。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java成长之路</category>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
      <tag>运算符</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day01-1-3-前端-基础学习-HTML</title>
    <link href="/2023/01/03/Day01-1-3-%E5%89%8D%E7%AB%AF-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-HTML/"/>
    <url>/2023/01/03/Day01-1-3-%E5%89%8D%E7%AB%AF-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-HTML/</url>
    
    <content type="html"><![CDATA[<h1 id="Day01-1-3-前端-基础学习-HTML"><a href="#Day01-1-3-前端-基础学习-HTML" class="headerlink" title="Day01-1-3-前端-基础学习-HTML"></a>Day01-1-3-前端-基础学习-HTML</h1><h2 id="1-Web基础入门"><a href="#1-Web基础入门" class="headerlink" title="1.Web基础入门"></a>1.Web基础入门</h2><h3 id="1-Web标准"><a href="#1-Web标准" class="headerlink" title="1.Web标准"></a>1.Web标准</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221227152450218.png" alt="image-20221227152450218"></p><h3 id="2-Web标准构成"><a href="#2-Web标准构成" class="headerlink" title="2.Web标准构成"></a>2.Web标准构成</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221227154427948.png" alt="image-20221227154427948"></p><h3 id="3-Web标准的记忆方法"><a href="#3-Web标准的记忆方法" class="headerlink" title="3.Web标准的记忆方法"></a>3.Web标准的记忆方法</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221227154811796.png" alt="image-20221227154811796"></p><h3 id="4-小结"><a href="#4-小结" class="headerlink" title="4.小结"></a>4.小结</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221227155018889.png" alt="image-20221227155018889"></p><h2 id="2-HTML-基础标签01"><a href="#2-HTML-基础标签01" class="headerlink" title="2.HTML-基础标签01"></a>2.HTML-基础标签01</h2><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">HTML</span>的全称为超文本标记语言，是一种标记语言。它包括一系列标签．通过这些标签可以将网络上的文档格式统一，使分散的Internet资源连接为一个逻辑整体。<span class="hljs-selector-tag">HTML</span>文本是由<span class="hljs-selector-tag">HTML</span>命令组成的描述性文本，<span class="hljs-selector-tag">HTML</span>命令可以说明文字，图形、动画、声音、表格、链接等。<br>超文本是一种组织信息的方式，它通过超级链接方法将文本中的文字、图表与其他信息媒体相关联。这些相互关联的信息媒体可能在同一文本中，也可能是其他文件，或是地理位置相距遥远的某台计算机上的文件。这种组织信息方式将分布在不同位置的信息资源用随机方式进行连接，为人们查找，检索信息提供方便.<br></code></pre></td></tr></table></figure><h3 id="2-HTML骨架结构"><a href="#2-HTML骨架结构" class="headerlink" title="2.HTML骨架结构"></a>2.HTML骨架结构</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221227161124700.png" alt="image-20221227161124700"></p><h3 id="3-第一个HTML"><a href="#3-第一个HTML" class="headerlink" title="3.第一个HTML"></a>3.第一个HTML</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>html骨架<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>第一个html页面<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>第一个html页面<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-HTML的注释"><a href="#3-HTML的注释" class="headerlink" title="3.HTML的注释"></a>3.HTML的注释</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 这是html的注释 --&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-标签组成关系"><a href="#4-标签组成关系" class="headerlink" title="4.标签组成关系"></a>4.标签组成关系</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221227185301004.png" alt="image-20221227185301004"></p><h3 id="5-标题标签"><a href="#5-标题标签" class="headerlink" title="5.标题标签"></a>5.标题标签</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221227190219414.png" alt="image-20221227190219414"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这是1级标题标签<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>这是2级标题标签<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>这是3级标题标签<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>这是4级标题标签<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>这是5级标题标签<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>这是6级标题标签<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>这是7级标题标签<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>这是8级标题标签<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="6-段落标签"><a href="#6-段落标签" class="headerlink" title="6.段落标签"></a>6.段落标签</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221227191134494.png" alt="image-20221227191134494"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 这是段落标签 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>阿卡贝拉(意大利: kcaplla 周无律奏合唱。其起源可追潇至中世纪的救会音乐，当时的教会音乐只以人声清唱<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&quot;翻唱”是指将已经发表并由他人演唱的歌曲根据自己的风格里新演唱<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="7-换行标签"><a href="#7-换行标签" class="headerlink" title="7.换行标签"></a>7.换行标签</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221227191632103.png" alt="image-20221227191632103"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>其起源可追溯至中世纪的教会音乐，<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>当时的教会音乐只以人声清唱，并其起源可追溯至中世纪的教会音乐，当时的教会<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="8-水平线标签"><a href="#8-水平线标签" class="headerlink" title="8.水平线标签"></a>8.水平线标签</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221227191751513.png" alt="image-20221227191751513"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>这设计文章的标题<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>        其起源可追溯至中世纪的教会音乐，<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span>当时的教会音乐只以人声清唱，并其起源可追溯至中世纪的教会音乐，当时的教会<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="9-文本格式化标签"><a href="#9-文本格式化标签" class="headerlink" title="9.文本格式化标签"></a>9.文本格式化标签</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221227192108358.png" alt="image-20221227192108358"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 当为了体现语境的重要性时 使用带有英文字母的那一组 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 加粗标签 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>加粗<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>加粗<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 下划线标签 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span>下划线<span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ins</span>&gt;</span>下划线<span class="hljs-tag">&lt;/<span class="hljs-name">ins</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 倾斜标签 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>倾斜<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>倾斜<span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- 删除线标签 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">s</span>&gt;</span>删除线标签<span class="hljs-tag">&lt;/<span class="hljs-name">s</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">del</span>&gt;</span>删除线标签<span class="hljs-tag">&lt;/<span class="hljs-name">del</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="10-标签语义化"><a href="#10-标签语义化" class="headerlink" title="10.标签语义化"></a>10.标签语义化</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221227193141525.png" alt="image-20221227193141525"></p><h2 id="3-HTML-基础标签02"><a href="#3-HTML-基础标签02" class="headerlink" title="3.HTML-基础标签02"></a>3.HTML-基础标签02</h2><h3 id="1-图片标签"><a href="#1-图片标签" class="headerlink" title="1.图片标签"></a>1.图片标签</h3><h4 id="1-基本概念-1"><a href="#1-基本概念-1" class="headerlink" title="1.基本概念"></a>1.基本概念</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221227195319020.png" alt="image-20221227195319020"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./images/de.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-图片属性-alt"><a href="#2-图片属性-alt" class="headerlink" title="2.图片属性(alt)"></a>2.图片属性(alt)</h4><h4 id="3-图片属性-title"><a href="#3-图片属性-title" class="headerlink" title="3.图片属性(title)"></a><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221227201029381.png" alt="image-20221227201029381">3.图片属性(title)</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221227201118559.png" alt="image-20221227201118559"></p><h4 id="4-图片属性-height和width"><a href="#4-图片属性-height和width" class="headerlink" title="4.图片属性(height和width)"></a>4.图片属性(height和width)</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221227201339122.png" alt="image-20221227201339122"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 图片标签 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- src 表示图片的路径  alt 是一个替换文本 当图片不显示时 就会显示替换文本--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./images/de.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./images/de1.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;这是一只猫&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  height width 表示图片的宽度和长度 一般只设置一个 -&gt;</span><br><span class="hljs-comment">    &lt;img src=&quot;./images/de.png&quot; title=&quot;测试数据&quot; height=&quot;200&quot; width=&quot;600&quot;&gt;</span><br><span class="hljs-comment">&lt;/body&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-文件绝对路径"><a href="#2-文件绝对路径" class="headerlink" title="2.文件绝对路径"></a>2.文件绝对路径</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221227205541300.png" alt="image-20221227205541300"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 图片的绝对路径 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;G:\前端代码\day01-12-27-代码\images\de.png&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-文件相对路径"><a href="#3-文件相对路径" class="headerlink" title="3.文件相对路径"></a>3.文件相对路径</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221227211454842.png" alt="image-20221227211454842"></p><h4 id="1-同级目录"><a href="#1-同级目录" class="headerlink" title="1.同级目录"></a>1.同级目录</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221227213128233.png" alt="image-20221227213128233"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 1.同级写法 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;de.png&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./de.png&quot;</span></span><br></code></pre></td></tr></table></figure><h4 id="2-下级目录"><a href="#2-下级目录" class="headerlink" title="2.下级目录"></a>2.下级目录</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221227220244268.png" alt="image-20221227220244268"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 2.下级写法  html文件的目录是需要导入的图片的上级 也就是 导入文件是当前html文件的下级 --&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./images/de.png&quot;</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;images/de.png&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-上级目录"><a href="#3-上级目录" class="headerlink" title="3.上级目录"></a>3.上级目录</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221227221057234.png" alt="image-20221227221057234"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 3.上级写法  html文件的目录是需要导入的文件的下一级  也就是导入文件是当前文件的上级 --&gt;</span><br><span class="hljs-comment">&lt;!-- ../表示上一级 ../../表示上两级 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../day01-12-27-代码/images/de.png&quot;</span> &lt;/<span class="hljs-attr">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-音频标签"><a href="#4-音频标签" class="headerlink" title="4.音频标签"></a>4.音频标签</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221227223249955.png" alt="image-20221227223249955"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- autoplay 表示自动播放  controls 表示显示音频控件  loop表示循环播放--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./images/demo.mp3&quot;</span> <span class="hljs-attr">autoplay</span> <span class="hljs-attr">controls</span> <span class="hljs-attr">loop</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-视频标签"><a href="#5-视频标签" class="headerlink" title="5.视频标签"></a>5.视频标签</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221227224820341.png" alt="image-20221227224820341"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--  视频标签 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- autoplay 表示自动播放(谷歌浏览器使用muted来实现静音自动播放)  controls 表示显示视频控件  loop表示循环播放--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./images/demo.mp3&quot;</span> <span class="hljs-attr">autoplay</span> <span class="hljs-attr">muted</span> <span class="hljs-attr">controls</span> <span class="hljs-attr">loop</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="6-超链接"><a href="#6-超链接" class="headerlink" title="6.超链接"></a>6.超链接</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221227230405914.png" alt="image-20221227230405914"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221227230432443.png" alt="image-20221227230432443"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 超链接标签 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- 网址版 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http:www.baidu.com&quot;</span>&gt;</span>跳转到百度<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--本地文件版  --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./07-图片标签.html&quot;</span>&gt;</span>07-图片标签.html<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--当开发网站初期，我们还不知道跳转地址的时候，href的值书写#(空链接）--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>空链接写法<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br> <span class="hljs-comment">&lt;!-- target表示网页的打开形式 _self(默认值 当前页面跳转 覆盖原网页 _blank表示新窗口跳转 保留原网页) --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http:www.baidu.com&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="7-综合案例01"><a href="#7-综合案例01" class="headerlink" title="7.综合案例01"></a>7.综合案例01</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221228115025640.png" alt="image-20221228115025640"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>腾讯科技高级web前端开发岗位<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>职位描述<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>5国点项的前锅技术方案和R0的研发和维护工作:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>岗位要求<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>五年以上开发经验，<span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span>精通htm5/css3/javascriptl<span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span>等web开发技术<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>熟悉bootstrap. vue， angularjs,reactjs等框架，熟练掌握一种以上;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>熟悉bootstrap. vue， angularjs,reactjs等框架，熟练掌握一种以上;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>熟悉bootstrap. vue， angularjs,reactjs等框架，熟练掌握一种以上;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>工作地址<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>上海市-徐汇区-腾云大厦<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./images/de.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;嘿嘿&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="8-综合案例02"><a href="#8-综合案例02" class="headerlink" title="8.综合案例02"></a>8.综合案例02</h3><p><strong>index.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>今日搜索热词<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>阿卡贝拉<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>测试数据<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./02-one.html&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;</span>侧叔叔<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>翻唱<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>哈哈哈<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./03-two.html&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;_self&quot;</span>&gt;</span>测试数据<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>one.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>hahah<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>音频<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./images/de.png&quot;</span> <span class="hljs-attr">controls</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>two.html</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>heiehi <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>haha <span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./images/de.png&quot;</span> <span class="hljs-attr">controls</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-HTML-进阶标签01"><a href="#4-HTML-进阶标签01" class="headerlink" title="4.HTML-进阶标签01"></a>4.HTML-进阶标签01</h2><h3 id="1-列表标签"><a href="#1-列表标签" class="headerlink" title="1.列表标签"></a>1.列表标签</h3><h4 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景"></a>1.使用场景</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221228142403937.png" alt="image-20221228142403937"></p><h4 id="2-无序列表"><a href="#2-无序列表" class="headerlink" title="2.无序列表"></a>2.无序列表</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221228143518997.png" alt="image-20221228143518997"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>水果列表<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>榴莲<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>香蕉<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>苹果<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>哈密瓜<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>火龙果<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-有序列表"><a href="#3-有序列表" class="headerlink" title="3.有序列表"></a>3.有序列表</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221228144037208.png" alt="image-20221228144037208"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>手机品牌<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>华为:1000<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>小米:200<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>oppo:50<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>三星:30<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="4-自定义列表"><a href="#4-自定义列表" class="headerlink" title="4.自定义列表"></a>4.自定义列表</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221228144912440.png" alt="image-20221228144912440"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>帮助中心<br>            <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>账户管理<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>购物指南<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>订单操作<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-表格标签"><a href="#2-表格标签" class="headerlink" title="2.表格标签"></a>2.表格标签</h3><h4 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1.基本使用"></a>1.基本使用</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221228202131986.png" alt="image-20221228202131986"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>     <span class="hljs-comment">&lt;!-- tr表示表格的每一行 --&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>         <span class="hljs-comment">&lt;!-- td表示表格的具体的内容 --&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>成绩<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>评语<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>小哥哥<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>100<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>真棒<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>小姐姐<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>100分<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>真漂亮<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>总结<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>郎才女貌<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>         <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>郎才女貌<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>     <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-表格属性"><a href="#2-表格属性" class="headerlink" title="2.表格属性"></a>2.表格属性</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221228205431242.png" alt="image-20221228205431242"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">width:</span>&quot;<span class="hljs-attr">10</span>&quot; <span class="hljs-attr">height:</span>&quot;<span class="hljs-attr">20</span>&quot;&gt;</span><br>        <span class="hljs-comment">&lt;!-- tr表示表格的每一行 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- td表示表格的具体的内容 --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>成绩<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>评语<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-表格标题和表头单元格标签"><a href="#3-表格标题和表头单元格标签" class="headerlink" title="3.表格标题和表头单元格标签"></a>3.表格标题和表头单元格标签</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221228205615886.png" alt="image-20221228205615886"></p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>学生成绩单<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>成绩<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>评语<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>200<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>真的很好<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="4-表格的结构标签"><a href="#4-表格的结构标签" class="headerlink" title="4.表格的结构标签"></a>4.表格的结构标签</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221228210331064.png" alt="image-20221228210331064"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>学生成绩单<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>成绩<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>评语<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br><br>       <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>200<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>真的很好<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><br>       <span class="hljs-tag">&lt;<span class="hljs-name">tfoot</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>总结<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>郎才女貌<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>               <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>郎才女貌<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>           <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">tfoot</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="5-合并单元格"><a href="#5-合并单元格" class="headerlink" title="5.合并单元格"></a>5.合并单元格</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221228221633839.png" alt="image-20221228221633839"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221228224559685.png" alt="image-20221228224559685"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">strong</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span>学生成绩单<span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">strong</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>成绩<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>评语<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                 <span class="hljs-comment">&lt;!-- rowspan表示列合并 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>200<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>真的很好<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>真的很好<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>张三<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>真的很好<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tfoot</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>                 <span class="hljs-comment">&lt;!-- colspan表示行合并 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>总结<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>郎才女貌<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tfoot</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3-表单标签"><a href="#3-表单标签" class="headerlink" title="3.表单标签"></a>3.表单标签</h3><h4 id="1-input标签"><a href="#1-input标签" class="headerlink" title="1.input标签"></a>1.input标签</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221229140736406.png" alt="image-20221229140736406"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 文本框 --&gt;</span><br>    文本框 <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 密码框 --&gt;</span><br>    密码框<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 单选框 --&gt;</span><br>    单选框<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 复选框 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 文件上传 --&gt;</span><br>    点我上传文件<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 提交按钮 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 重置按钮 --&gt;</span><br>    重置<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 按钮 --&gt;</span><br>    按钮<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221229142122983.png" alt="image-20221229142122983"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"> <span class="hljs-comment">&lt;!-- 文本框 --&gt;</span><br>文本框 <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入用户名&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 密码框 --&gt;</span><br>密码框<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;请输入密码&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="1单选框"><a href="#1单选框" class="headerlink" title="1单选框"></a>1单选框</h5><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221229193230774.png" alt="image-20221229193230774"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    男<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">checked</span>&gt;</span> 女<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="2-文件上传"><a href="#2-文件上传" class="headerlink" title="2.文件上传"></a>2.文件上传</h5><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221229193842993.png" alt="image-20221229193842993"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">    <span class="hljs-comment">&lt;!-- 多文件上传  multiple --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">multiple</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="3-按钮"><a href="#3-按钮" class="headerlink" title="3.按钮"></a>3.按钮</h5><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221229194100654.png" alt="image-20221229194100654"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>用户名<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br>密码 <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 按钮 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;免费注册&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span>       <br></code></pre></td></tr></table></figure><h4 id="2-button按钮标签"><a href="#2-button按钮标签" class="headerlink" title="2.button按钮标签"></a>2.button按钮标签</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221229203858079.png" alt="image-20221229203858079"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>提交按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span>&gt;</span>重置按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="3-select下拉菜单标签"><a href="#3-select下拉菜单标签" class="headerlink" title="3.select下拉菜单标签"></a>3.select下拉菜单标签</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221229205440621.png" alt="image-20221229205440621"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>广州<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">selected</span>&gt;</span>深圳<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="4-textarea文本域标签"><a href="#4-textarea文本域标签" class="headerlink" title="4.textarea文本域标签"></a>4.textarea文本域标签</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221229210122691.png" alt="image-20221229210122691"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="5-lable标签"><a href="#5-lable标签" class="headerlink" title="5.lable标签"></a>5.lable标签</h4><p> <img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221229210921469.png" alt="image-20221229210921469"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 方法一 --&gt;</span><br> 性别<br> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;nan&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;nan&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;nv&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;nv&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br> <span class="hljs-comment">&lt;!-- 方法二 --&gt;</span><br> 性别<br> <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span> 男<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span> 女<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="4-语义化标签"><a href="#4-语义化标签" class="headerlink" title="4.语义化标签"></a>4.语义化标签</h3><h4 id="1-无语义标签"><a href="#1-无语义标签" class="headerlink" title="1.无语义标签"></a>1.无语义标签</h4><p>·<img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221229213439534.png" alt="image-20221229213439534"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>ddddd<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>dddddd<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>ssss<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>ssss<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="2-有语义的标签"><a href="#2-有语义的标签" class="headerlink" title="2.有语义的标签"></a>2.有语义的标签</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221229213619094.png" alt="image-20221229213619094"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span>网页头部<span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">nav</span>&gt;</span>网页导航<span class="hljs-tag">&lt;/<span class="hljs-name">nav</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span>网页底部<span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">aside</span>&gt;</span>网页侧边栏<span class="hljs-tag">&lt;/<span class="hljs-name">aside</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">section</span>&gt;</span>网页区块<span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">article</span>&gt;</span>网页文章<span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="5-字符实体"><a href="#5-字符实体" class="headerlink" title="5.字符实体"></a>5.字符实体</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221229214340667.png" alt="image-20221229214340667"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 网页不认识多个空格 只认识一个 --&gt;</span><br>    黑马程序员 &amp;nbsp &amp;nbsp &amp;nbsp &amp;nbsp 哈哈;<br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="6-综合案例-表格案例"><a href="#6-综合案例-表格案例" class="headerlink" title="6.综合案例(表格案例)"></a>6.综合案例(表格案例)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">width:</span>&quot;<span class="hljs-attr">400</span>&quot; <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;500&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">caption</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>优秀学生信息表格<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">caption</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>年级<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>学号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>班级<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>           <span class="hljs-comment">&lt;!-- 左上留下来的原则 --&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">rowspan</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span>高三<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>迪丽热巴<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>110<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>三年二班<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>古力拉扎<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>120<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>三年三班<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>评语<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">colspan</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span>都很棒<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="7-综合案例-表单案例"><a href="#7-综合案例-表单案例" class="headerlink" title="7.综合案例(表单案例)"></a>7.综合案例(表单案例)</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20221229221314519.png" alt="image-20221229221314519"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>青春不常在，抓经谈恋爱<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br>    昵称:<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;请输入昵称&quot;</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    性别:<span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>男<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">checked</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>女<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    所在城市:<br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">selected</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    婚姻状况:<span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>未婚<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hyzk&quot;</span> <span class="hljs-attr">checked</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>已婚<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hyzk&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>保密<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;hyzk&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    喜欢类型:<br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;xihuan&quot;</span> <span class="hljs-attr">checked</span>&gt;</span> 可爱<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;xihuan&quot;</span>&gt;</span> 性感<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;xihuan&quot;</span>&gt;</span> 御姐<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;xihuan&quot;</span>&gt;</span> 萝莉<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;xihuan&quot;</span> <span class="hljs-attr">checked</span>&gt;</span> 小鲜肉<br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;xihuan&quot;</span> <span class="hljs-attr">checked</span>&gt;</span> 大叔<br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    个人简介:<br>    <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>我承诺<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>年满18岁.单身<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>抱着严肃的态度<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>真诚寻找另一半<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span> 同意相关协议<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;免费注册&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span>&gt;</span>重置<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>HTML基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day01-1-3-Java-基础学习-数据类型</title>
    <link href="/2023/01/02/Day01-1-3-Java-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2023/01/02/Day01-1-3-Java-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Day01-1-3-Java-基础学习-数据类型"><a href="#Day01-1-3-Java-基础学习-数据类型" class="headerlink" title="Day01-1-3-Java-基础学习-数据类型"></a>Day01-1-3-Java-基础学习-数据类型</h1><h2 id="0-前置知识-计算机中的存储"><a href="#0-前置知识-计算机中的存储" class="headerlink" title="0.前置知识-计算机中的存储"></a>0.前置知识-计算机中的存储</h2><h3 id="1-存储规则"><a href="#1-存储规则" class="headerlink" title="1.存储规则"></a>1.存储规则</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103190534184.png" alt="image-20230103190534184"></p><h3 id="2-进制表现形式"><a href="#2-进制表现形式" class="headerlink" title="2.进制表现形式"></a>2.进制表现形式</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103191947049.png" alt="image-20230103191947049"></p><h3 id="3-进制间的转化"><a href="#3-进制间的转化" class="headerlink" title="3.进制间的转化"></a>3.进制间的转化</h3><h4 id="1-任意进制转十进制"><a href="#1-任意进制转十进制" class="headerlink" title="1.任意进制转十进制"></a>1.任意进制转十进制</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103192224568.png" alt="image-20230103192224568"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103192554935.png" alt="image-20230103192554935"></p><h4 id="2-二进制转十进制"><a href="#2-二进制转十进制" class="headerlink" title="2.二进制转十进制"></a>2.二进制转十进制</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103192939465.png" alt="image-20230103192939465"></p><h4 id="3-十进制转其他进制"><a href="#3-十进制转其他进制" class="headerlink" title="3.十进制转其他进制"></a>3.十进制转其他进制</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103193216494.png" alt="image-20230103193216494"></p><h4 id="4-进制转化小结"><a href="#4-进制转化小结" class="headerlink" title="4.进制转化小结"></a>4.进制转化小结</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103193320871.png" alt="image-20230103193320871"></p><h3 id="4-计算机存储规则小结"><a href="#4-计算机存储规则小结" class="headerlink" title="4.计算机存储规则小结"></a>4.计算机存储规则小结</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103204230498.png" alt="image-20230103204230498"></p><h2 id="1-编译和解释型语言"><a href="#1-编译和解释型语言" class="headerlink" title="1.编译和解释型语言"></a>1.编译和解释型语言</h2><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103160747336.png" alt="image-20230103160747336"></p><h2 id="2-跨平台原理"><a href="#2-跨平台原理" class="headerlink" title="2.跨平台原理"></a>2.跨平台原理</h2><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103160903564.png" alt="image-20230103160903564"></p><h2 id="3-JDK和JRE"><a href="#3-JDK和JRE" class="headerlink" title="3.JDK和JRE"></a>3.JDK和JRE</h2><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103161359314.png" alt="image-20230103161359314"></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">JVM（Java </span>Virtual Machine），<span class="hljs-keyword">Java虚拟机</span><br><span class="hljs-keyword"></span><br><span class="hljs-keyword">JRE（Java </span>Runtime Environment），<span class="hljs-keyword">Java运行环境，包含了JVM和Java的核心类库（Java </span>API）,部分运行工具<br><br><span class="hljs-keyword">JDK（Java </span>Development Kit）称为<span class="hljs-keyword">Java开发工具，包含了JRE和开发工具</span><br></code></pre></td></tr></table></figure><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103161538594.png" alt="image-20230103161538594"></p><h2 id="4-Java中的注释"><a href="#4-Java中的注释" class="headerlink" title="4.Java中的注释"></a>4.Java中的注释</h2><h3 id="1-单行注释"><a href="#1-单行注释" class="headerlink" title="1.单行注释"></a>1.单行注释</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span>&#123;<br>        <span class="hljs-comment">//这是但是注释</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String [] args)</span>&#123;<br>        <span class="hljs-comment">//这是输出单行注释</span><br>        System.out.printf(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-多行注释"><a href="#2-多行注释" class="headerlink" title="2.多行注释"></a>2.多行注释</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span>&#123;<br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">       这是多行注释</span><br><span class="hljs-comment">       */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String [] args)</span>&#123;<br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">       这是多行注释</span><br><span class="hljs-comment">       */</span><br>        System.out.printf(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-文档注释"><a href="#3-文档注释" class="headerlink" title="3.文档注释"></a>3.文档注释</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** </span><br><span class="hljs-comment">* Application entry point </span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> args array of command-line arguments passed to this method </span><br><span class="hljs-comment">*这是文档注释</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>单行注释和多行注释不要嵌套</strong></p></blockquote><h2 id="5-关键字"><a href="#5-关键字" class="headerlink" title="5.关键字"></a>5.关键字</h2><h3 id="1-关键字基本概念"><a href="#1-关键字基本概念" class="headerlink" title="1.关键字基本概念"></a>1.关键字基本概念</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103163237544.png" alt="image-20230103163237544"></p><h3 id="2-Java中的关键字"><a href="#2-Java中的关键字" class="headerlink" title="2.Java中的关键字"></a>2.Java中的关键字</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103163340845.png" alt="image-20230103163340845"></p><p><strong>Java中包含50多个关键字</strong></p><h3 id="3-class关键字"><a href="#3-class关键字" class="headerlink" title="3.class关键字"></a>3.class关键字</h3><blockquote><p><strong>class:用于(创建&#x2F;定义)一个类 类是Java最基本的组成单元</strong></p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103163751643.png" alt="image-20230103163751643"></p><h2 id="6-字面量"><a href="#6-字面量" class="headerlink" title="6.字面量"></a>6.字面量</h2><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><blockquote><p>数据在程序中的书写格式</p></blockquote><h3 id="2-分类"><a href="#2-分类" class="headerlink" title="2.分类"></a>2.分类</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103171526026.png" alt="image-20230103171526026"></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ValueDemo1</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-comment">//目标：需要大家掌握常见的数据在代码中如何书写的？</span><br><br><span class="hljs-comment">//整数</span><br>System.out.println(<span class="hljs-number">666</span>);<br>System.out.println(-<span class="hljs-number">777</span>);<br><br><span class="hljs-comment">//小数</span><br>System.out.println(<span class="hljs-number">1.93</span>);<br>System.out.println(-<span class="hljs-number">3.71</span>);<br><br><span class="hljs-comment">//字符串</span><br>System.out.println(<span class="hljs-string">&quot;黑马程序员&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;尼古拉斯阿玮&quot;</span>);<br><br><span class="hljs-comment">//字符</span><br>System.out.println(<span class="hljs-string">&#x27;男&#x27;</span>);<br>System.out.println(<span class="hljs-string">&#x27;女&#x27;</span>);<br><br><span class="hljs-comment">//布尔</span><br>System.out.println(<span class="hljs-literal">true</span>);<br>System.out.println(<span class="hljs-literal">false</span>);<br><br><span class="hljs-comment">//空</span><br><span class="hljs-comment">//细节：null不能直接打印的。</span><br><span class="hljs-comment">//如果我们要打印null，那么只能用字符串的形式进行打印</span><br>System.out.println(<span class="hljs-string">&quot;null&quot;</span>);<br><br>&#125;<br>&#125; <br></code></pre></td></tr></table></figure><h3 id="3-制表符-t"><a href="#3-制表符-t" class="headerlink" title="3.制表符(\t)"></a>3.制表符(\t)</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103172724914.png" alt="image-20230103172724914"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ValueDemo2</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-comment">//目标：熟悉制表符的基本用法</span><br>System.out.println(<span class="hljs-string">&quot;name&quot;</span> + <span class="hljs-string">&#x27;\t&#x27;</span> + <span class="hljs-string">&quot;age&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;tom&quot;</span> + <span class="hljs-string">&#x27;\t&#x27;</span> + <span class="hljs-string">&quot;23&quot;</span>);<br>&#125;<br>&#125; <br></code></pre></td></tr></table></figure><h2 id="7-变量"><a href="#7-变量" class="headerlink" title="7.变量"></a>7.变量</h2><h3 id="1-使用场景及概念"><a href="#1-使用场景及概念" class="headerlink" title="1.使用场景及概念"></a>1.使用场景及概念</h3><blockquote><p>当某个数据经常发生改变时，我们也可以用变量存储。当数据变化时，只要修改变量里面记录的值即可。</p></blockquote><h3 id="2-变量定义格式"><a href="#2-变量定义格式" class="headerlink" title="2.变量定义格式"></a>2.变量定义格式</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103173418094.png" alt="image-20230103173418094"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VariableDemo</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-comment">//定义一个整数类型的变量</span><br><span class="hljs-comment">//数据类型 变量名 = 数据值;</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">16</span>;<br>System.out.println(a);<span class="hljs-comment">//16</span><br><br><span class="hljs-comment">//定义一个小数类型的变量</span><br><span class="hljs-type">double</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">10.1</span>;<br>System.out.println(b);<span class="hljs-comment">//10.1</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-变量的使用方式"><a href="#3-变量的使用方式" class="headerlink" title="3.变量的使用方式"></a>3.变量的使用方式</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103184549254.png" alt="image-20230103184549254"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VariableDemo2</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-comment">//1.变量名不允许重复</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-comment">//int a = 20;</span><br>System.out.println(a);<br><span class="hljs-comment">//2.一条语句可以定义多个变量</span><br><span class="hljs-comment">//int a = 10, b = 20, c = 20,d = 20;</span><br><span class="hljs-comment">//3.变量在使用之前必须要赋值</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>System.out.println(a);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-变量的注意事项"><a href="#4-变量的注意事项" class="headerlink" title="4.变量的注意事项"></a>4.变量的注意事项</h3><blockquote><ul><li>变量名不能重复</li><li>在一条语句中，可以定义多个变量。但是这种方式影响代码的阅读，所以了解一下即可。</li><li>变量在使用之前必须要赋值。</li><li>建议:以后在定义变量的时候，请直接赋值</li></ul></blockquote><h3 id="5-变量小结"><a href="#5-变量小结" class="headerlink" title="5.变量小结"></a>5.变量小结</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103185550682.png" alt="image-20230103185550682"></p><h3 id="6-变量案例"><a href="#6-变量案例" class="headerlink" title="6.变量案例"></a>6.变量案例</h3><blockquote><p>案例需求：</p><p>说出公交车到终点站之后，车上一共有多少乘客？ 一开始没有乘客。</p><p>第一站：上去一位乘客，没有下来乘客。</p><p>第二站：上去两位乘客，下来一位乘客。</p><p>第三站：上去两位乘客，下来一位乘客。</p><p>第四站：没有上去乘客，下来一位乘客。</p><p>第五站：上去一位乘客，没有下来乘客。</p><p>问：到了终点站之后，车上一共多少乘客？</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VariableTest1</span>&#123;<br><span class="hljs-comment">//主入口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-comment">//一开始没有乘客。</span><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">//第一站：上去一位乘客</span><br><span class="hljs-comment">//在原有的基础上 + 1</span><br>count = count + <span class="hljs-number">1</span>;<br><span class="hljs-comment">//System.out.println(count);</span><br><span class="hljs-comment">//第二站：上去两位乘客，下来一位乘客</span><br>count = count + <span class="hljs-number">2</span> - <span class="hljs-number">1</span>; <br><span class="hljs-comment">//第三站：上去两位乘客，下来一位乘客</span><br>count = count + <span class="hljs-number">2</span> - <span class="hljs-number">1</span>;<br><span class="hljs-comment">//第四站：下来一位乘客</span><br>count = count - <span class="hljs-number">1</span>;<br><span class="hljs-comment">//第五站：上去一位乘客</span><br>count = count + <span class="hljs-number">1</span>;<br><span class="hljs-comment">//请问：到了终点站，车上一共几位乘客。</span><br>System.out.println(count);<span class="hljs-comment">//3</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-数据类型"><a href="#8-数据类型" class="headerlink" title="8.数据类型"></a>8.数据类型</h2><h3 id="1-数据类型分类"><a href="#1-数据类型分类" class="headerlink" title="1.数据类型分类"></a>1.数据类型分类</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103211854522.png" alt="image-20230103211854522"></p><h3 id="2-基本数据类型"><a href="#2-基本数据类型" class="headerlink" title="2.基本数据类型"></a>2.基本数据类型</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103213318383.png" alt="image-20230103213318383"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VariableDemo3</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//1.定义byte类型的变量</span><br>        <span class="hljs-comment">//数据类型 变量名 = 数据值;</span><br>        <span class="hljs-type">byte</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        System.out.println(a);<br><br>        <span class="hljs-comment">//2.定义short类型的变量</span><br>        <span class="hljs-type">short</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        System.out.println(b);<br><br>        <span class="hljs-comment">//3.定义int类型的变量</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        System.out.println(c);<br><br>        <span class="hljs-comment">//4.定义long类型的变量</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">123456789123456789L</span>;<br>        System.out.println(d);<br><br>        <span class="hljs-comment">//5.定义float类型的变量</span><br>        <span class="hljs-type">float</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-number">10.1F</span>;<br>        System.out.println(e);<br><br>        <span class="hljs-comment">//6.定义double类型的变量</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-number">20.3</span>;<br>        System.out.println(f);<br><br>        <span class="hljs-comment">//7.定义char类型的变量</span><br>        <span class="hljs-type">char</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br>        System.out.println(g);<br><br>        <span class="hljs-comment">//8.定义boolean类型的变量</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        System.out.println(h);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3.注意事项"></a>3.注意事项</h3><blockquote><ul><li>如果要定义 一个整数类型的变量，不知道选择哪种数据类型了，默认使用int。</li><li>如果要定义 一个小数类型的变量，不知道选择哪种数据类型了，默认使用double。</li><li>如果要定义一个long类型的变量，那么在数据值的后面需要加上L后缀。（大小写都可以，建议大写。）</li><li>如果要定义一个float类型的变量，那么在数据值的后面需要加上F后缀。（大小写都可以）</li><li>double &gt; float &gt; long &gt; int &gt; short &gt; byte</li></ul></blockquote><h3 id="4-数据类型案例"><a href="#4-数据类型案例" class="headerlink" title="4.数据类型案例"></a>4.数据类型案例</h3><p>需求</p><blockquote><p><strong>需求：定义5个变量记录老师的信息并打印</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VariableTest1</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-comment">//1.定义字符串类型的变量记录老师的姓名</span><br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;黑马谢广坤&quot;</span>;<br><span class="hljs-comment">//2.定义整数类型的变量记录老师的年龄</span><br><span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">18</span>;<br><span class="hljs-comment">//3.定义字符类型的变量记录老师的性别</span><br><span class="hljs-type">char</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;男&#x27;</span>;<br><span class="hljs-comment">//4.定义小数类型的变量记录老师的身高</span><br><span class="hljs-type">double</span> <span class="hljs-variable">height</span> <span class="hljs-operator">=</span> <span class="hljs-number">180.1</span>;<br><span class="hljs-comment">//5.定义布尔类型的变量记录老师的婚姻状况</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-标识符"><a href="#9-标识符" class="headerlink" title="9.标识符"></a>9.标识符</h2><h3 id="1-基本概念-1"><a href="#1-基本概念-1" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><blockquote><p>标识符:就是给类，方法，变量等起的名字。</p></blockquote><h3 id="2-硬性要求"><a href="#2-硬性要求" class="headerlink" title="2.硬性要求"></a>2.硬性要求</h3><blockquote><ul><li>必须由数字、字母、下划线_、美元符号$组成。</li><li>数字不能开头</li><li>不能是关键字</li><li>区分大小写的</li></ul></blockquote><h3 id="3-小驼峰命名法"><a href="#3-小驼峰命名法" class="headerlink" title="3.小驼峰命名法"></a>3.小驼峰命名法</h3><blockquote><p>适用于变量名和方法名</p><ul><li><p>如果是一个单词，那么全部小写，比如：name</p></li><li><p>如果是多个单词，那么从第二个单词开始，首字母大写，比如：firstName、maxAge</p></li></ul></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103220819536.png" alt="image-20230103220819536"></p><h3 id="4-大驼峰命名法"><a href="#4-大驼峰命名法" class="headerlink" title="4.大驼峰命名法"></a>4.大驼峰命名法</h3><blockquote><p>适用于类名</p><ul><li><p>如果是一个单词，那么首字母大写。比如：Demo、Test。</p></li><li><p>如果是多个单词，那么每一个单词首字母都需要大写。比如：HelloWorld</p></li></ul><p>不管起什么名字，都要做到见名知意</p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103220915015.png" alt="image-20230103220915015"></p><h2 id="10-键盘录入"><a href="#10-键盘录入" class="headerlink" title="10.键盘录入"></a>10.键盘录入</h2><h3 id="1-基本过程"><a href="#1-基本过程" class="headerlink" title="1.基本过程"></a>1.基本过程</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230104122446756.png" alt="image-20230104122446756"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//导包，其实就是先找到Scanner这个类在哪</span><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScannerDemo1</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-comment">//2.创建对象，其实就是申明一下，我准备开始用Scanner这个类了。</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-comment">//3.接收数据</span><br><span class="hljs-comment">//当程序运行之后，我们在键盘输入的数据就会被变量i给接收了</span><br>System.out.println(<span class="hljs-string">&quot;请输入一个数字&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> sc.nextInt();<br>System.out.println(i);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="11-集成开发工具IDEA"><a href="#11-集成开发工具IDEA" class="headerlink" title="11.集成开发工具IDEA"></a>11.集成开发工具IDEA</h2><h3 id="1-IDEA中层级结构介绍"><a href="#1-IDEA中层级结构介绍" class="headerlink" title="1.IDEA中层级结构介绍"></a>1.IDEA中层级结构介绍</h3><h4 id="1-基本结构"><a href="#1-基本结构" class="headerlink" title="1.基本结构"></a>1.基本结构</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230104123815334.png" alt="image-20230104123815334"></p>]]></content>
    
    
    <categories>
      
      <category>Java成长之路</category>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
      <tag>JDK，变量，数据类型</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
