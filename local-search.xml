<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Day02-1-4-Java-基础学习</title>
    <link href="/2023/01/03/Day02-1-4-Java-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/01/03/Day02-1-4-Java-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="Day02-1-4-Java-基础学习"><a href="#Day02-1-4-Java-基础学习" class="headerlink" title="Day02-1-4-Java-基础学习"></a>Day02-1-4-Java-基础学习</h1><h2 id="1-运算符和表达式"><a href="#1-运算符和表达式" class="headerlink" title="1.运算符和表达式"></a>1.运算符和表达式</h2><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><blockquote><p>运算符：对字面量或者变量进行操作的符号。</p><p>表达式：用运算符把字面量或者变量连接起来，符合java语法的式子就可以称为表达式。</p><p>​       不同运算符连接的表达式体现的是不同类型的表达式。</p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230104131927449.png" alt="image-20230104131927449"></p><h2 id="2-算术运算符"><a href="#2-算术运算符" class="headerlink" title="2.算术运算符"></a>2.算术运算符</h2><h3 id="1-基本概念-1"><a href="#1-基本概念-1" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230104132743859.png" alt="image-20230104132743859"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">+ - * :跟小学数学中一模一样没有任何区别<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">/：除法<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">1.整数相除结果只能得到整除，如果结果想要是小数，必须要有小数参数。</span><br><span class="hljs-comment">2.小数直接参与运算，得到的结果有可能是不精确的。</span><br><span class="hljs-comment">*/</span>   <br>案例：<br>System.out.println( <span class="hljs-number">10</span> / <span class="hljs-number">3</span>);<span class="hljs-comment">//3</span><br>System.out.println(<span class="hljs-number">10.0</span> / <span class="hljs-number">3</span>);<span class="hljs-comment">//3.3333333333333335</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">%：取模、取余。<br>   他做的也是除法运算，只不过获取的是余数而已。<br>案例：<br>System.out.println(<span class="hljs-number">10</span> % <span class="hljs-number">2</span>);<span class="hljs-comment">//0</span><br>System.out.println(<span class="hljs-number">10</span> % <span class="hljs-number">3</span>);<span class="hljs-comment">//1</span><br>应用场景：<br><span class="hljs-comment">//可以利用取模来判断一个数是奇数还是偶数</span><br>System.out.println(<span class="hljs-number">15</span> % <span class="hljs-number">2</span>);<span class="hljs-comment">//1  奇数</span><br></code></pre></td></tr></table></figure><h3 id="2-运算符案例"><a href="#2-运算符案例" class="headerlink" title="2.运算符案例"></a>2.运算符案例</h3><blockquote><p>需求：键盘录入一个三位数，将其拆分为个位、十位、百位后，打印在控制台</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.键盘录入一个三位数</span><br><span class="hljs-comment">//导包 --- 创建对象 --- 接收数据</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;请输入一个三位数&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> sc.nextInt();<span class="hljs-comment">//123</span><br><span class="hljs-comment">//2.获取这个三位数的个位、十位、百位并打印出来</span><br><span class="hljs-comment">//公式：</span><br><span class="hljs-comment">//针对于任意的一个数而言</span><br><span class="hljs-comment">//个位： 数字 % 10</span><br><span class="hljs-type">int</span> <span class="hljs-variable">ones</span> <span class="hljs-operator">=</span> number % <span class="hljs-number">10</span>;<br><span class="hljs-comment">//十位： 数字 / 10 % 10</span><br><span class="hljs-type">int</span> <span class="hljs-variable">tens</span> <span class="hljs-operator">=</span> number / <span class="hljs-number">10</span> % <span class="hljs-number">10</span>;<br><span class="hljs-comment">//百位： 数字 / 100 % 10</span><br><span class="hljs-type">int</span> <span class="hljs-variable">hundreds</span> <span class="hljs-operator">=</span> number / <span class="hljs-number">100</span>  % <span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><h3 id="3-数据类型转换"><a href="#3-数据类型转换" class="headerlink" title="3.数据类型转换"></a>3.数据类型转换</h3><h4 id="1-自动类型转换"><a href="#1-自动类型转换" class="headerlink" title="1.自动类型转换"></a>1.自动类型转换</h4><blockquote><p>也叫自动类型提升。</p><p>就是把一个取值范围小的数据或者变量，赋值给另一个取值范围大的变量。此时不需要我们额外写代码单独实现，是程序自动帮我们完成的.</p><p>就是小的给大的，可以直接给</p><p> 提升规则：</p><ul><li>取值范围小的，和取值范围大的进行运算，小的会先提升为大的，再进行运算。</li><li>byte、short、char三种类型的数据在运算的时候，都会直接先提升为int，然后再进行运算</li><li>byte short int long float double（取值范围从大到小）</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>System.out.println(d);<span class="hljs-comment">//10.0</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">10是整数，整数默认是int类型的。</span><br><span class="hljs-comment">而在取值范围的顺序中：byte short int long float double</span><br><span class="hljs-comment">在赋值的时候把一个int类型的赋值给了一个double类型的。把一个小的赋值给一个大的是可以直接给的。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230104142055164.png" alt="image-20230104142055164"></p><h4 id="2-强制转换"><a href="#2-强制转换" class="headerlink" title="2.强制转换"></a>2.强制转换</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230104144103293.png" alt="image-20230104144103293"></p><blockquote><p>如果要把一个取值范围大的数据或者变量赋值给另一个取值范围小的变量。是不允许直接操作。如果一定要这么干，就需要加入强制转换</p><p>​目标数据类型 变量名 &#x3D; （目标数据类型）被强转的数据；</p><p>简单理解：</p><p>​要转成什么类型的，那么就在小括号中写什么类型就可以了。</p><p>注意点：</p><p>​强制转换有可能会导致数据发生错误。（数据的精度丢失）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperatorDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">12.3</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) a;<br>        System.out.println(b);<span class="hljs-comment">//12</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-字符串拼接-相加"><a href="#4-字符串拼接-相加" class="headerlink" title="4.字符串拼接(相加)"></a>4.字符串拼接(相加)</h3><blockquote><ul><li>当+操作中出现字符串时，此时就是字符串的连接符，会将前后的数据进行拼接，并产生一个新的字符串。</li><li>当连续进行+操作时，从左到右逐个执行的。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span> + <span class="hljs-string">&quot;abc&quot;</span> + <span class="hljs-number">1</span><br> <span class="hljs-comment">//结果 &quot;1abc1&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span> + <span class="hljs-number">2</span> + <span class="hljs-string">&quot;abc&quot;</span> + <span class="hljs-number">2</span> + <span class="hljs-number">1</span><br>    <span class="hljs-comment">//“3abc21”</span><br>第一步：<span class="hljs-number">1</span> + <span class="hljs-number">2</span> 。在这个过程中，没有字符串参与的，所以做的是加法运算，结果为<span class="hljs-number">3</span>。<br>第二步：<span class="hljs-number">3</span> + <span class="hljs-string">&quot;abc&quot;</span>。在这个过程中，有字符串参与的，所以做的是拼接操作，产生一个新的字符串<span class="hljs-string">&quot;3abc&quot;</span>。<br>第三步：<span class="hljs-string">&quot;3abc&quot;</span> + <span class="hljs-number">2</span>。在这个过程中，有字符串参与的，所以做的是拼接操作，产生一个新的字符串<span class="hljs-string">&quot;3abc2&quot;</span>。<br>第四步：<span class="hljs-string">&quot;3abc2&quot;</span> + <span class="hljs-number">1</span>。在这个过程中，有字符串参与的，所以做的是拼接操作，产生一个新的字符串“3abc21”<br></code></pre></td></tr></table></figure><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230104145257803.png" alt="image-20230104145257803"></p><h3 id="5-字符相加"><a href="#5-字符相加" class="headerlink" title="5.字符相加"></a>5.字符相加</h3><blockquote><p>当+操作中出现了字符，会拿着字符到计算机内置的ASCII码表中去查对应的数字，然后再进行计算。</p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230104150003428.png" alt="image-20230104150003428"></p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230104145911170.png" alt="image-20230104145911170"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230104150118269.png" alt="image-20230104150118269"></p><h3 id="6-算术运算符小结"><a href="#6-算术运算符小结" class="headerlink" title="6.算术运算符小结"></a>6.算术运算符小结</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230104150315458.png" alt="image-20230104150315458"></p><h2 id="3-自增自减运算符"><a href="#3-自增自减运算符" class="headerlink" title="3.自增自减运算符"></a>3.自增自减运算符</h2><h3 id="1-单独使用"><a href="#1-单独使用" class="headerlink" title="1.单独使用"></a>1.单独使用</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230104150555468.png" alt="image-20230104150555468"></p><blockquote><ul><li>放在变量的前面，我们叫做先++。 比如：++a</li><li>放在变量的后面，我们叫做后++。 比如：a++</li><li>不管是先++，还是后++。单独写在一行的时候，运算结果是一模一样的。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//++</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>a++;<span class="hljs-comment">//就是让变量a里面的值 + 1</span><br>System.out.println(a);<span class="hljs-comment">//11</span><br>++a;<span class="hljs-comment">//就是让变量a里面的值 + 1</span><br>System.out.println(a);<span class="hljs-comment">//12</span><br></code></pre></td></tr></table></figure><h3 id="2-参与计算"><a href="#2-参与计算" class="headerlink" title="2.参与计算"></a>2.参与计算</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230104161519933.png" alt="image-20230104161519933"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230104161419004.png" alt="image-20230104161419004"></p><h2 id="4-赋值运算符"><a href="#4-赋值运算符" class="headerlink" title="4.赋值运算符"></a>4.赋值运算符</h2><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230104162530481.png" alt="image-20230104162530481"></p><blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230104162553311.png" alt="image-20230104162553311"></p></blockquote><blockquote><p>扩展的赋值运算符中隐层还包含了一个强制转换。</p><p>以+&#x3D;为例。</p><p>a +&#x3D; b ;实际上相当于 a &#x3D; (byte)(a + b);</p></blockquote><h2 id="5-关系-比较-运算符"><a href="#5-关系-比较-运算符" class="headerlink" title="5.关系(比较)运算符"></a>5.关系(比较)运算符</h2><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230104163019350.png" alt="image-20230104163019350"></p><h2 id="6-逻辑运算符"><a href="#6-逻辑运算符" class="headerlink" title="6.逻辑运算符"></a>6.逻辑运算符</h2><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230104163715755.png" alt="image-20230104163715755"></p><blockquote><p>&amp;：逻辑与（而且）</p><p>​两边都为真，结果才是真，只要有一个为假，那么结果就是假。</p><p>|：逻辑或（或者）</p><p>​两边都为假，结果才是假，只要有一个为真，那么结果就是真</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// &amp;  //两边都是真，结果才是真。</span><br>System.out.println(<span class="hljs-literal">true</span> &amp; <span class="hljs-literal">true</span>);<span class="hljs-comment">//true</span><br>System.out.println(<span class="hljs-literal">false</span> &amp; <span class="hljs-literal">false</span>);<span class="hljs-comment">//false</span><br>System.out.println(<span class="hljs-literal">true</span> &amp; <span class="hljs-literal">false</span>);<span class="hljs-comment">//false</span><br>System.out.println(<span class="hljs-literal">false</span> &amp; <span class="hljs-literal">true</span>);<span class="hljs-comment">//false</span><br><br>System.out.println(<span class="hljs-string">&quot;===================================&quot;</span>);<br><br><span class="hljs-comment">// | 或  //两边都是假，结果才是假，如果有一个为真，那么结果就是真。</span><br>System.out.println(<span class="hljs-literal">true</span> | <span class="hljs-literal">true</span>);<span class="hljs-comment">//true</span><br>System.out.println(<span class="hljs-literal">false</span> | <span class="hljs-literal">false</span>);<span class="hljs-comment">//false</span><br>System.out.println(<span class="hljs-literal">true</span> | <span class="hljs-literal">false</span>);<span class="hljs-comment">//true</span><br>System.out.println(<span class="hljs-literal">false</span> | <span class="hljs-literal">true</span>);<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><blockquote><h6 id="（异或）的使用："><a href="#（异或）的使用：" class="headerlink" title="^（异或）的使用："></a>^（异或）的使用：</h6><p>​在以后用的不多，了解一下即可。</p><p>计算规则：如果两边相同，结果为false，如果两边不同，结果为true</p><h6 id="（取反）的使用："><a href="#（取反）的使用：" class="headerlink" title="!（取反）的使用："></a>!（取反）的使用：</h6><p>是取反，也叫做非。</p><p>计算规则：false取反就是true，true取反就是false</p><p>温馨提示：取反最多只用一个</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//^   //左右不相同，结果才是true，左右相同结果就是false</span><br>System.out.println(<span class="hljs-literal">true</span> ^ <span class="hljs-literal">true</span>);<span class="hljs-comment">//false</span><br>System.out.println(<span class="hljs-literal">false</span> ^ <span class="hljs-literal">false</span>);<span class="hljs-comment">//false</span><br>System.out.println(<span class="hljs-literal">true</span> ^ <span class="hljs-literal">false</span>);<span class="hljs-comment">//true</span><br>System.out.println(<span class="hljs-literal">false</span> ^ <span class="hljs-literal">true</span>);<span class="hljs-comment">//true</span><br><span class="hljs-comment">// !（取反）的使用：计算规则：false取反就是true，true取反就是false</span><br>System.out.println(!<span class="hljs-literal">false</span>);<span class="hljs-comment">//true</span><br>System.out.println(!<span class="hljs-literal">true</span>);<span class="hljs-comment">//false</span><br>System.out.println(!!<span class="hljs-literal">false</span>);<span class="hljs-comment">//注意点：取反最多只用一个。</span><br></code></pre></td></tr></table></figure><h2 id="7-短路逻辑运算符"><a href="#7-短路逻辑运算符" class="headerlink" title="7.短路逻辑运算符"></a>7.短路逻辑运算符</h2><blockquote><h6 id="amp-amp-："><a href="#amp-amp-：" class="headerlink" title="&amp;&amp;："></a>&amp;&amp;：</h6><p>​运算结果跟&amp;是一模一样的，只不过具有短路效果。</p><h6 id="："><a href="#：" class="headerlink" title="||："></a>||：</h6><p>​运算结果跟|是一模一样的。只不过具有短路效果。</p><p>​    当左边不能确定整个表达式的结果，右边才会执行。</p><p>​当左边能确定整个表达式的结果，那么右边就不会执行了。从而提高了代码的运行效率</p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230104172725069.png" alt="image-20230104172725069"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//3.短路逻辑运算符具有短路效果</span><br>      <span class="hljs-comment">//简单理解：当左边的表达式能确定最终的结果，那么右边就不会参与运行了</span><br>      <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>      <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>      <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> ++a &lt; <span class="hljs-number">5</span> &amp; ++b &lt; <span class="hljs-number">5</span>;<br>      System.out.println(result);<span class="hljs-comment">//false</span><br>      System.out.println(a);<span class="hljs-comment">//11</span><br>      System.out.println(b);<span class="hljs-comment">//10</span><br></code></pre></td></tr></table></figure><h2 id="8-三元运算符"><a href="#8-三元运算符" class="headerlink" title="8.三元运算符"></a>8.三元运算符</h2><blockquote><p>又叫做：三元表达式或者问号冒号表达式</p><p>关系表达式 ？ 表达式1 ：表达式2 ；</p><p>计算规则：</p><ul><li>计算关系表达式的值。</li><li>如果关系表达式的值为真，那么执行表达式1。</li><li>如果关系表达式的值为假，那么执行表达式2。</li><li>三元运算符的最终结果一定要被使用，要么赋值给一个变量，要么直接打印出来。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OperatorDemo12</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//需求：求两个数的较大值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-comment">//格式：关系表达式 ？ 表达式1 ： 表达式2 ；</span><br>        <span class="hljs-comment">//注意点：</span><br>        <span class="hljs-comment">//三元运算符的最终结果一定要被使用。</span><br>        <span class="hljs-comment">//要么赋值给一个变量，要么直接输出。</span><br>       <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span>  a &gt; b ? a : b ;<br>        System.out.println(max);<br>        System.out.println(a &gt; b ? a : b);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="10-运算符的优先级"><a href="#10-运算符的优先级" class="headerlink" title="10.运算符的优先级"></a>10.运算符的优先级</h2><blockquote><p>在Java中涉及了很多的运算符，每一种运算符都有各自的优先级。但是这些优先级不需要记忆。</p><p>咱们只要知道其中一点：</p><p>​小括号优先于所有。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Java基础</tag>
      
      <tag>运算符</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Day01-1-3-Java-基础学习</title>
    <link href="/2023/01/02/Day01-1-3-Java-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/01/02/Day01-1-3-Java-%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="Day01-1-3-Java-基础学习"><a href="#Day01-1-3-Java-基础学习" class="headerlink" title="Day01-1-3-Java-基础学习"></a>Day01-1-3-Java-基础学习</h1><h2 id="0-前置知识-计算机中的存储"><a href="#0-前置知识-计算机中的存储" class="headerlink" title="0.前置知识-计算机中的存储"></a>0.前置知识-计算机中的存储</h2><h3 id="1-存储规则"><a href="#1-存储规则" class="headerlink" title="1.存储规则"></a>1.存储规则</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103190534184.png" alt="image-20230103190534184"></p><h3 id="2-进制表现形式"><a href="#2-进制表现形式" class="headerlink" title="2.进制表现形式"></a>2.进制表现形式</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103191947049.png" alt="image-20230103191947049"></p><h3 id="3-进制间的转化"><a href="#3-进制间的转化" class="headerlink" title="3.进制间的转化"></a>3.进制间的转化</h3><h4 id="1-任意进制转十进制"><a href="#1-任意进制转十进制" class="headerlink" title="1.任意进制转十进制"></a>1.任意进制转十进制</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103192224568.png" alt="image-20230103192224568"></p><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103192554935.png" alt="image-20230103192554935"></p><h4 id="2-二进制转十进制"><a href="#2-二进制转十进制" class="headerlink" title="2.二进制转十进制"></a>2.二进制转十进制</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103192939465.png" alt="image-20230103192939465"></p><h4 id="3-十进制转其他进制"><a href="#3-十进制转其他进制" class="headerlink" title="3.十进制转其他进制"></a>3.十进制转其他进制</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103193216494.png" alt="image-20230103193216494"></p><h4 id="4-进制转化小结"><a href="#4-进制转化小结" class="headerlink" title="4.进制转化小结"></a>4.进制转化小结</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103193320871.png" alt="image-20230103193320871"></p><h3 id="4-计算机存储规则小结"><a href="#4-计算机存储规则小结" class="headerlink" title="4.计算机存储规则小结"></a>4.计算机存储规则小结</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103204230498.png" alt="image-20230103204230498"></p><h2 id="1-编译和解释型语言"><a href="#1-编译和解释型语言" class="headerlink" title="1.编译和解释型语言"></a>1.编译和解释型语言</h2><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103160747336.png" alt="image-20230103160747336"></p><h2 id="2-跨平台原理"><a href="#2-跨平台原理" class="headerlink" title="2.跨平台原理"></a>2.跨平台原理</h2><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103160903564.png" alt="image-20230103160903564"></p><h2 id="3-JDK和JRE"><a href="#3-JDK和JRE" class="headerlink" title="3.JDK和JRE"></a>3.JDK和JRE</h2><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103161359314.png" alt="image-20230103161359314"></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">JVM（Java </span>Virtual Machine），<span class="hljs-keyword">Java虚拟机</span><br><span class="hljs-keyword"></span><br><span class="hljs-keyword">JRE（Java </span>Runtime Environment），<span class="hljs-keyword">Java运行环境，包含了JVM和Java的核心类库（Java </span>API）,部分运行工具<br><br><span class="hljs-keyword">JDK（Java </span>Development Kit）称为<span class="hljs-keyword">Java开发工具，包含了JRE和开发工具</span><br></code></pre></td></tr></table></figure><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103161538594.png" alt="image-20230103161538594"></p><h2 id="4-Java中的注释"><a href="#4-Java中的注释" class="headerlink" title="4.Java中的注释"></a>4.Java中的注释</h2><h3 id="1-单行注释"><a href="#1-单行注释" class="headerlink" title="1.单行注释"></a>1.单行注释</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span>&#123;<br>        <span class="hljs-comment">//这是但是注释</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String [] args)</span>&#123;<br>        <span class="hljs-comment">//这是输出单行注释</span><br>        System.out.printf(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-多行注释"><a href="#2-多行注释" class="headerlink" title="2.多行注释"></a>2.多行注释</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span>&#123;<br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">       这是多行注释</span><br><span class="hljs-comment">       */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String [] args)</span>&#123;<br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">       这是多行注释</span><br><span class="hljs-comment">       */</span><br>        System.out.printf(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-文档注释"><a href="#3-文档注释" class="headerlink" title="3.文档注释"></a>3.文档注释</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** </span><br><span class="hljs-comment">* Application entry point </span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> args array of command-line arguments passed to this method </span><br><span class="hljs-comment">*这是文档注释</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>单行注释和多行注释不要嵌套</strong></p></blockquote><h2 id="5-关键字"><a href="#5-关键字" class="headerlink" title="5.关键字"></a>5.关键字</h2><h3 id="1-关键字基本概念"><a href="#1-关键字基本概念" class="headerlink" title="1.关键字基本概念"></a>1.关键字基本概念</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103163237544.png" alt="image-20230103163237544"></p><h3 id="2-Java中的关键字"><a href="#2-Java中的关键字" class="headerlink" title="2.Java中的关键字"></a>2.Java中的关键字</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103163340845.png" alt="image-20230103163340845"></p><p><strong>Java中包含50多个关键字</strong></p><h3 id="3-class关键字"><a href="#3-class关键字" class="headerlink" title="3.class关键字"></a>3.class关键字</h3><blockquote><p><strong>class:用于(创建&#x2F;定义)一个类 类是Java最基本的组成单元</strong></p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103163751643.png" alt="image-20230103163751643"></p><h2 id="6-字面量"><a href="#6-字面量" class="headerlink" title="6.字面量"></a>6.字面量</h2><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><blockquote><p>数据在程序中的书写格式</p></blockquote><h3 id="2-分类"><a href="#2-分类" class="headerlink" title="2.分类"></a>2.分类</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103171526026.png" alt="image-20230103171526026"></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ValueDemo1</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-comment">//目标：需要大家掌握常见的数据在代码中如何书写的？</span><br><br><span class="hljs-comment">//整数</span><br>System.out.println(<span class="hljs-number">666</span>);<br>System.out.println(-<span class="hljs-number">777</span>);<br><br><span class="hljs-comment">//小数</span><br>System.out.println(<span class="hljs-number">1.93</span>);<br>System.out.println(-<span class="hljs-number">3.71</span>);<br><br><span class="hljs-comment">//字符串</span><br>System.out.println(<span class="hljs-string">&quot;黑马程序员&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;尼古拉斯阿玮&quot;</span>);<br><br><span class="hljs-comment">//字符</span><br>System.out.println(<span class="hljs-string">&#x27;男&#x27;</span>);<br>System.out.println(<span class="hljs-string">&#x27;女&#x27;</span>);<br><br><span class="hljs-comment">//布尔</span><br>System.out.println(<span class="hljs-literal">true</span>);<br>System.out.println(<span class="hljs-literal">false</span>);<br><br><span class="hljs-comment">//空</span><br><span class="hljs-comment">//细节：null不能直接打印的。</span><br><span class="hljs-comment">//如果我们要打印null，那么只能用字符串的形式进行打印</span><br>System.out.println(<span class="hljs-string">&quot;null&quot;</span>);<br><br>&#125;<br>&#125; <br></code></pre></td></tr></table></figure><h3 id="3-制表符-t"><a href="#3-制表符-t" class="headerlink" title="3.制表符(\t)"></a>3.制表符(\t)</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103172724914.png" alt="image-20230103172724914"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ValueDemo2</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-comment">//目标：熟悉制表符的基本用法</span><br>System.out.println(<span class="hljs-string">&quot;name&quot;</span> + <span class="hljs-string">&#x27;\t&#x27;</span> + <span class="hljs-string">&quot;age&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;tom&quot;</span> + <span class="hljs-string">&#x27;\t&#x27;</span> + <span class="hljs-string">&quot;23&quot;</span>);<br>&#125;<br>&#125; <br></code></pre></td></tr></table></figure><h2 id="7-变量"><a href="#7-变量" class="headerlink" title="7.变量"></a>7.变量</h2><h3 id="1-使用场景及概念"><a href="#1-使用场景及概念" class="headerlink" title="1.使用场景及概念"></a>1.使用场景及概念</h3><blockquote><p>当某个数据经常发生改变时，我们也可以用变量存储。当数据变化时，只要修改变量里面记录的值即可。</p></blockquote><h3 id="2-变量定义格式"><a href="#2-变量定义格式" class="headerlink" title="2.变量定义格式"></a>2.变量定义格式</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103173418094.png" alt="image-20230103173418094"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VariableDemo</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-comment">//定义一个整数类型的变量</span><br><span class="hljs-comment">//数据类型 变量名 = 数据值;</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">16</span>;<br>System.out.println(a);<span class="hljs-comment">//16</span><br><br><span class="hljs-comment">//定义一个小数类型的变量</span><br><span class="hljs-type">double</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">10.1</span>;<br>System.out.println(b);<span class="hljs-comment">//10.1</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-变量的使用方式"><a href="#3-变量的使用方式" class="headerlink" title="3.变量的使用方式"></a>3.变量的使用方式</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103184549254.png" alt="image-20230103184549254"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VariableDemo2</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-comment">//1.变量名不允许重复</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-comment">//int a = 20;</span><br>System.out.println(a);<br><span class="hljs-comment">//2.一条语句可以定义多个变量</span><br><span class="hljs-comment">//int a = 10, b = 20, c = 20,d = 20;</span><br><span class="hljs-comment">//3.变量在使用之前必须要赋值</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>System.out.println(a);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-变量的注意事项"><a href="#4-变量的注意事项" class="headerlink" title="4.变量的注意事项"></a>4.变量的注意事项</h3><blockquote><ul><li>变量名不能重复</li><li>在一条语句中，可以定义多个变量。但是这种方式影响代码的阅读，所以了解一下即可。</li><li>变量在使用之前必须要赋值。</li><li>建议:以后在定义变量的时候，请直接赋值</li></ul></blockquote><h3 id="5-变量小结"><a href="#5-变量小结" class="headerlink" title="5.变量小结"></a>5.变量小结</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103185550682.png" alt="image-20230103185550682"></p><h3 id="6-变量案例"><a href="#6-变量案例" class="headerlink" title="6.变量案例"></a>6.变量案例</h3><blockquote><p>案例需求：</p><p>说出公交车到终点站之后，车上一共有多少乘客？ 一开始没有乘客。</p><p>第一站：上去一位乘客，没有下来乘客。</p><p>第二站：上去两位乘客，下来一位乘客。</p><p>第三站：上去两位乘客，下来一位乘客。</p><p>第四站：没有上去乘客，下来一位乘客。</p><p>第五站：上去一位乘客，没有下来乘客。</p><p>问：到了终点站之后，车上一共多少乘客？</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VariableTest1</span>&#123;<br><span class="hljs-comment">//主入口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-comment">//一开始没有乘客。</span><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">//第一站：上去一位乘客</span><br><span class="hljs-comment">//在原有的基础上 + 1</span><br>count = count + <span class="hljs-number">1</span>;<br><span class="hljs-comment">//System.out.println(count);</span><br><span class="hljs-comment">//第二站：上去两位乘客，下来一位乘客</span><br>count = count + <span class="hljs-number">2</span> - <span class="hljs-number">1</span>; <br><span class="hljs-comment">//第三站：上去两位乘客，下来一位乘客</span><br>count = count + <span class="hljs-number">2</span> - <span class="hljs-number">1</span>;<br><span class="hljs-comment">//第四站：下来一位乘客</span><br>count = count - <span class="hljs-number">1</span>;<br><span class="hljs-comment">//第五站：上去一位乘客</span><br>count = count + <span class="hljs-number">1</span>;<br><span class="hljs-comment">//请问：到了终点站，车上一共几位乘客。</span><br>System.out.println(count);<span class="hljs-comment">//3</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-数据类型"><a href="#8-数据类型" class="headerlink" title="8.数据类型"></a>8.数据类型</h2><h3 id="1-数据类型分类"><a href="#1-数据类型分类" class="headerlink" title="1.数据类型分类"></a>1.数据类型分类</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103211854522.png" alt="image-20230103211854522"></p><h3 id="2-基本数据类型"><a href="#2-基本数据类型" class="headerlink" title="2.基本数据类型"></a>2.基本数据类型</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103213318383.png" alt="image-20230103213318383"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VariableDemo3</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//1.定义byte类型的变量</span><br>        <span class="hljs-comment">//数据类型 变量名 = 数据值;</span><br>        <span class="hljs-type">byte</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        System.out.println(a);<br><br>        <span class="hljs-comment">//2.定义short类型的变量</span><br>        <span class="hljs-type">short</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        System.out.println(b);<br><br>        <span class="hljs-comment">//3.定义int类型的变量</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">30</span>;<br>        System.out.println(c);<br><br>        <span class="hljs-comment">//4.定义long类型的变量</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">123456789123456789L</span>;<br>        System.out.println(d);<br><br>        <span class="hljs-comment">//5.定义float类型的变量</span><br>        <span class="hljs-type">float</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-number">10.1F</span>;<br>        System.out.println(e);<br><br>        <span class="hljs-comment">//6.定义double类型的变量</span><br>        <span class="hljs-type">double</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-number">20.3</span>;<br>        System.out.println(f);<br><br>        <span class="hljs-comment">//7.定义char类型的变量</span><br>        <span class="hljs-type">char</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;a&#x27;</span>;<br>        System.out.println(g);<br><br>        <span class="hljs-comment">//8.定义boolean类型的变量</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        System.out.println(h);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3.注意事项"></a>3.注意事项</h3><blockquote><ul><li>如果要定义 一个整数类型的变量，不知道选择哪种数据类型了，默认使用int。</li><li>如果要定义 一个小数类型的变量，不知道选择哪种数据类型了，默认使用double。</li><li>如果要定义一个long类型的变量，那么在数据值的后面需要加上L后缀。（大小写都可以，建议大写。）</li><li>如果要定义一个float类型的变量，那么在数据值的后面需要加上F后缀。（大小写都可以）</li><li>double &gt; float &gt; long &gt; int &gt; short &gt; byte</li></ul></blockquote><h3 id="4-数据类型案例"><a href="#4-数据类型案例" class="headerlink" title="4.数据类型案例"></a>4.数据类型案例</h3><p>需求</p><blockquote><p><strong>需求：定义5个变量记录老师的信息并打印</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VariableTest1</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-comment">//1.定义字符串类型的变量记录老师的姓名</span><br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;黑马谢广坤&quot;</span>;<br><span class="hljs-comment">//2.定义整数类型的变量记录老师的年龄</span><br><span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">18</span>;<br><span class="hljs-comment">//3.定义字符类型的变量记录老师的性别</span><br><span class="hljs-type">char</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;男&#x27;</span>;<br><span class="hljs-comment">//4.定义小数类型的变量记录老师的身高</span><br><span class="hljs-type">double</span> <span class="hljs-variable">height</span> <span class="hljs-operator">=</span> <span class="hljs-number">180.1</span>;<br><span class="hljs-comment">//5.定义布尔类型的变量记录老师的婚姻状况</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-标识符"><a href="#9-标识符" class="headerlink" title="9.标识符"></a>9.标识符</h2><h3 id="1-基本概念-1"><a href="#1-基本概念-1" class="headerlink" title="1.基本概念"></a>1.基本概念</h3><blockquote><p>标识符:就是给类，方法，变量等起的名字。</p></blockquote><h3 id="2-硬性要求"><a href="#2-硬性要求" class="headerlink" title="2.硬性要求"></a>2.硬性要求</h3><blockquote><ul><li>必须由数字、字母、下划线_、美元符号$组成。</li><li>数字不能开头</li><li>不能是关键字</li><li>区分大小写的</li></ul></blockquote><h3 id="3-小驼峰命名法"><a href="#3-小驼峰命名法" class="headerlink" title="3.小驼峰命名法"></a>3.小驼峰命名法</h3><blockquote><p>适用于变量名和方法名</p><ul><li><p>如果是一个单词，那么全部小写，比如：name</p></li><li><p>如果是多个单词，那么从第二个单词开始，首字母大写，比如：firstName、maxAge</p></li></ul></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103220819536.png" alt="image-20230103220819536"></p><h3 id="4-大驼峰命名法"><a href="#4-大驼峰命名法" class="headerlink" title="4.大驼峰命名法"></a>4.大驼峰命名法</h3><blockquote><p>适用于类名</p><ul><li><p>如果是一个单词，那么首字母大写。比如：Demo、Test。</p></li><li><p>如果是多个单词，那么每一个单词首字母都需要大写。比如：HelloWorld</p></li></ul><p>不管起什么名字，都要做到见名知意</p></blockquote><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230103220915015.png" alt="image-20230103220915015"></p><h2 id="10-键盘录入"><a href="#10-键盘录入" class="headerlink" title="10.键盘录入"></a>10.键盘录入</h2><h3 id="1-基本过程"><a href="#1-基本过程" class="headerlink" title="1.基本过程"></a>1.基本过程</h3><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230104122446756.png" alt="image-20230104122446756"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//导包，其实就是先找到Scanner这个类在哪</span><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScannerDemo1</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-comment">//2.创建对象，其实就是申明一下，我准备开始用Scanner这个类了。</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-comment">//3.接收数据</span><br><span class="hljs-comment">//当程序运行之后，我们在键盘输入的数据就会被变量i给接收了</span><br>System.out.println(<span class="hljs-string">&quot;请输入一个数字&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> sc.nextInt();<br>System.out.println(i);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="11-集成开发工具IDEA"><a href="#11-集成开发工具IDEA" class="headerlink" title="11.集成开发工具IDEA"></a>11.集成开发工具IDEA</h2><h3 id="1-IDEA中层级结构介绍"><a href="#1-IDEA中层级结构介绍" class="headerlink" title="1.IDEA中层级结构介绍"></a>1.IDEA中层级结构介绍</h3><h4 id="1-基本结构"><a href="#1-基本结构" class="headerlink" title="1.基本结构"></a>1.基本结构</h4><p><img src="https://typora-demo-rbq.oss-cn-hangzhou.aliyuncs.com/image-20230104123815334.png" alt="image-20230104123815334"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java基础</tag>
      
      <tag>运算符</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
